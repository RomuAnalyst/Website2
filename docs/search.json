[
  {
    "objectID": "posts/2022-10-24-quarto-blogs/index.html",
    "href": "posts/2022-10-24-quarto-blogs/index.html",
    "title": "Adding a blog to your existing Quarto website",
    "section": "",
    "text": "About a year ago, I wrote my first ever blog post ~ about blogging ~ and tbh I’m a little embarrassed that this is only my third post here (does it count that I have ideas for blog posts squirreled away at least?? Grinning Face With Sweat). Regardless, you should trust me1 when I say that blogging is a great exercise for you to practice as regularly as you can – it can help you to:\nRather than repeat more content here, take a peek at my first post, which touches more reasons why you should blog and provides some ideas on how to structure your blog posts. Before jumping into things, I’ll leave you with one last piece of advice from @drob:"
  },
  {
    "objectID": "posts/2022-10-24-quarto-blogs/index.html#i.-before-we-chat-about-blogs",
    "href": "posts/2022-10-24-quarto-blogs/index.html#i.-before-we-chat-about-blogs",
    "title": "Adding a blog to your existing Quarto website",
    "section": "I. Before we chat about blogs…",
    "text": "I. Before we chat about blogs…\nOur Master of Environmental Data Science (MEDS) students created the bones of their Quarto websites a few months ago, and more recently took a little dive into website customization using Sass & CSS. For anyone who’s looking to get started on their website-building journey, feel free to explore the following resources:\nWindow Maximize Creating your personal website using Quarto\nPalette Customizing Quarto Websites: Make your website stand out using Sass & CSS"
  },
  {
    "objectID": "posts/2022-10-24-quarto-blogs/index.html#ii.-whats-the-difference-between-a-website-and-a-blog",
    "href": "posts/2022-10-24-quarto-blogs/index.html#ii.-whats-the-difference-between-a-website-and-a-blog",
    "title": "Adding a blog to your existing Quarto website",
    "section": "II. What’s the difference between a website and a blog?",
    "text": "II. What’s the difference between a website and a blog?\nIf you’ve spent some time poking around the official Quarto documentation, you may have noticed instructions for creating either a Website or a Blog – but what’s the difference? Not much, aside from the initial structure:\n\n\n\n\n\n\nWhen you create a new Quarto website, it’ll look like this (it has a traditional landing (i.e. ‘Home’) page and no incorporated blog)…\n\n\n\n\n\n\n\n… while a new Quarto blog will look like this (with a listing page as your landing page)\n\n\n\n\n\nA Quarto Blog is a type of Quarto Website – according to the Quarto documentation, you can create websites that consist of just a single blog (like the above right-hand example), websites that have multiple blogs, or you can add a blog to a website that contains other content (which is what we’ll be doing today)."
  },
  {
    "objectID": "posts/2022-10-24-quarto-blogs/index.html#iii.-adding-a-blog-to-your-personal-quarto-website",
    "href": "posts/2022-10-24-quarto-blogs/index.html#iii.-adding-a-blog-to-your-personal-quarto-website",
    "title": "Adding a blog to your existing Quarto website",
    "section": "III. Adding a blog to your personal Quarto website",
    "text": "III. Adding a blog to your personal Quarto website\nTL;DR: A couple of steps are required for setting up your blog, but generally speaking, you’ll need:\nangle-right a folder (i.e. subdirectory) to hold all of your individual blog posts – I called my folder posts (though the name is up to you). I also (optionally) added a _metadata.yml file to this folder which includes some formatting and configuration options that will apply to all blog posts in this folder\nangle-right a listing page, which lists all of your blog posts for viewers to browse and click through – this is a .qmd file that you’ll add to your website’s navbar by including it in _quarto.yml\nangle-right blog posts! Your listing page will be blank until you actually add your first blog post\nLet’s create those together now.\n\nCreate a /posts folder: Open up your Quarto website project (I find it easiest to do this in RStudio) and make sure you’re in your root directory. Here, we’ll create a new subdirectory, called posts (you can call this whatever you want), where all of our blog posts will eventually live. To do so, you can either (a) click on the add folder button, , in the Files pane, or (b) in the RStudio Terminal, run mkdir posts.\nOptional: Add a _metadata.yml file to /posts: While not required, a _metadata.yml file can make your life easier if you want certain options to apply to all blog posts that you create. In the RStudio Terminal, run cd posts to move into that directory, then touch _metadata.yml to create the file. Open your _metadata.yml in the Source pane to add options. I like these options2, but it’s entirely up to you what you want to include (if anything at all):\n\n\n# options specified here will apply to all posts in this folder\n\n# prevents posts from re-rendering unless explicitly told to do so (for more, see https://quarto.org/docs/projects/code-execution.html#freeze)\nfreeze: true\n\n# enable banner style title blocks (see https://quarto.org/docs/authoring/title-blocks.html)\ntitle-block-banner: true\n\n\nCreate a listing page: A listing page is a page with content that is automatically generated from a list of documents – in this case, that would be a list of blog posts – and looks something like this (or check out my blog’s listing page here):\n\n\n\n\n\n\nThe MEDS Community Blog listing page, with multiple blog posts arranged in the default-style layout – Quarto has multiple listing page layout options (default, grid, table) for you to explore\n\n\n\n\n\nTo create a listing page, add a posts.qmd file to your root directory. First, click on the R Project icon, , in the Files pane to jump back to your project’s root directory. There are a bunch of ways to create a new .qmd file, but one easy way is to choose File &gt; New File &gt; Quarto Document…. Below, I give mine the title “My Blog” when prompted (this name appears at the top of your listing page), then saved it as posts.qmd (but you can choose whatever title and/or file name you’d like).\n\n\nConfigure your listing page: Specify how you’d like your listing page to be arranged by updating the YAML section of posts.qmd. There are a variety of options that you can specify. Below are just a few, but check out other options here:\n\n\ntitle: \"My Blog\"\nlisting: \n  contents: posts # all Quarto docs in the `posts` directory will be included on your listing page\n  type: grid # or `default` or `table`; each type has its own set of yaml options to include\n  sort: \"date desc\" # can also sort on more than one field\n  categories: true # allows you to sort posts by assigned categories \n\n\nAdd your listing page to your website’s navbar: Update _quarto.yml with your new listing page to add it to your site’s navbar:\n\n\n# ~ parts of `_quarto.yml` omitted for brevity ~\n\nwebsite:\n  navbar:\n    title: myWebsiteTitle\n    right:\n      - href: index.qmd\n        text: home\n      - about.qmd\n      - posts.qmd # add your posts.qmd file to your navbar!\n\n\nPreview or Render your website: Make sure your listing page shows up by previewing or rendering your website (you can do either of these from the Build tab in RStudio. You should have something that looks like this (we haven’t created any posts yet, so it’ll be empty for now):"
  },
  {
    "objectID": "posts/2022-10-24-quarto-blogs/index.html#iv.-add-a-blog-post-to-your-blog",
    "href": "posts/2022-10-24-quarto-blogs/index.html#iv.-add-a-blog-post-to-your-blog",
    "title": "Adding a blog to your existing Quarto website",
    "section": "IV. Add a blog post to your blog",
    "text": "IV. Add a blog post to your blog\nNow that you have your listing page set up, we can start populating it with blog posts. Repeat the following steps each time you want to add a new post.\n\nCreate a subdirectory inside your posts directory: To stay organized, I usually name mine YYYY-MM-DD-short-post-description. This folder name will also become the slug for your published post.\nInside your new subdirectory, create an index.qmd file. The name here is important! It must be called index.qmd. Your file path should look something like this: mywebsite/posts/2022-10-24-my-blog-post/index.qmd. This file is your blog post. Write all your content here!\nConfigure your blog post: You can add a variety of different options to the YAML section of index.qmd. Here are my go-to options:\n\n\n---\ntitle: \"blog post title\"\ndescription: \"blog post description (appears underneath the title in smaller text) which is included on the listing page\"\nauthor:\n  - name: Samantha Csik\n    url: https://samanthacsik.github.io/\n    orcid: 0000-0002-5300-3075\n    affiliation: Master of Environmental Data Science Program @ The Bren School (UCSB) & The National Center for Ecological Analysis & Synthesis\n    affiliation-url: https://ucsb-meds.github.io/ \ndate: 10-24-2022\ncategories: [Quarto, R, MEDS] # self-defined categories\ncitation: \n  url: https://samanthacsik.github.io/posts/2022-10-24-quarto-blogs/ \nimage: preview_image.jpg\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\nSome notes on the above options:\n\nYou should include a title, but don’t necessarily need a description (although I think they’re nice to have!). Both of these fields will appear on your listing page.\nYou can include more than one author – see this post and source code as an example.\nYou may include as many self-defined categories as you’d like. Make sure that your spelling/capitalization/punctuation is consistent across blog posts should you apply the same categories to multiple posts.\nAdding the citation option automatically generates both a BibTeX citation and reference for your blog post, and adds them to the bottom of your post.\nInclude an image (or gif) to add as a preview image, which will appear on your listing page alongside your post. Your image should live inside your post’s subdirectory (e.g. mywebsite/posts/2022-10-24-my-blog-post/preview-image.png).\nSet draft: true while you’re still working on your blog post to prevent it from showing up on your listing page, site map, or site search. When you’re ready to publish, just remove draft: true from your YAML (or set to false) then render your post.\n\n\n\n\n\n\n\nA grid-style listing page featuring one blog post with a preview image, title, three categories, description, author, and publishing date\n\n\n\n\n\n\n\nAn example blog post, with a banner style title block\n\n\n\n\n\nIf things aren’t working as expected, double check your repository structure – it should look something like this:"
  },
  {
    "objectID": "posts/2022-10-24-quarto-blogs/index.html#v.-some-additional-authoring-features-to-explore",
    "href": "posts/2022-10-24-quarto-blogs/index.html#v.-some-additional-authoring-features-to-explore",
    "title": "Adding a blog to your existing Quarto website",
    "section": "V. Some additional authoring features to explore",
    "text": "V. Some additional authoring features to explore\nBlog posts are just Quarto documents, meaning you can combine prose, code, and embedded outputs all in one place, just like you would in any other .qmd file (which makes your blog the perfect place to create data science/programming tutorials both for yourself and others Winking Face). If you’re looking for additional ways to enhance your posts, read on below:\n\nAdding footnotes\nThere are multiple ways to include footnotes throughout your blog posts:\n\nUse the [^#] syntax to denote where you would like a note to be inserted. Write your note somewhere below following the [^#]: your note here syntax. For example:\n\n\nI am going to insert a footnote here[^1].\n\n[^1]: Here is the associated footnote, which will appear at the bottom of my document in a \"Footnotes\" section.\n\n\nAlternatively, you can write your notes inline to avoid having to use identifiers (e.g. [^#]). For example:\n\n\nI am going to insert an inline footnote here^[Here is my inline footnote].\n\n\nYou can also add footnotes that include multiple paragraphs. See the source code for this blog post and take a peek at footnote #2 for an example on how to do so (or check out the Quarto documentation).\n\nAll footnotes will appear in a “Footnotes” section that is automatically generated for you.\n\n\nCreating a bibliography and adding citations\nQuarto supports the use of bibliography files for citing works throughout your blog post. There are a number of ways to do this, but so far, I’ve found creating a BibLaTex database to be relatively straightforward. This database takes the form of a plain-text .bib file where we can store all of our bibliographic information. That information needs to be encoded in a particular way (more on that below). Follow these steps to cite works in your blog posts:\n\nFirst, create a .bib file in the folder containing your blog post (e.g. mywebsite/posts/2022-10-24-my-blog-post/references.bib) using the touch command in your RStudio Terminal. I called mine references.bib, but the name is up to you.\nTo use your references.bib file, you’ll need to add the bibliography option to your blog post’s YAML:\n\n\n---\ntitle: \"blog post title\"\n# ~ additional YAML options omitted for brevity ~\nbibliography: references.bib\n---\n\n\nNext, we’ll want to add some references. These take a particular format that generally looks like this (the number/types of fields included may vary):\n\n\n@type{key,\n  author = {LastName, FirstName},\n  title = {Title of work},\n  date = {YYYY}\n  url = {https://url.com},\n  langid = {en}\n}\n\nwhere type can be manual, book, article, misc, etc. (all case-insensitive) and key is the citation identifier used for inserting in-text citations (we’ll get there soon).\n\nThere may be instances where you want to cite a resource that already has a BibTex citation available for you to copy over to your references.bib file (e.g. this blog post). For most resources, however, you’ll need to construct your own. You can do this manually, or with the help of a BibTeX reference generator (Googling will yield plenty of options, but zoterobib is a great place to start. Note that you may have to make some manual adjustments). Check out my references.bib file for this post as an example.\n\n\nNow that you have BibTex references in your .bib file, you can start adding in-text citations. These generally take the form [@key] (but read more about Quarto citation syntax here). When you add an in-text citation, Quarto will automatically add the reference to the bottom of your blog post under the “References” section.\n\n\nTo give one final concrete example, let’s say I want to cite my first (ever) blog post from last year. I can copy the BibTeX citation from the bottom of the post and paste it into my references.bib file:\n\n\n@online{csik2021,\n  author = {Samantha Csik},\n  title = {Why Create Presentation Slides about Blogging When You Can\n    Just Blog about It Instead?},\n  date = {2021-09-24},\n  url = {https://samanthacsik.github.io/posts/2021-09-21-distill-blogs/},\n  langid = {en}\n}\n\n\nI can now add an in-text citation using the [@csik2021] syntax here arrow-right (Csik 2021). Once cited, it will appear in my References section at the bottom of this post.\n\nThat wasn’t so bad, right?? What if I told you there was an even easier way to add citations….Start by popping over to RStudio’s Visual editor, if you’re not already there (you should see buttons for working in either the Source or Visual editor in the top left corner of your source pane), and follow the steps below:\n\nPlace your cursor where you’d like to insert a citation, then from the Insert drop down menu, select Citation.\nA new window will pop open with a number of different options for inserting citations. If you’ve already created a references.bib file, it will appear under the My Sources and Bibliography sections. You can choose any of your existing references to insert an in-text citation from or choose another option, like inserting a citation based on a DOI (!!! I can’t tell you how awesome I think this is !!!). Once you add an in-text citation based on a DOI, the BibTeX reference will automatically be added to your references.bib file, as well as to your references list at the bottom of your post. If you don’t yet have a references.bib file, one will automatically be generated for you. LIKE SERIOUSLY?? SO FREAKIN COOL.\n\n\n\n\n\n\n\n\n\n\nOkay, back to being chill…\n\n\nArticle layout\nQuarto also supports a number of different page layout options to further customize the appearance of your posts. Explore different ways to position elements on your page, including embedding outputs, captions, references in your page margin (one of my personal faves…despite the fact that I don’t have any here in this post)."
  },
  {
    "objectID": "posts/2022-10-24-quarto-blogs/index.html#vi.-a-note-on-adding-an-additional-blog-or-more-to-your-site",
    "href": "posts/2022-10-24-quarto-blogs/index.html#vi.-a-note-on-adding-an-additional-blog-or-more-to-your-site",
    "title": "Adding a blog to your existing Quarto website",
    "section": "VI. A note on adding an additional blog (or more) to your site",
    "text": "VI. A note on adding an additional blog (or more) to your site\nYou aren’t limited to just one blog/listing page! Repeat Part III to add a second listing page + content to your website. My personal website contains two blogs – one called posts and another called talks & workshops. Explore the GitHub repo to take a peek at the file structure and source code."
  },
  {
    "objectID": "posts/2022-10-24-quarto-blogs/index.html#vii.-blogs-to-follow-one-post-from-each-that-ive-particularly-enjoyed",
    "href": "posts/2022-10-24-quarto-blogs/index.html#vii.-blogs-to-follow-one-post-from-each-that-ive-particularly-enjoyed",
    "title": "Adding a blog to your existing Quarto website",
    "section": "VII. Blogs to follow (+ one post from each that I’ve particularly enjoyed)",
    "text": "VII. Blogs to follow (+ one post from each that I’ve particularly enjoyed)\nThere are tons of awesome data science bloggers out there, and (at the cost of sounding like a broken record) Twitter is a great place to find them. Here are just a few I’ve been reading and enjoying as of late, but get out there and start exploring others for yourself!\nAlso note: I’ve added citations for each of these blog posts. Check out the source code if you’re looking for additional examples on how to do it.\n\nPiping Hot Data, by Shannon Pileggi – find her on Twitter @PipingHotData and check out her post, Curating for @WeAreRLadies on Twitter (2021)\nMeghan Hall’s Blog – find her on Twitter @MeghanMHall and check out her post, Increasing the Flexibility and Robustness of Plots in ggplot2 (2022)\nCosima Meyer’s Blog – find her on Twitter @cosima_meyer and check out her post, Understanding the Basics of Package Writing in R (2022)\nNotes from a Data Witch by Danielle Navarro – find her on Twitter @djnavarro and check out her post, Getting started with Apache Arrow (2021)\nBeatriz Milz’s Blog – find her on Twitter @BeaMilz and check out her post, Introduction to GitHub Actions for R users (2022)"
  },
  {
    "objectID": "posts/2022-10-24-quarto-blogs/index.html#viii.-additional-resources",
    "href": "posts/2022-10-24-quarto-blogs/index.html#viii.-additional-resources",
    "title": "Adding a blog to your existing Quarto website",
    "section": "VIII. Additional Resources",
    "text": "VIII. Additional Resources\n\nThe ultimate guide to starting a Quarto blog, by Albert Rapp is incredibly thorough and explores even more ways to customize your blog. Check it out!\nCreating a blog with Quarto in 10 steps, by Beatriz Milz walks through the steps of setting up a new Quarto Blog project. She also details how to set up giscus to enable comments on your blog posts, which is something I’ve been eager to try myself!"
  },
  {
    "objectID": "posts/2022-10-24-quarto-blogs/index.html#footnotes",
    "href": "posts/2022-10-24-quarto-blogs/index.html#footnotes",
    "title": "Adding a blog to your existing Quarto website",
    "section": "Notes de bas de page",
    "text": "Notes de bas de page\n\n\nOkay, you don’t just have to trust me. Lots of data scientists advocate for blogging as an important skill and communication tool. Check out this blog post by David Robinson to start.↩︎\nThe freeze option: Setting this option to auto will only re-render posts when you make updates to the source files (as opposed to re-rendering them each time you Render Website – this can save time, particularly if you have computationally-heavy content in your blog posts). If you set this option to true, posts will never be re-rendered (even if you’ve made changes to the source files). If you use this option, you’ll need to Render individual posts whenever you make changes to their source files before you Render Website, otherwise your updates will not appear.\nThe title-block-banner option: Setting this option to true will enable a banner style title block (where the title, subtitle, description, and categories are all positioned inside the banner) for all posts.↩︎"
  },
  {
    "objectID": "posts/2022-06-22-hello_quarto/index.html",
    "href": "posts/2022-06-22-hello_quarto/index.html",
    "title": "Hello Quarto!",
    "section": "",
    "text": "Catalina Oaida Taglialatela screenshares the NASA Earthdata Cloud Cookbook, a website built using Quarto and accessible at https://nasa-openscapes.github.io/earthdata-cloud-cookbook/\n\n\n\n\nQuarto, the new cool kid on the open data science block, extends the best features of RMarkdown (plus more!) to Python, Julia, and ObservableJS users. I got the chance to chat with folks at the forefront of exploring all that Quarto is capable of during the 6th Openscapes Community Call. Check out our post on the Blog Openscapes Blog, where we summarize some of what we discussed, from publishing Quarto websites and slide decks, to how Quarto enables seamless integration between different language users, to how amazingly easy it is to insert automatically-generated citations into your Quarto documents.\nFind the full event recording Video here!\n\n\n\nCitationBibTeX citation:@online{csik2022,\n  author = {Csik, Samantha and Lowndes, Julie and Steiker, Amy and Oaida\n    Taglialatela, Catalina and Friesz, Aaron and Allaire, J.J. and\n    Robinson, Erin and Butland, Stefanie},\n  title = {Hello {Quarto!}},\n  date = {2022-06-22},\n  url = {https://www.openscapes.org/blog/2022/06/22/hello-quarto/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nCsik, Samantha, Julie Lowndes, Amy Steiker, Catalina Oaida Taglialatela,\nAaron Friesz, J.J. Allaire, Erin Robinson, and Stefanie Butland. 2022.\n“Hello Quarto!” June 22, 2022. https://www.openscapes.org/blog/2022/06/22/hello-quarto/."
  },
  {
    "objectID": "posts/2021-09-21-distill-blogs/index.html",
    "href": "posts/2021-09-21-distill-blogs/index.html",
    "title": "Why create presentation slides about blogging when you can just blog about it instead?",
    "section": "",
    "text": "I am a total blog newb.\nBUT we all have to start somewhere. And my somewhere is leading a mini-workshop in T-6 days for our first Master of Environmental Data Science (MEDS) cohort (read more about this awesome new program here) on why blogging as data scientists is an important and valuable skill to practice, what a good blog post might look like, and some of the technical aspects of creating blog posts using the {distill} package.\nI originally set off on my self-education journey by digging into other data science-related blogs and throwing together some slides about what I found. I even practiced creating a fake blog post on my own (and very much still under development) personal website in case anyone asked me to walk them through the steps (I can’t look like I don’t know what I’m doing now, right??).\nTen slides deep and then it struck me – I was creating a presentation on how to blog without ever actually creating my own blog post?? Dammit. Doesn’t quite feel right. So here we are. Baby’s first blog post ~about blog posts~. I’d say this first post is half meant to serve our MEDS students as they embark on their fall quarter (and will surely be asked to blog every now and again) and half meant to be the catalyst I so desperately needed to finally put a little bit of writing out there in the data science world.\nSo here we go! I’ll start by sharing examples of different blogs that I think demonstrate a few creative ways to format and publish data science content. Then I’ll review some of the cool things you can do with {distill} to customize your own beautiful posts."
  },
  {
    "objectID": "posts/2021-09-21-distill-blogs/index.html#i.-why-blog",
    "href": "posts/2021-09-21-distill-blogs/index.html#i.-why-blog",
    "title": "Why create presentation slides about blogging when you can just blog about it instead?",
    "section": "I. Why blog?",
    "text": "I. Why blog?\nData science blogging has become pretty darn popular in recent years, and for good reason. It can help you to build your online professional profile, enhance your communication skills, stay atop the latest and greatest trends and tools, connect with other data scientists, and even solicit feedback from those in the community.\nBut arguably one of the most valuable reasons to blog is to get a whole lot better at doing whatever it is you want to write about. You’ve probably heard some version of the saying, “The best way to learn something is to teach it to others” – not only do I find this to be true of myself, but there’s also science1 to back this up!\nStill, getting started can be a bit intimidating (I’m only doing this for the first time now myself). It an attempt to make it a little less so for the next blogger-to-be, I have tried to gather some ideas, instructions, and inspiration to get things going. If nothing else, I think heeding the advice of this tweet2 is a pretty good place to start:\n\n\nWhen you’ve written the same code 3 times, write a functionWhen you’ve given the same in-person advice 3 times, write a blog post\n\n— David Robinson ((drob?)) November 9, 2017"
  },
  {
    "objectID": "posts/2021-09-21-distill-blogs/index.html#ii.-structuring-data-science-blog-posts",
    "href": "posts/2021-09-21-distill-blogs/index.html#ii.-structuring-data-science-blog-posts",
    "title": "Why create presentation slides about blogging when you can just blog about it instead?",
    "section": "II. Structuring data science blog posts",
    "text": "II. Structuring data science blog posts\nThere are lots of creative ways to blog (both for yourself and your target audience) about your data science journey. Here are just a few examples3 that caught my eye.\n\ni. Make a tutorial for yourself (and others)\nAllison Horst shares all the exciting ways you can customize tables using the {gt} package, including code snippets and resulting outputs in her post, Customizing tables is fun (seriously) with gt (Horst 2021).\n\n\n\n\n\n\n\nii. Compare popular tools to new alternatives\nHarry Fisher (Data, Code & Coffee) explores {nakedpipe} a new(er) alternative to {magrittr}’s %&gt;% in his blog post, Penguins and nakedpipes (Fisher 2020).\n\n\n\n\n\n\niii. Describe how to use a tool and when it’s appropriate to do so\nEric Ekholm covers how to use the {ggtext} package to replace your use of ggplot legends with colored title text in his post, Improving ggplots with Text Color (EE (2021)). Importantly, he discusses when it might be most appropriate to do so and when you might opt for an alternative method.\n\n\n\n\n\n\niv. Hold yourself accountable to a coding challenge (and teach others along the way!)\nElla Kaye documents her progress through the 2020 Advent of Code, a series of small coding challenges, released daily through December in her post Advent of Code, 2020 (Kaye 2020).\n\n\n\n\n\n\nv. Share what you learned at a conference\nDanielle Brantley (Data Sci Dani) recaps her experiences at R Conference 2020 and provides brief overviews of the R packages she learned about along the way in her post, Packages I Learned about at R Conference NYC (Brantley 2020).\n\n\n\n\n\n\nvi. Present a coding problem and solution\nKaija Gahm (woodpeckeR) defines a coding problem, provides some context, and describes her solution along with why it works in her post, %$%: upping your pipe game (Gahm 2021).\n\n\n\n\n\n\nvii. Share how you use code as a creative medium\nIjeamaka Anyene is a computational aRtist who shares her process of creating abstract geometrical rectangular designs (check out her ‘Subdivisions Series’ on her Etsy shop) in her post, So, you want to subdivide a rectangle (Anyene 2021).\n\n\n\n\n\n\nviii. Document the evolution of your code in multiple posts\nMatt Kerlogue (The Lapsed Geographer) details his use of the {pdftools} and tidyverse packages in R to web scrape and wrangle COVID-19 data from UK reports in his post, Scraping Google’s COVID-19 mobility report PDFs (Kerlogue 2020b). He later follows up with instructions on how to automate this process for reports from ~130 countries and all 50 US states in his post, Automating the COVID-19 PDF scraping (Kerlogue 2020a).\n\n\n\n\nNow that we’re all feeling inspired to flex our creative data science muscles, let’s create and customize our own blog posts Blog"
  },
  {
    "objectID": "posts/2021-09-21-distill-blogs/index.html#iii.-adding-a-distill-blog-to-your-personal-website",
    "href": "posts/2021-09-21-distill-blogs/index.html#iii.-adding-a-distill-blog-to-your-personal-website",
    "title": "Why create presentation slides about blogging when you can just blog about it instead?",
    "section": "III. Adding a distill blog to your personal website",
    "text": "III. Adding a distill blog to your personal website\nDisclaimer: A lot of the following content (sections III & IV) is just a compilation of excellent existing resources. I learn by repeating things (usually many times), so taking the time to type out code/YAML headers has been helpful, albeit not at all novel. See a list of referenced resources at the bottom of this post.\nIf you have not yet made a distill site, there are many great tutorials out there. For MEDS students, I recommend following along with these step-by-step instructions by Allison Horst before moving forward. For a very brief intro on customizing your distill site using CSS, check out these slides.\n\nNote: The following section was adapted from Hill (2020)\n\nNow that you have your distill site up and running, you can create your first blog post by running the distill::create_post() function in your console:\n\ncreate_post(title = \"My blog post\")\n\nIf this is the first time you are creating a blog post, {distill} will add a directory called _posts/, which will contain this plus all future blog posts. You will also need to create a listing page, which will list all of your posts. Do this by adding a blank .Rmd file to your root directory by running utils::file.edit(\"blog.Rmd\") in your console, then add a YAML header to your new file as follows:\n\n---\ntitle: \"Blog\"  # any name you want\nlisting: posts # do this exactly\n---\n\nFinally, link your new listing page to your website’s navbar by editing _site.yml. Note: Since I named my listing .Rmd file as blog.Rmd, the href I need to link to is blog.html.\n\nnavbar:\n  right:\n    - text: \"Home\"\n      href: index.html\n    - text: \"Blog\"      # add \n      href: blog.html   # add"
  },
  {
    "objectID": "posts/2021-09-21-distill-blogs/index.html#iv.-customizing-your-distill-blog-posts",
    "href": "posts/2021-09-21-distill-blogs/index.html#iv.-customizing-your-distill-blog-posts",
    "title": "Why create presentation slides about blogging when you can just blog about it instead?",
    "section": "IV. Customizing your distill blog & posts",
    "text": "IV. Customizing your distill blog & posts\nA couple simple touches can go a long way in improving the look of your distill blog. Here are some of the steps I followed to customize my first blog post.\n\nNote: This section’s content was largely adapted from Allaire et al. (2018)\n\n\ni. Preview images\nPreview images are those fun little thumbnails that appear alongside blog posts on your listing page:\n\n\n\n\n\nAdd your image to the folder where your blog post .Rmd lives (e.g. _posts -&gt; YYYY-MM-DD-my-blog-post -&gt; my_preview_image.jpeg). Then, add the preview field to the YAML header of your blog post .Rmd file and set the value to the name of your preview image:\n\n---\ntitle: \"my blog post\"\n# (additional metadata excluded for brevity)\npreview: my_preview_image.jpeg  # your preview image\n---\n\n\n\nii. Categories\nYou can assign each post to one or more “categories,” making it easier for your readers to filter content. Do so by adding the categories field to the YAML header of your blog post .Rmd file, then list whichever self-defined categories you would like your post to be assigned to. For example, I assigned this blog post to two catetories: distill and R:\n\n---\ntitle: \"Why create slides about blogging when you can just blog about it instead?\"\n# (additional metadata excluded for brevity)\ncategories:\n  - distill # list as many categories as you'd like \n  - R \n---\n\nTake a look at your listing page to see all your categories (and how many articles are assigned to each). Assigned categories will also appear as metadata at the top of each post.\n\n\niii. Table of contents\nTable of contents can be helpful for readers to navigate longer posts. Add the toc (and optionally, toc_float) field to your blog’s YAML header as shown below:\n\n---\ntitle: \"my blog post\"\n# (additional metadata excluded for brevity)\noutput:\n  distill::distill_article:\n    self_contained: false\n    toc: true              # add a table of contents\n    toc_float: true        # float it (positioned on the left-hand side, rather at the top)\n---\n\n\n\niv. Citations\nYou can add automatically-generated citations to the bottom of your posts, making it easier for readers to reference your work.\nI did this by first adding the base_url field to my _site.yml and set the value to the landing page URL of my distill site. For example:\n\n---\nname: \"samanthacsik.github.io\"\ntitle: \"Samantha Csik\"\n# (additional metadata excluded for brevity)\nbase_url: samanthacsik.github.io # add your website's landing page url\n---\n\nI then specified the slug (the unique identifying part of a web address) in the YAML header of my blog post .Rmd file (a slug will be automatically generated if not provided):\n\n---\ntitle: \"Why create slides about blogging when you can just blog about it instead?\"\n# (additional metadata excluded for brevity)\nslug: csik2021firstBlog\n---\n\nYour citations will now appear as metadata at the bottom of your post upon knitting.\n\n\nv. Bibliographies\nYou can use standard R Markdown bibliographies to cite works throughout your post and include a corresponding “References” list. You will first need to create a .bib file in the folder containing your blog post. You can do so by running the file.edit() function in your console. For example:\n\nfile.edit(\"_posts/YYYY-MM-DD-my-blog-post/bibliography.bib\")\n\nNext, add the bibliograhy field to the YAML header of your blog post .Rmd file and set the value to the name of your new .bib file:\n\n---\ntitle: \"my blog post\"\n# (additional metadata excluded for brevity)\nbibliography: bibliography.bib\n---\n\nNow, add citation information to your .bib file. This is super easy if you are citing a distill article that has citation information already included – just copy and paste! Note: there are different formats (e.g. CSL or BibTeX) for creating bibliography files. I chose to use BibTeX.\nFor example, Allaire et al. (2018) includes the following BibTeX citation at the end of their post, which I have copied into my .bib file:\n\n@misc{allaire2018distill,\n  author = {Allaire, JJ and Iannone, Rich and Presmanes Hill, Alison and Xie, Yihui},\n  title = {Distill for R Markdown},\n  url = {https://rstudio.github.io/distill},\n  year = {2018}\n}\n\nNote the format of this citation, where type can be manual, book, article, misc, etc. (all case-insensitive) and key is the citation reference used for inserting in-text citations.\n\n@type{key,\n  ...\n  }\n\nTo include an in-text citation for the above reference, type @allaire2018distill (or if you prefer your citation to be inside parentheses, [@allaire2018distill]). Adding the in-text citation will automatically add the full reference to your “References” list at the bottom of your post. To read more about including bibliographies and citations in your blog posts, see Xie (2021) and Xie, Dervieux, et Riederer (2021).\n\n\nvi. Appendices\nWhile citations and references will be automatically added as appendices to your blog post (if you followed along with the steps above), you can add additional content here by adding the .appendix class to any level 1 or level 2 header. For example, I added an additional “Corrections” statement to my appendix below by typing:\n## Corrections {.appendix}\nIf you see mistakes or want to suggest changes...\n \nI had a ton of fun playing around with some of these easy-to-implement features that the {distill} package provides for customizing blog posts. And I had even more fun checking out other data science blogs as I looked for inspiration. I hope they inspired you too! Happy blogging Beaming Face With Smiling Eyes"
  },
  {
    "objectID": "posts/2021-09-21-distill-blogs/index.html#footnotes",
    "href": "posts/2021-09-21-distill-blogs/index.html#footnotes",
    "title": "Why create presentation slides about blogging when you can just blog about it instead?",
    "section": "Notes de bas de page",
    "text": "Notes de bas de page\n\n\nThis is sometimes referred to as the Protégé Effect or the Feynman Learning Technique. You can learn a bit more from (Nestojko et al. 2014) and (Ambion et al. 2020)↩︎\nI might also add that having to look up something 3x for yourself might be a good reason to blog about it. Read David Robinson’s full post about starting a data science blog here.↩︎\nMany of the following blogs can be found on the distillery, a blog about building distill websites and blogs. Check it out!↩︎"
  },
  {
    "objectID": "talks_workshops/2022-08-05-creating-your-personal-website-using-quarto/index.html",
    "href": "talks_workshops/2022-08-05-creating-your-personal-website-using-quarto/index.html",
    "title": "Creating your personal website using Quarto",
    "section": "",
    "text": "Art by Allison Horst: One penguin standing on another penguin’s shoulders in a snowscape, looking through a telescope at a Quarto logo ‘moon’ in the night sky.\n\n\n\n\n\n\n\n\n instructional documentation\n\n\n source code\n\n\n\n\n\nOverview\nThis workshop was originally developed for the Master of Environmental Data Science (MEDS) program, administered by the Bren School of Environmental Science & Management in partnership with the National Center for Ecological Analysis and Synthesis.\n\n\nAbstract\nA personal website is not only a great way to showcase your experiences and skills, but also gives people (potential employers included!) a better sense of who you are as a person. There are lots of great tools for building websites using R (e.g. {distill}, {blogdown}) – this year, we’ll be using Quarto, an exciting, new, and versatile publishing tool that supports R, Python, Julia, and ObservableJS. Want to get started on building your own website using Quarto? Check out this tutorial.\n\n\n\n\nCitationBibTeX@online{csik2022,\n  author = {Csik, Samantha},\n  title = {Creating your personal website using Quarto},\n  date = {2022-08-05},\n  url = {https://samanthacsik.github.io/talks/2022-08-05-creating-your-personal-website-using-quarto/},\n  langid = {fr}\n}\nVeuillez citer ce travail comme suit :\nCsik, Samantha. 2022. “Creating your personal website using\nQuarto.” August 5, 2022. https://samanthacsik.github.io/talks/2022-08-05-creating-your-personal-website-using-quarto/."
  },
  {
    "objectID": "talks_workshops/2022-10-24-quarto-blogs/index.html",
    "href": "talks_workshops/2022-10-24-quarto-blogs/index.html",
    "title": "Adding a blog to your existing Quarto website",
    "section": "",
    "text": "Art by Allison Horst: Two excited penguins diving off of an iceberg into the ocean. A Quarto logo ‘moon’ in the sky is reflected in the water that they’re diving into.\n\n\n\n\n\n\n\n blog post\n\n\n source code\n\n\n\n\nOverview\nThis workshop was originally developed for the Master of Environmental Data Science (MEDS) program, administered by the Bren School of Environmental Science & Management in partnership with the National Center for Ecological Analysis and Synthesis.\n\n\nAbstract\nBlogging about your data science adventures has a lot of benefits – it can help you to build your online profile/portfolio, practice your writing and communication skills, stay atop data science trends, solicit feedback from the community, network, learn new skills and/or solidify understanding, combat imposter syndrome, etc. In this workshop, we’ll learn how to add a blog to our Quarto website, customize posts, and (hopefully) get inspired to begin our blogging journeys!"
  },
  {
    "objectID": "talks_workshops/2021-11-15-ide-tips-tricks/index.html",
    "href": "talks_workshops/2021-11-15-ide-tips-tricks/index.html",
    "title": "RStudio Tips & Tricks",
    "section": "",
    "text": "slides\n\n\n source code\n\n\n\n\nOverview\nThis talk was originally developed for the Master of Environmental Data Science (MEDS) program, administered by the Bren School of Environmental Science & Management in partnership with the National Center for Ecological Analysis and Synthesis. Last revision: October 3, 2022\n\n\nAbstract\nAs environmental data scientists, we spend a lot of time in RStudio. Taking some time to learn how you can customize your RStudio IDE (Integrated Development Environment) and the keyboard shortcuts used to navigate around that IDE can make you a more efficient (and happier) hacker!"
  },
  {
    "objectID": "talks_workshops/2022-10-10-customizing-quarto-websites/index.html",
    "href": "talks_workshops/2022-10-10-customizing-quarto-websites/index.html",
    "title": "Customizing Quarto Websites",
    "section": "",
    "text": "slides\n\n\n source code\n\n\n\n\nOverview\nThis workshop was originally developed for the Master of Environmental Data Science (MEDS) program, administered by the Bren School of Environmental Science & Management in partnership with the National Center for Ecological Analysis and Synthesis.\n\n\nAbstract\nQuarto provides a user-friendly framework for creating your personal website – but adding your own creative touch can help make yours stand out from the rest. In this workshop, we learn how to (a) add a template to our landing page and update the _quarto.yml file to quickly add fun features/update the overall layout of our website, (b) create a stylesheet and define Sass variables to start modifying the overall theme (colors, fonts, etc) of our site, and (c) define CSS rules to make fine-tuned adjustments to our site’s appearance."
  },
  {
    "objectID": "talks_workshops/2023-04-14-functions-forloops/index.html",
    "href": "talks_workshops/2023-04-14-functions-forloops/index.html",
    "title": "An iterative approach to streamlining analytical workflows using functions and for loops",
    "section": "",
    "text": "Art by An Bui\n\n\n\n\n\n\n\n\n instructional documentation\n\n\n source code\n\n\n\n\nOverview\nThis workshop was originally developed for the Master of Environmental Data Science (MEDS) program, administered by the Bren School of Environmental Science & Management in partnership with the National Center for Ecological Analysis and Synthesis.\n\n\nAbstract\nAs your data processing and analyses get longer and more complex, the chances that you’ll benefit from writing functions and/or for loops will also increase. However, whether you’re a new learner or seasoned programmer, it can sometimes feel overwhelming to know exactly where to start – especially when you have an end goal that builds additional complexity/flexibility into your functions and for loops. Taking an iterative approach to building out your code can help make this process clearer, less daunting, and more fun. In this workshop, we’ll use one case study to practice breaking down the function and for loop writing process into manageable, bite-sized steps."
  },
  {
    "objectID": "talks_workshops/2023-01-20-eds430-intro-to-shiny/index.html",
    "href": "talks_workshops/2023-01-20-eds430-intro-to-shiny/index.html",
    "title": "EDS 430 - Intro to Shiny",
    "section": "",
    "text": "slides\n\n\n source code\n\n\n\n\nOverview\nThis workshop was originally developed for the Master of Environmental Data Science (MEDS) program, administered by the Bren School of Environmental Science & Management in partnership with the National Center for Ecological Analysis and Synthesis.\n\n\nAbstract\nThese materials accompany the 1-unit, 2-day, hands-on coding workshop, EDS 430 - Intro to Shiny, offered in winter 2023 through the Bren School of Environmental Science & Management, in partnership with the National Center for Ecological Analysis & Synthesis.\nIn this workshop, students will learn how to build and deploy Shiny applications. The {shiny} package provides a framework that allows R users to build interactive web applications and dashboards, and has become a popular tool for sharing data analyses and data-derived outputs with broad audiences. In this two-part short course, students will learn the fundamentals of reactivity, how to customize an application user interface (UI), best practices and workflows for developing shiny apps, how to deploy their apps online via RStudio’s hosting service, shinyapps.io, and more.\nPresentation slides are available here and are meant to be a stand-alone resource for those who were unable to attend the workshop, but would like to follow along/self-learn. The workshop walks through building a number of shiny apps and dashboards – find complete versions of each in this GitHub repository."
  },
  {
    "objectID": "talks_workshops/2021-10-11-teach-me-how-to-google/index.html",
    "href": "talks_workshops/2021-10-11-teach-me-how-to-google/index.html",
    "title": "Teach Me How to Google",
    "section": "",
    "text": "slides\n\n\n source code\n\n\n\n recording\n\n\n\n\nOverview\nThis talk was originally developed for the Master of Environmental Data Science (MEDS) program, administered by the Bren School of Environmental Science & Management in partnership with the National Center for Ecological Analysis and Synthesis.\nIt’s since been given to students from UCSB’s Master of Technology Management Program (Jan 2022), R-Ladies St. Louis (Feb 2022), The Brown School StatLab at the University of Washington in St. Louis (Mar 2022), undergraduate students in UCSB’s Environmental Studies Program (Nov 2022), and UCSB’s Data Analysis and Coding Club (DAnC) (May 2023).\n\n\nAbstract\nGoogling for code help is something that all data scientists (at all career stages) do. But figuring out how to get the information you need back can be incredibly challenging, particularly for new coders. In this workshop, we’ll discuss strategies for refining your queries to increase your chances of finding informative solutions.\n\n\nAdditional versions\nI’ve given this talk to a number of different (non-MEDS) audiences. Most times, the slides remain unchanged (aside from an updated title slide), but there are minor differences here and there depending on audience needs/experiences. Find all additional talk versions here!"
  },
  {
    "objectID": "talks_workshops/2019-05-15-intro-to-the-tidyverse/index.html",
    "href": "talks_workshops/2019-05-15-intro-to-the-tidyverse/index.html",
    "title": "Intro to the {tidyverse}",
    "section": "",
    "text": "An Bui and I getting ready to teach our very first R workshop to R-Ladies SB, hosted at NCEAS\n\n\n\n\n\n\n\n\n instructional documentation\n\n\n source code\n\n\n\n\n\nOverview\nMy very first time (co)leading an R-based live-coding workshop(!) and the experience that got me hooked on teaching RStats/data science 💜, given to R-Ladies Santa Barbara.\n\n\nAbstract\nIn this live-coding workshop, we teach useful functions for data tidying, wrangling and visualization using tidyverse packages & functions (e.g. dplyr, tidyr, ggplot2, forcats, etc.). This session is intended for R users at any level, whether it’s your first time exploring the tidyverse or if you’re refreshing your wrangling skills!"
  },
  {
    "objectID": "talks_workshops/2023-05-23-js-in-r/index.html",
    "href": "talks_workshops/2023-05-23-js-in-r/index.html",
    "title": "Integrating JavaScript Libraries into R for Dynamic Visualizations",
    "section": "",
    "text": "An interactive map made with the {leaflet} R package.\n\n\n\n\n\n instructional documentation\n\n\n source code\n\n\n\n\nOverview\nThis workshop was developed for and taught during the SORTEE Workshops and Webinar series.\n\n\nAbstract\nJavaScript, a programming language used to create dynamic web page content, is becoming an increasingly popular data science tool for building interactive data visualizations. However, learning an entirely new programming language can be time prohibitive and unrealistic for many researchers. Lucky for R users, there’s an app (well, R packages) for that!\nIn this hands-on live-coding workshop, we’ll explore the {DT}, {plotly}, and {leaflet} packages, which make JavaScript libraries more accessible for R-users looking to infuse their static visualizations with interactivity. Together, we’ll build an interactive table, plot, and map, and demonstrate how these outputs can be shared using open data science communication tools, like RMarkdown and Quarto."
  },
  {
    "objectID": "talks_workshops/2022-04-18-intro-to-cloud-computing/index.html",
    "href": "talks_workshops/2022-04-18-intro-to-cloud-computing/index.html",
    "title": "An Intro to Cloud Computing",
    "section": "",
    "text": "slides\n\n\n source code\n\n\n\n\nOverview\nThis workshop was originally developed for the Master of Environmental Data Science (MEDS) program, administered by the Bren School of Environmental Science & Management in partnership with the National Center for Ecological Analysis and Synthesis.\n\n\nAbstract\n“The Cloud” is a buzzword we often hear, but maybe don’t quite understand. In this workshop, we’ll learn a bit about what cloud computing means and what it can look like, how to launch a virtual machine (i.e. an instance) using Amazon Web Services (AWS), and how we can leverage more powerful computers (e.g. the cloud) to run computationally-intensive processes in less time."
  },
  {
    "objectID": "talks_workshops/2023-03-16-ggplot2/index.html",
    "href": "talks_workshops/2023-03-16-ggplot2/index.html",
    "title": "One workflow for building effective (and pretty) {ggplot2} data visualizations",
    "section": "",
    "text": "Art by Allison Horst: A fuzzy monster in a beret and scarf, critiquing their own column graph on a canvas in front of them while other assistant monsters (also in berets) carry over boxes full of elements that can be used to customize a graph (like themes and geometric shapes). In the background is a wall with framed data visualizations. Stylized text reads ‘ggplot2: build a data masterpiece.’\n\n\n\n\n\n\n\n instructional documentation\n\n\n source code\n\n\n\n\n\n\nOverview\nThis workshop was originally developed for the Master of Environmental Data Science (MEDS) program, administered by the Bren School of Environmental Science & Management in partnership with the National Center for Ecological Analysis and Synthesis.\n\n\nAbstract\n{ggplot2} has, in many ways, become the de facto tool for data visualization in R. And with the many extension packages available, there’s hardly a limit to what you can create. Building effective and visually-pleasing data visualizations is a skill that gets easier with practice, and following a somewhat structured workflow – at least at the start – can help you get there faster. This workshop covers one approach for doing so, though you’ll find what works best for you with time."
  },
  {
    "objectID": "talks_workshops.html",
    "href": "talks_workshops.html",
    "title": "talks & workshops",
    "section": "",
    "text": "Integrating JavaScript Libraries into R for Dynamic Visualizations\n\n\n\nSORTEE\n\n\nR\n\n\nJavaScript\n\n\ndata visualization\n\n\n\na live-coding workshop on building interactive data visualizations, given as part of the SORTEE webinar series\n\n\n\nSamantha Csik, An Bui\n\n\n23 mai 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn iterative approach to streamlining analytical workflows using functions and for loops\n\n\n\nMEDS\n\n\nR\n\n\nfunctions\n\n\nfor loops\n\n\n\na workshop with the goal of making function and for loop writing less daunting\n\n\n\nSamantha Csik\n\n\n14 avr. 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOne workflow for building effective (and pretty) {ggplot2} data visualizations\n\n\n\nMEDS\n\n\nR\n\n\nggplot2\n\n\ndata visualization\n\n\n\na workshop on iteratively building ggplots\n\n\n\nSamantha Csik\n\n\n16 mars 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEDS 430 - Intro to Shiny\n\n\n\nMEDS\n\n\nR\n\n\nshiny\n\n\n\na 2-day hands-on coding workshop on building shiny apps & dashboards\n\n\n\nSamantha Csik\n\n\n20 janv. 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdding a blog to your existing Quarto website\n\n\n\nMEDS\n\n\nQuarto\n\n\nblogging\n\n\n\ngot a Quarto website, but no blog? we can fix that!\n\n\n\nSamantha Csik\n\n\n24 oct. 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustomizing Quarto Websites\n\n\n\nMEDS\n\n\nR\n\n\nQuarto\n\n\nCSS\n\n\n\nmake your website stand out using Sass & CSS\n\n\n\nSamantha Csik\n\n\n10 oct. 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreating your personal website using Quarto\n\n\n\nMEDS\n\n\nR\n\n\nQuarto\n\n\n\nstep-by-step instructions for building, deploying, and customizing a Quarto website\n\n\n\nSamantha Csik\n\n\n5 août 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn Intro to Cloud Computing\n\n\n\nMEDS\n\n\nAWS\n\n\n\nan interactive workshop on how to launch an Amazon EC2 instance\n\n\n\nSamantha Csik\n\n\n18 avr. 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRStudio Tips & Tricks\n\n\n\nMEDS\n\n\nR\n\n\n\na talk on RStudio IDE tips & tricks and other keyboard shortcuts\n\n\n\nSamantha Csik\n\n\n15 nov. 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTeach Me How to Google\n\n\n\nMEDS\n\n\n\na talk on how to troubleshoot code and Google for helpful answers\n\n\n\nSamantha Csik\n\n\n11 oct. 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntro to the {tidyverse}\n\n\n\nR-Ladies\n\n\n\na code-along workshop to learn data wrangling and visualization techniques using {tidyverse} functions\n\n\n\nSamantha Csik, An Bui\n\n\n15 mai 2019\n\n\n\n\n\n\n\n\nAucun article correspondant"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RomuAnalyst",
    "section": "",
    "text": "Vous recherchez des cours particuliers ?N’hésitez pas à me contacter\n\n\n Prendre rdv\n\n\n\n\n\n\n\n\nSite web réalisé à partir de Quarto\n\n\nQuarto\n\n\n\n\n\n\n\n\nVous voulez en savoir plus sur moi? Voici un bref résumé\n\n\nBio\n\n\n\n\n\n\n\n\n2 derniers articles :\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitre\n\n\nSous-titre\n\n\n\n\n\n\n27/10/23\n\n\nLignes de métro parisien\n\n\nLignes de métro passant par une station\n\n\n\n\n12/07/23\n\n\nScraping et base Excel\n\n\nCollecte de données web et création de fichiers excel\n\n\n\n\n\nAucun article correspondant"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "about",
    "section": "",
    "text": "I’m the Data Training Coordinator at the National Center for Ecological Analysis & Synthesis (NCEAS) located at UC Santa Barbara, where I’m working to develop and teach data science training curricula for the Master of Environmental Data Science (MEDS) program and other data science initiatives across NCEAS and UCSB. I am also a co-organizer of R-Ladies Santa Barbara, a local data science group which works to promote gender diversity in the R community.\nMy background is in marine ecology / ecophysiology – I was afforded opportunities to study coral disease in Panama and the Florida Keys as an undergrad, then temperature effects on spiny lobster metabolism and foraging behavior in Santa Barbara for my Masters degree. Since the beginning of my time in STEM, I was totally terrified of all things data/coding/data science, but thanks to a super supportive community and some really rad colleagues/instructors, I found my new path in data science education and I absolutely love it.\n\n\n\n\n\n\n\n\nTeaching MEDS students how to build their own personal websites using Quarto! This was especially fun for me, since Quarto was still such a new tool when I first gave this workshop – it meant a lot of discovery and learning on-the-fly alongside our students.\n\nI’m afforded a lot of flexibility in how I teach and what I teach. My focus is on developing and delivering workshop-style classes that supplement the MEDS core curriculum. I teach primarily via live-coding (where my computer is hooked up to a screen for workshop participants to see and hear me talk through code in real time as they follow along on their own computers) – this teaching style was invaluable in my own development as a data scientist, and I really believe that, when done well, live-coding can be a game-changing experience for early-career coders and data scientists. I am always looking for new ways to make my teaching style and materials more approachable and inclusive for all learners – I try to build my materials to be stand-alone resources both for participants to refer back to and also for those learning on their own time."
  },
  {
    "objectID": "about.html#fa-chalkboard-teacher-titlea-teacher-at-a-chalkboard-the-profession",
    "href": "about.html#fa-chalkboard-teacher-titlea-teacher-at-a-chalkboard-the-profession",
    "title": "about",
    "section": "",
    "text": "I’m the Data Training Coordinator at the National Center for Ecological Analysis & Synthesis (NCEAS) located at UC Santa Barbara, where I’m working to develop and teach data science training curricula for the Master of Environmental Data Science (MEDS) program and other data science initiatives across NCEAS and UCSB. I am also a co-organizer of R-Ladies Santa Barbara, a local data science group which works to promote gender diversity in the R community.\nMy background is in marine ecology / ecophysiology – I was afforded opportunities to study coral disease in Panama and the Florida Keys as an undergrad, then temperature effects on spiny lobster metabolism and foraging behavior in Santa Barbara for my Masters degree. Since the beginning of my time in STEM, I was totally terrified of all things data/coding/data science, but thanks to a super supportive community and some really rad colleagues/instructors, I found my new path in data science education and I absolutely love it.\n\n\n\n\n\n\n\n\nTeaching MEDS students how to build their own personal websites using Quarto! This was especially fun for me, since Quarto was still such a new tool when I first gave this workshop – it meant a lot of discovery and learning on-the-fly alongside our students.\n\nI’m afforded a lot of flexibility in how I teach and what I teach. My focus is on developing and delivering workshop-style classes that supplement the MEDS core curriculum. I teach primarily via live-coding (where my computer is hooked up to a screen for workshop participants to see and hear me talk through code in real time as they follow along on their own computers) – this teaching style was invaluable in my own development as a data scientist, and I really believe that, when done well, live-coding can be a game-changing experience for early-career coders and data scientists. I am always looking for new ways to make my teaching style and materials more approachable and inclusive for all learners – I try to build my materials to be stand-alone resources both for participants to refer back to and also for those learning on their own time."
  },
  {
    "objectID": "about.html#fa-hiking-titlea-person-with-a-backpack-and-trekking-pole-the-hobby",
    "href": "about.html#fa-hiking-titlea-person-with-a-backpack-and-trekking-pole-the-hobby",
    "title": "about",
    "section": " the hobby",
    "text": "the hobby\nI feel very fortunate to be doing so many of things that I love a lot right now. That includes my job, but also spending lots of time outdoors. Living in Santa Barbara is a massive privilege and being here means that we have access to both the mountains and the sea, each a few minutes in either direction. It was the ocean that brought me here originally, but most of my free time is now spent on the trails.\n\n\n\n\n\n\n\n\nMy right-hand hiking gal, Tallie (aka Bean aka TunaB aka SweetCheeks).\n\nI started recording my hikes (and eventually some other activities) on Strava in late 2020 and finally got around to retrieving my activity data using the {rStrava} package. Below is a heatmap of all my recorded activities made using leaflet. It’s challenging to see individual markers at my most frequented trail heads/starting points, so I’ve recently began building out my own Strava Dashboard (using {shinydashboard}) to make it a bit more interactive and filterable – it’s a work in progress, but a fun side project that I’m excited to continue iterating upon. Huge shout out to Daniel Cullen (who also happens to be a Santa Barbara resident!) for his awesome blogpost that got me started with my own map.\n\n\nFeel free to check out my Strava dashboard, Sam’s Strava Stats (still working on a better name…)! Source code available on GitHub GitHub.\n\n\n\n \n \n\nMap last updated: June 19, 2023"
  },
  {
    "objectID": "about.html#fa-egg-titlean-egg-the-logo",
    "href": "about.html#fa-egg-titlean-egg-the-logo",
    "title": "about",
    "section": " the logo",
    "text": "the logo\nI’m a proud Csik (pronounced “chick” – Hungarian, for the curious), though I spent many of my younger years embarrassed when people (understandably) got it wrong (variations include “sea-sick,” “sick,” “ca-sick,” to name a few) – and many of us know how brutal little kid peers can be when there’s a funny way to mispronounce a name. At some point, I learned to embrace the weird and it became very much a part of my everyday identity. My track coaches and teammates would shout “LET’S GO CSIK” during my events at meets, I signed year books as “Sam [drawing of a chick]” and every handmade card received my “The Csik Press” identifying mark on the back. As I’ve grown older, I’ve taken more care to help colleagues, peers, and strangers learn the correct pronunciation – because if I’m being totally honest, I think my name is pretty darn cool Face Smile Wink. So my first ever real logo is an homage to my earliest attempts at claiming my Csik identity. It may evolve a bit, but for now, it makes me pretty happy. Made using the (free!) Adobe Express logo maker.\n\n\n\n\n\n\n\n\nThe back of a handmade birthday card by yours truly (aka ‘The Csik Press’). Thanks, Mom, for sending me pics of these decade+ old treasures whenever you come across them. Artist: Sam Csik. Medium: construction paper, Elmer’s glue. Date: 2010 (apparently)."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Les posts",
    "section": "",
    "text": "Vous trouverez ici une collection d’articles informatifs et intéressants axés sur l’analyse de données, la programmation et l’utilisation de . Que vous soyez un débutant cherchant à apprendre les bases de  ou un utilisateur expérimenté cherchant à approfondir vos connaissances et à découvrir de nouvelles techniques, cette partie est conçu pour vous. Les articles couvrent une large gamme de sujets, allant de l’analyse exploratoire des données à la visualisation des résultats, en passant par les meilleures pratiques pour le nettoyage et la préparation des données. Bonne lecture!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLignes de métro parisien\n\n\nLignes de métro passant par une station\n\n\n\nR\n\n\ncartographie\n\n\ntable\n\n\n\n\n27 oct. 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScraping et base Excel\n\n\nCollecte de données web et création de fichiers excel\n\n\n\nR\n\n\nWeb\n\n\nTables\n\n\n\n\n12 juil. 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShinylive Extension\n\n\nEmbed Shinylive applications in Quarto documents\n\n\n\nExtensions\n\n\nFeatures\n\n\n\n\n25 oct. 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto Extensions\n\n\nExtend Quarto with new capabilities\n\n\n\nExtensions\n\n\nFeatures\n\n\n\n\n25 juil. 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto at rstudio::conf(2022)\n\n\nQuarto-related workshops and talks at rstudio::conf(2022)\n\n\n\nconf\n\n\nworkshop\n\n\ntalk\n\n\n\n\n21 juin 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPositioning Content in the Margin\n\n\nCreate ‘Tufte’ style documents with sidenotes, margin tables and figures, and other margin content\n\n\n\nFeatures\n\n\nLayout\n\n\n\n\n17 févr. 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing Callouts\n\n\nUse callouts to draw attention to important complementary content without interupting the document flow\n\n\n\nFeatures\n\n\nAuthoring\n\n\n\n\n13 févr. 2022\n\n\n\n\n\n\n\n\nAucun article correspondant"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "resources",
    "section": "",
    "text": "It’s finally time for an upgraded notebook! I’ve been Slacking myself (and subsequently burying) links to resources for far too long, so my favorites will now live here."
  },
  {
    "objectID": "resources.html#fa-tools-titlea-wrench-and-a-screw-driver-r-tools",
    "href": "resources.html#fa-tools-titlea-wrench-and-a-screw-driver-r-tools",
    "title": "resources",
    "section": " r tools",
    "text": "r tools\n\nfree icons from fontawesome + the {fontawesome} R package for infusing your slides, website, RMarkdowns/Quarto Markdowns, and more with an extra splash of fun"
  },
  {
    "objectID": "resources.html#fa-chart-bar-titlea-bar-chart-data-viz",
    "href": "resources.html#fa-chart-bar-titlea-bar-chart-data-viz",
    "title": "resources",
    "section": " data viz",
    "text": "data viz\n\nfrom Data to Viz, a choose-your-adventure-type experience for creating your best data visualizations\nThe Sessions College Color Calculator, for creating color palettes\nBeautifully Annotated: Enhancing your ggplots with Text, by Cara Thompson, a seriously wonderful talk on using annotations in your ggplots"
  },
  {
    "objectID": "resources.html#fa-desktop-titlea-desktop-computer-screen-reporting-presentations",
    "href": "resources.html#fa-desktop-titlea-desktop-computer-screen-reporting-presentations",
    "title": "resources",
    "section": " reporting & presentations",
    "text": "reporting & presentations\n\nQuarto is all the rage these days (and by these days, I mean post-March 2022). Download and find some great tutorials here to get started\nMeet xaringan: Making slides in R Markdown, by Allison Hill\nSharing Your xaringan Slides, by Garrick Aden-Buie"
  },
  {
    "objectID": "resources.html#fa-book-open-titlean-open-book-learning-materials",
    "href": "resources.html#fa-book-open-titlean-open-book-learning-materials",
    "title": "resources",
    "section": " learning materials",
    "text": "learning materials\n\nEver feel like you need a pick-me-up while learning stats or a new R tool? Look no further than Allison Horst’s Data Science Illustrations, featuring the cutest and most educational fuzzy monsters you’ll ever see!\nMastering Shiny, by Hadley Wickham\nHappy Git and GitHub for the useR, by Jenny Bryan\nR for Data Science, by Hadley Wickham\nW3Schools, particularly for their HTML & CSS tutorials"
  },
  {
    "objectID": "resources.html#fa-users-titlethree-people-data-science-communities",
    "href": "resources.html#fa-users-titlethree-people-data-science-communities",
    "title": "resources",
    "section": " data science communities",
    "text": "data science communities\nWhile these groups are primarily based in SoCal/Santa Barbara, there are tons of awesome groups like these all over the world. Google around to see what’s near you!\n\nR-Ladies Santa Barbara and R-Ladies Global, which work to promote gender diversity in the R community\nEcoDataScience, an environmental data science study group at UCSB\n\nSouthern California R Users, an alliance of R user groups in Southern California\n\nSanta Barbara Women in STEM, while not specifically data science-focused, this group holds some really great career and networking events, panels, flash talks, and more"
  },
  {
    "objectID": "resources.html#fa-universal-access-titlethe-web-accessibility-symbol-which-is-a-person-with-outstretched-arms-inside-a-circle-web-accessibility",
    "href": "resources.html#fa-universal-access-titlethe-web-accessibility-symbol-which-is-a-person-with-outstretched-arms-inside-a-circle-web-accessibility",
    "title": "resources",
    "section": " web accessibility",
    "text": "web accessibility\n\nThe A11Y Project is a community-driven effort to make digital content more accessible. I still have a long way to go in making my own website WCAG compliant – the A11Y Project not only has a ton of great blog posts, but also WCAG compliance checklist that I will definitely be returning to over and over again.\nCoblis, a color blindness simulator – just upload a file and view your color palettes as they would appear under different types of color deficiencies"
  },
  {
    "objectID": "resources.html#fa-smile-titlea-smiling-face-misc.",
    "href": "resources.html#fa-smile-titlea-smiling-face-misc.",
    "title": "resources",
    "section": " misc.",
    "text": "misc.\n\nDiscover new music to jam out to while you hack at Every Noise at Once (HT: Jeanette Clark)"
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "test",
    "section": "",
    "text": "This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page.\n\n\nThis column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page.\n\n\nThis column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page. This column takes 1/3 of the page."
  },
  {
    "objectID": "posts.html#tous-les-documents",
    "href": "posts.html#tous-les-documents",
    "title": "Les posts",
    "section": "Tous les documents :",
    "text": "Tous les documents :"
  },
  {
    "objectID": "R et Posit.html",
    "href": "R et Posit.html",
    "title": "R et son environnement",
    "section": "",
    "text": "Le logiciel R est un langage dédié à la statistique. Il a été développé à partir des années 90 à l’University of Auckland, Nouvelle-Zélande. Son implémentation principale est en open source (gratuit et modifiable) R : cran.r-project.org.\nR est un langage interprété (comme Python) et non compilé, c’est-à-dire que les commandes tapées au clavier sont directement exécutées sans avoir besoin de construire un programme complet. On dit également qu’il est “exécuté à la volée”. Par exemple, on peut à partir d’une ligne de commande écrire :\n\n\nprint('Hello world!')\n\n[1] \"Hello world!\"\n\nPour simplifier son utilisation, il est possible d’écrire des scripts c’est à dire une suite de commandes qui se trouvent dans un fichier dont l’extension est .R mais on pourrait tout aussi bien les écrire dans un .txt.\nPour simplifier l’utilisation de R, il est nécessaire d’avoir une interface graphique (appelée aussi GUI pour Graphic User Interfaces). Celle offerte par R est très simpliste et beaucoup préfèrent utiliser RStudio (www.rstudio.com) à juste titre. Cet outil permet de réellement fluidifier le travail avec ce langage.\n\n\n\nLa fenêtre de RStudio se divise généralement en quatre sous-fenêtres. En partant de haut à gauche et en les parcourant dans le sens horaire on trouve :\n\nun éditeur de texte pour les scripts\nl’espace de travail ou d’historique de commandes\nle navigateur de fichiers, graphiques, packages, documentations\nla console R, c’est à dire la ligne de commande ainsi que les résultats des exécutions du code.\n\n\nTypiquement, on tape le code dans l’éditeur (1) puis on l’exécute. il se retrouve alors dans console. Pour cela on place le curseur dans la ligne qu’on veut exécuter et on envoie la commande à la console à l’aide de la combinaison ⌘ + ⏎ dans IOS et Ctrl + ⏎ sous Windows ou tout simplement à l’aide de la commande Run.\n\n\n\nR dispose d’une documentation très complète et l’aide en ligne peut être très utile pour l’utilisation de fonctions, librairies et jeux de données. On peut accéder directement à l’aide en tapant ? suivi par la fonction (ou autre instruction, jeu de données,…) sur laquelle on souhaite se renseigner :\n?mean\naffichera par exemple la page d’aide pour la fonction mean(). La commande\nhelp(mean)\naura le même effet.\nOn peut aussi trouver énormément d’informations sur le web : par exemple en cherchant à l’aide d’un moteur de recherche un problème lié à une tâche R on trouve presque toujours une réponse (souvent dans des forum ouverts sur le site Cross Validated).\nLe but de cette introduction tutorielle est de vous apprendre l’utilisation élémentaire de R. Bien que les objets et commandes de bases y soient introduits, cette introduction n’est pas une référence complète au langage R (loin de là!), vous serez donc amenés à utiliser l’aide et à chercher des informations sur le web. A chaque étape, vous êtes encouragés à taper les commandes et à en comprendre le résultat : la meilleur façon d’apprendre un langage est d’écrire et débugger beaucoup de lignes de code!\n\n\n\nL’une des premières utilisation est la création d’objets1, qui seront mis en mémoire pour l’utilisation dans de futur fonctions ou codes. Un objet peut être créé en utilisant “l’assignation”. Il s’agit d’assigner à un objet (lettre, mot, …) une valeur à l’aide d’une flèche (&lt;-) ou avec le signe =. Je préconise cependant d’utiliser l’assigantion par la “flèche”, cela permet d’avoir un code plus propre et de pouvoir différencier l’assignation et le code en lui même. Une fois l’objet créé nous pouvons afficher son contenu en tapant le nom de l’objet.1 Les objets sont en général des vecteurs, matrices, listes …, auxquels nous appliqueront des fonctions\nExemple :\n\n\nn &lt;- (20 + 10)/5       # création de n et assignation du résultat de l'opération\n\nn                      # appel de l'objet n pour affichage de sa valeur\n\n[1] 6\n\n\n\n\n\n\n\nAstuce\n\n\n\nLe chiffre 1 entre crochets indique qu’il s’agit du premier élément d’une série de n valeurs. Dans l’exemple précedent, la série comprend 1 valeur.\n\n\nLe nom d’un objet doit obligatoirement commencer par une lettre. Il peut être suivi de chiffres, de points, d’espace soulignés (_). De plus, le langage R fait la distinction entre les majuscules et les minuscules : n et N pourront servir à nommer/créer 2 objets distincts.\n\n\n\n\n\n\nImportant\n\n\n\nSi l’objet existe déja, sa valeur précédente est éffacée. C’est un annule et remplace.\n\n\n\n\n\nLes deux grands avantages de R est d’être gratuit et open source. De ce fait il jouit d’une communauté d’utilisateurs très active dans le monde scientifique (statistiques, science des données, bioinformatique, sciences sociales,…). Il est de plus très utilisé par la communauté scientifique et de plus en plus dans les entreprises.\nToute nouvelle méthode statistique a très rapidement une implémentation dans ce langage, ce qui n’est pas toujours le cas pour d’autres langages. Cela enrichi considérablement le logiciel et se fait à l’aide de ce qu’on appelle des paquets (ou packages ou library) Ces derniers sont développés par les utilisateurs et les développeurs. On peut les installer pour augmenter les capacités et possibilités du logiciel dans des domaines très variés de la statistique mais pas seulement en statistique. Il en existe un très grand nombre sur le site du CRAN : cran.r-project.org.\nPour installer un package:\ninstall.packages(\"dplyr\") # avec guillemets!\nUne fois un package installé, il faudra le charger en mémoire à chaque fois qu’une nouvelle session est ouverte:\nlibrary(dplyr) # sans guillemets!\nrequire(dplyr) # fonction équivalente\n\n\n\n\n\n\nAstuce\n\n\n\nLe # sert à commenter les instructions. Le texte/code situé après # (sur la même ligne) ne sera pas éxécuté, ce sera juste un commentaire.\n\n\n\n\n\nUne référence complète est l’introduction officielle sur le site du CRAN :\nhttps://cran.r-project.org/doc/manuals/R-intro.html"
  },
  {
    "objectID": "R et Posit.html#quest-ce-que-fa-brands-r-project",
    "href": "R et Posit.html#quest-ce-que-fa-brands-r-project",
    "title": "R et son environnement",
    "section": "",
    "text": "Le logiciel R est un langage dédié à la statistique. Il a été développé à partir des années 90 à l’University of Auckland, Nouvelle-Zélande. Son implémentation principale est en open source (gratuit et modifiable) R : cran.r-project.org.\nR est un langage interprété (comme Python) et non compilé, c’est-à-dire que les commandes tapées au clavier sont directement exécutées sans avoir besoin de construire un programme complet. On dit également qu’il est “exécuté à la volée”. Par exemple, on peut à partir d’une ligne de commande écrire :\n\n\nprint('Hello world!')\n\n[1] \"Hello world!\"\n\nPour simplifier son utilisation, il est possible d’écrire des scripts c’est à dire une suite de commandes qui se trouvent dans un fichier dont l’extension est .R mais on pourrait tout aussi bien les écrire dans un .txt.\nPour simplifier l’utilisation de R, il est nécessaire d’avoir une interface graphique (appelée aussi GUI pour Graphic User Interfaces). Celle offerte par R est très simpliste et beaucoup préfèrent utiliser RStudio (www.rstudio.com) à juste titre. Cet outil permet de réellement fluidifier le travail avec ce langage."
  },
  {
    "objectID": "R et Posit.html#prise-en-main-de-rstudio",
    "href": "R et Posit.html#prise-en-main-de-rstudio",
    "title": "R et son environnement",
    "section": "",
    "text": "La fenêtre de RStudio se divise généralement en quatre sous-fenêtres. En partant de haut à gauche et en les parcourant dans le sens horaire on trouve :\n\nun éditeur de texte pour les scripts\nl’espace de travail ou d’historique de commandes\nle navigateur de fichiers, graphiques, packages, documentations\nla console R, c’est à dire la ligne de commande ainsi que les résultats des exécutions du code.\n\n\nTypiquement, on tape le code dans l’éditeur (1) puis on l’exécute. il se retrouve alors dans console. Pour cela on place le curseur dans la ligne qu’on veut exécuter et on envoie la commande à la console à l’aide de la combinaison ⌘ + ⏎ dans IOS et Ctrl + ⏎ sous Windows ou tout simplement à l’aide de la commande Run."
  },
  {
    "objectID": "R et Posit.html#laide-en-ligne",
    "href": "R et Posit.html#laide-en-ligne",
    "title": "R et son environnement",
    "section": "",
    "text": "R dispose d’une documentation très complète et l’aide en ligne peut être très utile pour l’utilisation de fonctions, librairies et jeux de données. On peut accéder directement à l’aide en tapant ? suivi par la fonction (ou autre instruction, jeu de données,…) sur laquelle on souhaite se renseigner :\n?mean\naffichera par exemple la page d’aide pour la fonction mean(). La commande\nhelp(mean)\naura le même effet.\nOn peut aussi trouver énormément d’informations sur le web : par exemple en cherchant à l’aide d’un moteur de recherche un problème lié à une tâche R on trouve presque toujours une réponse (souvent dans des forum ouverts sur le site Cross Validated).\nLe but de cette introduction tutorielle est de vous apprendre l’utilisation élémentaire de R. Bien que les objets et commandes de bases y soient introduits, cette introduction n’est pas une référence complète au langage R (loin de là!), vous serez donc amenés à utiliser l’aide et à chercher des informations sur le web. A chaque étape, vous êtes encouragés à taper les commandes et à en comprendre le résultat : la meilleur façon d’apprendre un langage est d’écrire et débugger beaucoup de lignes de code!"
  },
  {
    "objectID": "R et Posit.html#utilisation-de-rrstudio",
    "href": "R et Posit.html#utilisation-de-rrstudio",
    "title": "R et son environnement",
    "section": "",
    "text": "L’une des premières utilisation est la création d’objets1, qui seront mis en mémoire pour l’utilisation dans de futur fonctions ou codes. Un objet peut être créé en utilisant “l’assignation”. Il s’agit d’assigner à un objet (lettre, mot, …) une valeur à l’aide d’une flèche (&lt;-) ou avec le signe =. Je préconise cependant d’utiliser l’assigantion par la “flèche”, cela permet d’avoir un code plus propre et de pouvoir différencier l’assignation et le code en lui même. Une fois l’objet créé nous pouvons afficher son contenu en tapant le nom de l’objet.1 Les objets sont en général des vecteurs, matrices, listes …, auxquels nous appliqueront des fonctions\nExemple :\n\n\nn &lt;- (20 + 10)/5       # création de n et assignation du résultat de l'opération\n\nn                      # appel de l'objet n pour affichage de sa valeur\n\n[1] 6\n\n\n\n\n\n\n\nAstuce\n\n\n\nLe chiffre 1 entre crochets indique qu’il s’agit du premier élément d’une série de n valeurs. Dans l’exemple précedent, la série comprend 1 valeur.\n\n\nLe nom d’un objet doit obligatoirement commencer par une lettre. Il peut être suivi de chiffres, de points, d’espace soulignés (_). De plus, le langage R fait la distinction entre les majuscules et les minuscules : n et N pourront servir à nommer/créer 2 objets distincts.\n\n\n\n\n\n\nImportant\n\n\n\nSi l’objet existe déja, sa valeur précédente est éffacée. C’est un annule et remplace."
  },
  {
    "objectID": "R et Posit.html#les-packages",
    "href": "R et Posit.html#les-packages",
    "title": "R et son environnement",
    "section": "",
    "text": "Les deux grands avantages de R est d’être gratuit et open source. De ce fait il jouit d’une communauté d’utilisateurs très active dans le monde scientifique (statistiques, science des données, bioinformatique, sciences sociales,…). Il est de plus très utilisé par la communauté scientifique et de plus en plus dans les entreprises.\nToute nouvelle méthode statistique a très rapidement une implémentation dans ce langage, ce qui n’est pas toujours le cas pour d’autres langages. Cela enrichi considérablement le logiciel et se fait à l’aide de ce qu’on appelle des paquets (ou packages ou library) Ces derniers sont développés par les utilisateurs et les développeurs. On peut les installer pour augmenter les capacités et possibilités du logiciel dans des domaines très variés de la statistique mais pas seulement en statistique. Il en existe un très grand nombre sur le site du CRAN : cran.r-project.org.\nPour installer un package:\ninstall.packages(\"dplyr\") # avec guillemets!\nUne fois un package installé, il faudra le charger en mémoire à chaque fois qu’une nouvelle session est ouverte:\nlibrary(dplyr) # sans guillemets!\nrequire(dplyr) # fonction équivalente\n\n\n\n\n\n\nAstuce\n\n\n\nLe # sert à commenter les instructions. Le texte/code situé après # (sur la même ligne) ne sera pas éxécuté, ce sera juste un commentaire."
  },
  {
    "objectID": "test2.html",
    "href": "test2.html",
    "title": "ggplot2, créer et superposer des graphiques",
    "section": "",
    "text": "ggplot2, créer et superposer des graphiques\n\n\n\n\n\n\n\n\nShortcode\nIcon\n\n\n\n\n{{&lt; fa thumbs-up &gt;}}\n\n\n\n{{&lt; fa folder &gt;}}\n\n\n\n{{&lt; fa chess-pawn &gt;}}\n\n\n\n{{&lt; fa brands bluetooth &gt;}}\n\n\n\n{{&lt; fa brands twitter size=2xl &gt;}} (HTML only)\n\n\n\n{{&lt; fa brands github size=5x &gt;}} (HTML only)\n\n\n\n{{&lt; fa battery-half size=Huge &gt;}}\n\n\n\n{{&lt; fa envelope title=\"An envelope\" &gt;}}\n\n\n\n\nLe but de la visualisation de données étant de représenter graphiquement des données brutes (ou quasi-brutes), il est souvent nécessaire de prendre en compte plusieurs variables. Nous devons donc aller plus loin que les graphiques de base (nuage de points, droite de regression, boite à moustache, diagramme en barres ou circulaires, …), pour les combiner par exemple.\nAvec le langage de base (package graphics notamment), il est possible de faire des graphiques évolués, mais avec beaucoup de paramétrages à la main. Pour cela on va commencer par s’intéresser au jeu de données mtcars.\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\n# ?mtcars ou help(mtcars)\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\nplot(mtcars$hp,mtcars$mpg)\n\n\n\n\nEssayons d’améliorer ce graphique… Ci dessous, un exemple de graphique avancé, représentant 4 variables (trois quantitatives et une qualitative), ainsi qu’une explication succincte des différentes fonctions utilisées, et quelques paramètres de celles-ci.\npar(family = \"serif\", mar = c(5, 4, 2, 0)+.1)\ncouleurs_am = brewer.pal(3, \"Dark2\")\nplot(mpg ~ hp, \n     data = mtcars,\n     pch = 19,\n     cex = wt/3,\n     col = couleurs_am[mtcars$am+1],\n     main = \"Consommation en fonction de la Puissance\",\n     sub = \"Source : 1974 Motor Trend US magazine\", font.sub = 3, cex.sub = .8,\n     xlab = \"Puissance (en ch)\",\n     ylab = \"Consommation en Miles/Galon\",\n     bty = \"n\", axes = FALSE)\naxis(1, lwd = 0, lwd.ticks = .5)\nat.y = axis(2, lwd = 0, lwd.ticks = .5, labels = FALSE)\ntext(y = at.y, x = 35, labels = at.y, srt = 0, pos = 2, xpd = TRUE)\nl1 = legend(\"topright\", legend = c(\"Automatique\", \"Manuelle\"), \n       col = couleurs_am, bty = \"n\", cex = .8, pch = 19,\n       text.width = 50, text.col = couleurs_am, \n       title = \"Boite de vitesse\", title.col = \"black\")\nlegend(l1$rect$left, l1$rect$top-l1$rect$h-1, \n       legend = range(mtcars$wt), title = \"Poids  (1000 lbs)\",\n       pch = 19, pt.cex = range(mtcars$wt)/3, bty = \"n\", cex = .8, col = gray(.5),\n       text.width = 50, adj = -.25)\noutliers_hp = subset(mtcars, subset = hp &gt; 250)\ntext(outliers_hp$hp, outliers_hp$mpg, row.names(outliers_hp), pos = c(3, 2), cex = .8, font = 4)\noutliers_mpg = subset(mtcars, subset = mpg &gt; 30)\ntext(outliers_mpg$hp, outliers_mpg$mpg, row.names(outliers_mpg), pos = 4, cex = .8, font = 4)\n\n\n\n\n\nLa fonction par() permet de modifier les paramètres graphiques, tel que :\n\nmar pour les marges (un vecteur numérique de taille 4 qui permet de définir les tailles des marges dans l’ordre suivant : bas, gauche, haut, droite. Par défaut il vaut c(5.1, 4.1, 4.1, 2.1) )\nfamily pour la famille de police d’écriture\ncertains paramètres ci-après sont définissables globalement dans la fonction par(), ou localement dans les fonctions suivantes\n\nLes paramètres de la fonction plot()\n\npch : symbole utilisé pour chaque point (ici 19 indique un rond plein)\ncex : taille du point (ici en fonction de la variable wt)\ncol : couleur des points (ici en fonction de la variable am)\nmain, sub, xlab, ylab : resp. titre, sous-titre, intitulé en abscisse et intitulé en ordonnée\n*.sub : indication spécifique pour le sous-titre\nbty : type de la boite (ici n veut dire rien autour du graphique)\naxes : présence ou non des axes (non ici)\n\nLa fonction axis() qui permet d’ajouter un axe (1 : en abscisse, et 2 : en ordonnée)\n\nsi rien d’indiqué pour at, utilisation des ticks par défaut\nlwd : largeur de la ligne (ici non-présente)\nlwd.ticks : largeur des ticks (assez fine ici)\nrenvoie les valeurs des ticks\n\nLa fonction text() permet d’écrire du texte sur le graphique\n\nle x = 35 est choisi par expérience\nsrt : angle du texte\npos : ajustement du texte par rapport aux coordonnées indiquées\nxpd : permet d’écrire en dehors du graphique (dans les marges donc)\n\nLa fonction legend() permet d’ajouter une légende\n\nposition : soit \\((x,y)\\), soit chaine spécifique\nlegend : texte des items\ncol, bty, cex, pch : identique à précédemment\ntext.width et text.col : largeur du texte des items et couleur(s)\ntitle et title.col : titre de la légende (et couleur du titre)\nrenvoie une liste avec deux objets (rect qui contient des infos sur le rectangle occupé par la légende dans le graphique et text qui contient les coordonnées du texte des items)\npt.cex : taille des symboles\nadj: ajustement du texte\n\n\nL’utilisateur souhaite réaliser des graphiques (nuages de points, histogrammes, densité…) et les personnaliser (légendes, titres, échelles…).\nIl est recommandé d’utiliser le package ggplot2 qui permet de réaliser et de personnaliser un grand nombre de représentations graphiques; Il est conseillé aux utilisateurs débutants d’utiliser l’add-in esquisse pour se familiariser avec ggplot2.\nVous pouvez également accéder à esquisse en exécutant le code suivant:\nlibrary(esquisse)\nesquisser()\nL’objectif du package ggplot2 est de fournir une approche unique pour produire quasiment toute représentation graphique de données. Ce package propose un grand nombre de fonctions permettant de personnaliser finement les représentations graphiques. Cette fiche n’est donc qu’une introduction succincte à ggplot2. Pour des formations plus détaillées, se référer à {#ggplot2Ressources}.\n\nIntroduction\nLa fonction essentielle de ggplot2 est ggplot(). Il faut définir quatre éléments pour construire un graphique avec ggplot():\n\nla table de données ;\nle mapping : on définit dans l’aesthetic (ou aes) le lien entre les variables des données et ce que l’on veut représenter sur le graphique (quelle variable sur l’axe x, sur l’axe y, quelle variable pour définir une graduation de couleurs…) ;\nla forme géométrique ou geometry  : on définit la représentation graphique qu’on souhaite utiliser. Les géométries ont toutes un nom qui commence par geom_; par exemple, il faut utiliser la géométrie geom_point() pour réaliser un nuage de points;\nles paramètres : on définit les autres paramètres qui dépendent de constantes (par exemple : je veux que toutes mes lignes soient rouges ou de taille 2 pixels).\n\nLa construction d’un graphique repose sur le principe de couches successives. Les différentes couches graphiques se superposent et s’enchaînent grâce à l’opérateur +, comme un pipe. Il est possible d’aller à la ligne dans une instruction ggplot(), il suffit que l’opérateur + figure à la fin de la ligne.\nVoici un exemple de code qui crée un nuage de points (géométrie geom_point()) à partir des données mes_donnees, avec les variables variable1 en abscisse et variable2 en ordonnée:\n\n\nSe mettre d’accord sur la trame qui sera le squelette du rapport\n\nlibrary(ggplot2)\nggplot(data = iris) + \n  geom_point(mapping = aes(x = iris$Sepal.Length, y = iris$Sepal.Width))\n## Warning: Use of `iris$Sepal.Length` is discouraged. Use `Sepal.Length` instead.\n## Warning: Use of `iris$Sepal.Width` is discouraged. Use `Sepal.Width` instead.\n\n\nlibrary(ggplot2)\nggplot(data = iris) + \n  geom_point(mapping = aes(x = iris$Sepal.Length, y = iris$Sepal.Width))\n\n\nLe mapping et l’utilisation d’aes()\nLe mapping désigne dans ggplot2 la relation entre un attribut graphique de la geometry (abscisse, ordonnée, couleur…) et une variable présente dans la table de données. On déclare le mapping grâce à la fonction aes() (pour aesthetic), qui sert donc à identifier les variables que l’on souhaite représenter sur le graphique.\nLes arguments fondamentaux de aes() sont les variables représentées sur l’axe des abscisses et l’axe des ordonnées (x et y). Par exemple, on écrit aes(x = niveau_vie_median, y = taux_chomage) si l’on souhaite représenter pour chaque iris le taux de chômage (sur l’axe y) en fonction du niveau de vie médian (sur l’axe x).\nPar ailleurs, la fonction aes() admet d’autres arguments qui permettent de modifier l’apparence des attributs graphiques selon une troisième variable du jeu de données. Voici les arguments supplémentaires les plus courants:\n\n\n\nAttribut\nDescription\n\n\n\n\ncolor\nCouleur des lignes ou des points\n\n\nshape\nForme des points\n\n\nsize\nTaille des points\n\n\nalpha\nTransparence des points\n\n\nfill\nCouleur des surfaces\n\n\nlinetype\nType de ligne (continue, pointillée, …)\n\n\n\nDans l’exemple qui suit, on représente pour chaque iris le taux de chômage (sur l’axe y) en fonction du niveau de vie médian (sur l’axe x), en colorant les points en fonction de la part des cadres et professions intellectuelles supérieures parmi les actifs de l’iris (color = part_cadres).\nIl est également possible d’utiliser ces mêmes arguments pour modifier un attribut graphique sans le lier à une variable. En ce cas, on définit l’attribut à l’extérieur de l’aesthetic (donc à l’extérieur de aes()). Voici l’exemple précédent, modifié pour que tous les points soient (rouge), et non en fonction d’une variable. L’argument color est donc à l’extérieur de aes().\n\nLa notion de mapping et la définition des attributs graphiques à l’intérieur et à l’extérieur d’aes() sont une des principales difficultés de ggplot2. Il est normal de tâtonner lorsqu’on commence à les utiliser. Pour s’y retrouver, il suffit de suivre la règle suivante. Si on établit un lien entre les valeurs d’une variable et un attribut graphique, il s’agit d’un mapping qui doit être défini à l’intérieur de la fonction aes(). Dans le cas contraire, il s’agit d’un simple paramètre du graphique, qui doit être défini à l’extérieur de la fonction aes().\n\n\n\nLes formes géométriques\nLa forme géométrique ou geometry désigne le type de représentation graphique utilisée (nuage de points, histogrammes…). On spécifie le type de représentation que l’on souhait en utilisant une fonction dont le nom commence par geom_. Le tableau ci-dessous présente quelques représentations graphiques classiques.\n\n\n\n\n\n\n\n\ngeometry\nDescription\nArguments\n\n\n\n\ngeom_point()\nNuage de points\nx, y, shape, fill, size\n\n\ngeom_line()\nLigne\nx, y, linetype\n\n\ngeom_bar()\nDiagramme en barres\nx, fill, linetype, weight\n\n\ngeom_histogram()\nHistogramme\nx, fill, linetype, weight\n\n\ngeom_boxplot()\nBoîte à moustaches\nx, y, fill, weight\n\n\ngeom_density()\nCourbe de densité\nx, y, fill, color, linetype\n\n\n\nVoici deux exemples d’utilisation.\n\nIl existe un grand nombre de géométries dans ggplot2. Vous pouvez en afficher la liste en exécutant la commande help.search(\"^geom_\", package = \"ggplot2\").\nPar ailleurs, de très nombreux packages proposent encore d’autres géométries pour réaliser des représentations graphiques particulières (cartes avec ggmap, arbres généalogiques avec ggtree et ggenealogy, résultats d’élections avec ggparliament…)."
  },
  {
    "objectID": "ia2.html",
    "href": "ia2.html",
    "title": "Les boucles dans R : Comprendre et utiliser la puissance des boucles",
    "section": "",
    "text": "Il existe principalement deux types de boucles en R : la boucle “for” et la boucle “while”. Explorons-les plus en détail."
  },
  {
    "objectID": "ia2.html#boucle-for",
    "href": "ia2.html#boucle-for",
    "title": "Les boucles dans R : Comprendre et utiliser la puissance des boucles",
    "section": "Boucle “for”",
    "text": "Boucle “for”\nLa boucle “for” est utilisée lorsque vous connaissez à l’avance le nombre de répétitions que vous souhaitez effectuer. La syntaxe générale de la boucle “for” en R est la suivante :\nfor (variable in sequence) {\n  # Instructions à exécuter\n}\nExplorons cela avec un exemple simple. Supposons que nous voulions afficher les nombres de 1 à 5 à l’aide d’une boucle “for”. Voici comment nous pouvons le faire en R :\n\nfor (i in 1:5) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\nDans cette boucle, nous utilisons la variable “i” pour parcourir la séquence de nombres de 1 à 5 à l’aide de l’expression “1:5”. À chaque itération de la boucle, la valeur de “i” est mise à jour pour correspondre au nombre actuel de la séquence. À l’intérieur du bloc de la boucle, nous utilisons la fonction “print()” pour afficher la valeur de “i”. Ainsi, les nombres de 1 à 5 seront affichés à l’écran.\nVous pouvez également utiliser la fonction “seq()” pour créer une séquence personnalisée à utiliser dans une boucle “for”. Par exemple, si vous souhaitez afficher les nombres de 0 à 10 avec un pas de 2, vous pouvez utiliser la syntaxe suivante :\n\nfor (i in seq(0, 10, 2)) {\n  print(i)\n}\n\n[1] 0\n[1] 2\n[1] 4\n[1] 6\n[1] 8\n[1] 10\n\n\nDans cet exemple, la fonction “seq(0, 10, 2)” génère une séquence de nombres commençant par 0, se terminant par 10, et avec un pas de 2. Les nombres 0, 2, 4, 6, 8 et 10 seront affichés à l’écran."
  },
  {
    "objectID": "ia2.html#boucle-while",
    "href": "ia2.html#boucle-while",
    "title": "Les boucles dans R : Comprendre et utiliser la puissance des boucles",
    "section": "Boucle “while”",
    "text": "Boucle “while”\nLa boucle “while” est utilisée lorsque vous ne connaissez pas à l’avance le nombre de répétitions que vous souhaitez effectuer. La boucle continuera à s’exécuter tant que la condition spécifiée est vraie. La syntaxe générale de la boucle “while” en R est la suivante :\nwhile (condition) {\n  # Instructions à exécuter\n}\nExplorons cela avec un exemple simple. Supposons que nous voulions afficher les nombres de 1 à 5 à l’aide d’une boucle “while”. Voici comment nous pouvons le faire en R :\n\ni &lt;- 1\nwhile (i &lt;= 5) {\n  print(i)\n  i &lt;- i + 1\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\nDans cette boucle, nous utilisons une variable “i” pour garder une trace du nombre actuel que nous souhaitons afficher. La boucle continue à s’exécuter tant que “i” est inférieur ou égal à 5. À chaque itération, nous affichons la valeur de “i” à l’aide de la fonction “print()”, puis nous augmentons la valeur de “i” de 1 à l’aide de l’expression “i &lt;- i + 1”. Ainsi, les nombres de 1 à 5 seront affichés à l’écran.\nIl est important de s’assurer que la condition dans une boucle “while” finira par devenir fausse à un moment donné, sinon la boucle s’exécutera indéfiniment, entraînant une boucle infinie."
  },
  {
    "objectID": "ia2.html#contrôle-de-boucle",
    "href": "ia2.html#contrôle-de-boucle",
    "title": "Les boucles dans R : Comprendre et utiliser la puissance des boucles",
    "section": "Contrôle de boucle",
    "text": "Contrôle de boucle\nDans les boucles en R, vous pouvez utiliser des instructions spéciales pour contrôler le flux d’exécution à l’intérieur de la boucle. Voici quelques-unes des instructions couramment utilisées :\n\nL’instruction “break” est utilisée pour arrêter immédiatement l’exécution de la boucle et sortir de celle-ci.\nL’instruction “next” est utilisée pour passer à l’itération suivante de la boucle, en ignorant les instructions restantes dans le bloc de la boucle pour cette itération spécifique.\nL’instruction “return” est utilisée pour renvoyer une valeur et sortir de la fonction si la boucle est utilisée à l’intérieur d’une fonction.\n\nCes instructions vous permettent d’ajuster le comportement de votre boucle en fonction de conditions ou de critères spécifiques."
  },
  {
    "objectID": "ia2.html#conclusion",
    "href": "ia2.html#conclusion",
    "title": "Les boucles dans R : Comprendre et utiliser la puissance des boucles",
    "section": "Conclusion",
    "text": "Conclusion\nLes boucles sont des outils puissants en langage R qui permettent de répéter un bloc de code plusieurs fois. Les boucles “for” sont utilisées lorsque vous connaissez le nombre de répétitions à l’avance, tandis que les boucles “while” sont utilisées lorsque vous ne le connaissez pas à l’avance. Assurez-vous de bien contrôler vos boucles en utilisant les instructions “break”, “next” et “return” si nécessaire. Les boucles sont essentielles pour automatiser des tâches répétitives et rendre votre code plus efficace."
  },
  {
    "objectID": "Shiny.html",
    "href": "Shiny.html",
    "title": "Shiny : Création d’applications web interactives en R",
    "section": "",
    "text": "R Shiny : librairie gratuite développée par R Studio, permettant le développement d’applications Web avec R.\nshinydashboard : développement aisé de tableaux de bord Web.\nStructure basée sur Admin LTE (exemple).\nFonctionnement général :\n\ncréer un répertoire dédié à l’application,\ndans ce répertoire, créer un fichier app.R (toujours ce nom) dans lequel seront chargées les librairies shiny et shinydashboard,\nle format shiny est reconnu par R Studio, qui propose des boutons dédiés,\nune fois le fichier app.R sauvegardé, le compiler avec le bouton Run App ou Reload App."
  },
  {
    "objectID": "Shiny.html#applications-web-et-tableaux-de-bord",
    "href": "Shiny.html#applications-web-et-tableaux-de-bord",
    "title": "Shiny : Création d’applications web interactives en R",
    "section": "",
    "text": "R Shiny : librairie gratuite développée par R Studio, permettant le développement d’applications Web avec R.\nshinydashboard : développement aisé de tableaux de bord Web.\nStructure basée sur Admin LTE (exemple).\nFonctionnement général :\n\ncréer un répertoire dédié à l’application,\ndans ce répertoire, créer un fichier app.R (toujours ce nom) dans lequel seront chargées les librairies shiny et shinydashboard,\nle format shiny est reconnu par R Studio, qui propose des boutons dédiés,\nune fois le fichier app.R sauvegardé, le compiler avec le bouton Run App ou Reload App."
  },
  {
    "objectID": "Shiny.html#bases-de-programmation",
    "href": "Shiny.html#bases-de-programmation",
    "title": "Shiny : Création d’applications web interactives en R",
    "section": "Bases de programmation",
    "text": "Bases de programmation\nLe squelette du fichier app.R doit contenir les lignes suivantes :\n\nlibrary(shiny)\n\nui = \nserver = function(input, output) {}\nshinyApp(ui = ui, server = server)\n\navec\n\nui (user interface) : contient tous les éléments visibles par l’utilisateur (inputs = entrées et ouputs = sorties),\nserver (serveur) : contient tous les éléments de calcul des sorties à partir des entrées renseignées par l’utilisateur.\nRemarque : possibilité de faire 3 fichiers app.R, ui.R et server.R."
  },
  {
    "objectID": "Shiny.html#tableaux-de-bord",
    "href": "Shiny.html#tableaux-de-bord",
    "title": "Shiny : Création d’applications web interactives en R",
    "section": "Tableaux de bord",
    "text": "Tableaux de bord\nPage (Page) de tableau de bord avec shinydashboard composée\n\nd’un bandeau (Header),\nd’une barre de menu verticale (Sidebar),\nd’un corps principal (Body), qui contient le rendu souhaité.\n\n\nlibrary(shiny)\nlibrary(shinydashboard)\n\nui = dashboardPage(\n    dashboardHeader(),\n    dashboardSidebar(),\n    dashboardBody(),\n    title = \"Titre dans le navigateur\",\n    skin = \"yellow\"\n  )"
  },
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Projects",
    "section": "",
    "text": "arXiv Preprint | Code\nOver the centuries, I have devoted countless hours to deciphering and translating the ancient scripts and dialects of the various peoples of Middle-earth. My goal is to gain a deeper understanding of the cultures and histories of these peoples by studying their languages. Currently, I am working on a monograph that explores the linguistic roots of the Elvish languages. Through extensive research and analysis, I hope to shed light on the connections between the different dialects of Elvish and their origins. This project has been particularly challenging, as Elvish is a complex and nuanced language, but I am determined to see it through to completion."
  },
  {
    "objectID": "projects/index.html#the-languages-of-middle-earth",
    "href": "projects/index.html#the-languages-of-middle-earth",
    "title": "Projects",
    "section": "",
    "text": "arXiv Preprint | Code\nOver the centuries, I have devoted countless hours to deciphering and translating the ancient scripts and dialects of the various peoples of Middle-earth. My goal is to gain a deeper understanding of the cultures and histories of these peoples by studying their languages. Currently, I am working on a monograph that explores the linguistic roots of the Elvish languages. Through extensive research and analysis, I hope to shed light on the connections between the different dialects of Elvish and their origins. This project has been particularly challenging, as Elvish is a complex and nuanced language, but I am determined to see it through to completion."
  },
  {
    "objectID": "projects/index.html#the-history-of-the-war-of-the-ring",
    "href": "projects/index.html#the-history-of-the-war-of-the-ring",
    "title": "Projects",
    "section": "The History of the War of the Ring",
    "text": "The History of the War of the Ring\n\narXiv Preprint | Code\nI am creating a comprehensive and detailed history of the conflict that goes beyond the surface-level events. By gathering information from a variety of sources, including my own memories, written accounts, and oral histories, I hope to shed new light on this important period in Middle-earth’s history and provide valuable insights into the motivations and actions of the various players involved.\n\nView the tutorial for this template (+ download link)"
  },
  {
    "objectID": "ia.html",
    "href": "ia.html",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "",
    "text": "Les fonctions sont l’un des éléments fondamentaux du langage de programmation R. Elles jouent un rôle clé dans l’organisation et la réutilisation du code, permettant aux programmeurs d’écrire des blocs de code autonomes qui peuvent être appelés et exécutés à plusieurs reprises. Dans cet article, nous explorerons les bases des fonctions dans R, leur syntaxe, leurs paramètres et leurs retours de valeur, ainsi que leur utilisation pratique avec des exemples concrets utilisant les datasets intégrés à R. Les fonctions sont un élément essentiel de R et permettent d’organiser et de réutiliser le code de manière efficace. Elles offrent une grande flexibilité et peuvent être adaptées à différents scénarios d’analyse de données. En comprenant les bases des fonctions, leur syntaxe, leurs paramètres et leurs retours de valeur, vous pourrez tirer pleinement parti de la puissance de R dans vos projets d’analyse de données."
  },
  {
    "objectID": "ia.html#syntaxe-des-fonctions",
    "href": "ia.html#syntaxe-des-fonctions",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Syntaxe des fonctions",
    "text": "Syntaxe des fonctions\nLa syntaxe générale d’une fonction en R est la suivante :\n\nnom_de_la_fonction &lt;- function(paramètres) {\n  # Corps de la fonction\n  # Instructions à exécuter\n  # ...\n  # Retourner une valeur si nécessaire\n  return(valeur)\n}\n\nUne fonction commence par le mot-clé function suivi du nom de la fonction, puis des paramètres entre parenthèses. Le corps de la fonction est entouré par des accolades {} et contient les instructions à exécuter. Une fonction peut également retourner une valeur à l’aide du mot-clé return."
  },
  {
    "objectID": "ia.html#utilisation-des-fonctions",
    "href": "ia.html#utilisation-des-fonctions",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Utilisation des fonctions",
    "text": "Utilisation des fonctions\nPour utiliser une fonction, vous devez l’appeler en utilisant son nom suivi des arguments entre parenthèses. Les arguments sont les valeurs que vous fournissez à la fonction pour qu’elle effectue ses opérations. Voici un exemple d’utilisation d’une fonction intégrée à R :\n\n# Utilisation de la fonction mean() pour calculer la moyenne\nvaleurs &lt;- c(5, 10, 15, 20)\nmoyenne &lt;- mean(valeurs)\nprint(moyenne)\n\n[1] 12.5\n\n\nDans cet exemple, nous utilisons la fonction mean() pour calculer la moyenne des valeurs stockées dans le vecteur valeurs. Le résultat est stocké dans la variable moyenne et ensuite affiché à l’aide de la fonction print()."
  },
  {
    "objectID": "ia.html#paramètres-des-fonctions",
    "href": "ia.html#paramètres-des-fonctions",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Paramètres des fonctions",
    "text": "Paramètres des fonctions\nLes fonctions peuvent accepter des paramètres, également appelés arguments, qui sont des valeurs fournies à la fonction lors de son appel. Les paramètres permettent de personnaliser le comportement d’une fonction en lui fournissant des données spécifiques à traiter. Par exemple, la fonction mean() accepte un paramètre na.rm qui spécifie si les valeurs manquantes doivent être ignorées lors du calcul de la moyenne. Voici un exemple d’utilisation de ce paramètre :\n\nvaleurs &lt;- c(5, 10, NA, 20)\nmoyenne &lt;- mean(valeurs, na.rm = TRUE)\nprint(moyenne)\n\n[1] 11.66667\n\n\nDans cet exemple, la valeur NA représente une valeur manquante. En spécifiant na.rm = TRUE, nous demandons à la fonction mean() d’ignorer les valeurs manquantes lors du calcul de la moyenne."
  },
  {
    "objectID": "ia.html#retour-de-valeurs-des-fonctions",
    "href": "ia.html#retour-de-valeurs-des-fonctions",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Retour de valeurs des fonctions",
    "text": "Retour de valeurs des fonctions\nLes fonctions peuvent également retourner des valeurs qui peuvent être utilisées plus tard dans le code. Pour cela, nous utilisons le mot-clé return suivi de la valeur que nous souhaitons renvoyer. Voici un exemple :\n\n# Fonction pour calculer le carré d'un nombre\ncarre &lt;- function(x) {\n  resultat &lt;- x^2\n  return(resultat)\n}\n\n# Utilisation de la fonction carre()\nnombre &lt;- 5\nres &lt;- carre(nombre)\nprint(res)\n\n[1] 25\n\n\nDans cet exemple, nous avons défini une fonction carre() qui prend un argument x et calcule le carré de ce nombre. La valeur carrée est stockée dans la variable resultat, puis renvoyée à l’aide de return(). Lorsque nous appelons la fonction carre() avec le nombre 5, le résultat est stocké dans la variable res et ensuite affiché à l’aide de print()."
  },
  {
    "objectID": "ia.html#exemples-dutilisation-de-fonctions-avec-des-datasets-intégrés-à-r",
    "href": "ia.html#exemples-dutilisation-de-fonctions-avec-des-datasets-intégrés-à-r",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Exemples d’utilisation de fonctions avec des datasets intégrés à R",
    "text": "Exemples d’utilisation de fonctions avec des datasets intégrés à R\nMaintenant, explorons des exemples concrets d’utilisation de fonctions avec des datasets intégrés à R pour illustrer leur utilité dans l’analyse de données.\n\nExemple 1 : Analyse du dataset iris\nLe dataset “iris” contient des informations sur les mesures des sépales et des pétales de différentes espèces de fleurs. Supposons que nous voulons calculer la moyenne des longueurs des pétales pour chaque espèce de fleur. Voici comment nous pouvons le faire en utilisant une fonction :\n\n# Chargement du dataset iris\ndata(iris)\n\n# Définition de la fonction pour calculer la moyenne des longueurs de pétales par espèce\ncalculer_moyenne_petales &lt;- function(espece) {\n  donnees_espece &lt;- subset(iris, Species == espece)\n  moyenne &lt;- mean(donnees_espece$Petal.Length)\n  return(moyenne)\n}\n\n# Utilisation de la fonction pour calculer la moyenne des longueurs de pétales pour chaque espèce\nespeces &lt;- unique(iris$Species)\nfor (espece in especes) {\n  moyenne &lt;- calculer_moyenne_petales(espece)\n  print(paste(\"Moyenne des longueurs de pétales pour\", espece, \":\", round(moyenne,2)))\n}\n\n[1] \"Moyenne des longueurs de pétales pour setosa : 1.46\"\n[1] \"Moyenne des longueurs de pétales pour versicolor : 4.26\"\n[1] \"Moyenne des longueurs de pétales pour virginica : 5.55\"\n\n\nDans cet exemple, nous avons défini une fonction calculer_moyenne_petales() qui prend le nom d’une espèce de fleur comme argument. La fonction filtre les données pour cette espèce, calcule la moyenne des longueurs de pétales et la renvoie. Ensuite, nous utilisons une boucle for pour itérer sur les différentes espèces du dataset “iris” et calculer la moyenne des longueurs de pétales pour chaque espèce.\n\n\nExemple 2 : Analyse du dataset mtcars\nLe dataset “mtcars” contient des informations sur différentes voitures. Supposons que nous voulons déterminer la consommation d’essence moyenne pour les voitures avec une puissance supérieure à 150 chevaux. Voici comment nous pouvons le faire en utilisant une fonction :\n\n# Chargement du dataset mtcars\ndata(mtcars)\n\n# Définition de la fonction pour calculer la consommation d'essence moyenne pour les voitures avec une puissance supérieure à 150 chevaux\ncalculer_consommation_moyenne &lt;- function(puissance_min) {\n  donnees_filtree &lt;- subset(mtcars, hp &gt; puissance_min)\n  consommation_moyenne &lt;- mean(donnees_filtree$mpg)\n  return(consommation_moyenne)\n}\n\n# Utilisation de la fonction pour calculer la consommation d'essence moyenne pour les voitures avec une puissance supérieure à 150 chevaux\npuissance_min &lt;- 150\nconsommation &lt;- calculer_consommation_moyenne(puissance_min)\nprint(paste(\"Consommation d'essence moyenne pour les voitures avec une puissance supérieure à\", puissance_min, \"chevaux :\", round(consommation,2)))\n\n[1] \"Consommation d'essence moyenne pour les voitures avec une puissance supérieure à 150 chevaux : 15.42\"\n\n\nDans cet exemple, nous avons défini une fonction calculer_consommation_moyenne() qui prend une puissance minimale en argument. La fonction filtre les données pour ne conserver que les voitures avec une puissance supérieure à la valeur donnée, calcule la consommation d’essence moyenne et la renvoie. Ensuite, nous utilisons la fonction print() pour afficher le résultat."
  },
  {
    "objectID": "ia.html#arguments-par-défaut",
    "href": "ia.html#arguments-par-défaut",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Arguments par défaut",
    "text": "Arguments par défaut\nLes fonctions en R peuvent avoir des arguments par défaut, ce qui signifie que si vous ne fournissez pas de valeur pour un argument donné lors de l’appel de la fonction, elle utilisera sa valeur par défaut prédéfinie. Voici un exemple :\n\n# Définition de la fonction avec un argument par défaut\ndire_bonjour &lt;- function(nom = \"Anonyme\") {\n  message(paste(\"Bonjour\", nom, \"!\"))\n}\n\n# Appels de la fonction avec et sans spécification de l'argument\ndire_bonjour()\ndire_bonjour(\"Alice\")\n\nDans cet exemple, la fonction dire_bonjour() est définie avec un argument nom qui a une valeur par défaut de “Anonyme”. Lorsque nous appelons la fonction sans spécifier d’argument, elle utilise la valeur par défaut et affiche “Bonjour Anonyme !”. Lorsque nous l’appelons avec l’argument “Alice”, la fonction utilise cette valeur spécifique et affiche “Bonjour Alice !”."
  },
  {
    "objectID": "ia.html#fonctions-anonymes-lambda",
    "href": "ia.html#fonctions-anonymes-lambda",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Fonctions anonymes (lambda)",
    "text": "Fonctions anonymes (lambda)\nEn plus des fonctions nommées, R prend également en charge les fonctions anonymes, également appelées fonctions lambda. Les fonctions anonymes sont des fonctions sans nom qui peuvent être utilisées de manière concise dans certaines situations. Voici un exemple d’utilisation d’une fonction anonyme avec la fonction sapply() :\n\n# Utilisation d'une fonction anonyme avec sapply()\nvaleurs &lt;- c(1, 2, 3, 4, 5)\nresultats &lt;- sapply(valeurs, function(x) x^2)\nprint(resultats)\n\n[1]  1  4  9 16 25\n\n\nDans cet exemple, nous utilisons la fonction sapply() pour appliquer une fonction anonyme à chaque élément du vecteur valeurs. La fonction anonyme calcule le carré de chaque valeur, et sapply() renvoie un vecteur contenant les carrés correspondants."
  },
  {
    "objectID": "ia.html#portée-des-variables",
    "href": "ia.html#portée-des-variables",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Portée des variables",
    "text": "Portée des variables\nLorsque vous travaillez avec des fonctions en R, il est important de comprendre la portée des variables. Les variables définies à l’intérieur d’une fonction sont généralement locales à cette fonction, ce qui signifie qu’elles ne sont pas accessibles en dehors de la fonction. Cependant, vous pouvez également accéder aux variables définies à l’extérieur d’une fonction à l’intérieur de celle-ci. Voici un exemple :\n\n# Variable globale\nnom &lt;- \"Alice\"\n\n# Fonction utilisant une variable globale et une variable locale\ndire_bonjour &lt;- function() {\n  # Variable locale\n  age &lt;- 30\n  message(paste(\"Bonjour\", nom, \"! Tu as\", age, \"ans.\"))\n}\n\n# Appel de la fonction\ndire_bonjour()\n\nDans cet exemple, nous avons une variable globale nom définie en dehors de la fonction dire_bonjour(), et une variable locale age définie à l’intérieur de la fonction. La fonction utilise à la fois la variable globale nom et la variable locale age pour afficher un message personnalisé."
  },
  {
    "objectID": "ia.html#fonctions-récursives",
    "href": "ia.html#fonctions-récursives",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Fonctions récursives",
    "text": "Fonctions récursives\nLes fonctions récursives sont des fonctions qui s’appellent elles-mêmes à l’intérieur de leur corps. Elles sont utiles lorsque vous avez besoin de résoudre des problèmes qui peuvent être décomposés en problèmes plus petits du même type. Voici un exemple de fonction récursive pour calculer le factoriel d’un nombre :\n\n# Fonction récursive pour calculer le factoriel\ncalculer_factoriel &lt;- function(n) {\n  if (n == 0 || n == 1) {\n    return(1)\n  } else {\n    return(n * calculer_factoriel(n - 1))\n  }\n}\n\n# Appel de la fonction pour calculer le factoriel de 5\nresultat &lt;- calculer_factoriel(5)\nprint(resultat)\n\n[1] 120\n\n\nDans cet exemple, la fonction calculer_factoriel() vérifie si le nombre n est égal à 0 ou 1. Si c’est le cas, elle renvoie 1. Sinon, elle appelle récursivement la fonction elle-même avec n - 1 et multiplie le résultat par n. Ainsi, elle calcule le factoriel du nombre donné.\nLes fonctions en R offrent une flexibilité et une puissance considérables pour organiser, réutiliser et automatiser le code. En comprenant les différents aspects des fonctions, vous pouvez créer des codes plus modulaires et plus efficaces."
  },
  {
    "objectID": "posts/2022-02-15-feature-tables/index.html",
    "href": "posts/2022-02-15-feature-tables/index.html",
    "title": "Scraping et base Excel",
    "section": "",
    "text": "Le scraping (ou web scraping) est le processus de collecte automatique de données à partir de sites web en utilisant des logiciels ou des scripts. Il permet d’extraire des informations telles que des textes, des images, des prix, etc. à partir de pages web. Dans notre exemple, nous utiliserons un script R pour que cette collecte nous crée notre base de données\nQuarto includes a number of features aimed at making it easy to to author and customize markdown table output, including:\nThis post provides an overview of these capabilities in Quarto. For more detail about all the features Quarto for authoring tables, see Tables."
  },
  {
    "objectID": "posts/2022-02-15-feature-tables/index.html#markdown-tables",
    "href": "posts/2022-02-15-feature-tables/index.html#markdown-tables",
    "title": "Scraping et base Excel",
    "section": "Markdown Tables",
    "text": "Markdown Tables\nThe most commonly used markdown table is known as a pipe table. Pipe tables support specifying per column alignment as well as captions. For example:\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 12      | 12   |    12 |   12   |\n| 123     | 123  |   123 |  123   |\n| 1       | 1    |     1 |   1    |\n\n: Demonstration of pipe table sytnax\nHere is the table rendered to HTML:\n\nDemonstration of pipe table syntax\n\n\nDefault\nLeft\nRight\nCenter\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1\n\n\n\n\nCaption Location\nBy default, table captions are positioned above tables. You can modify this behavior using the tbl-cap-location option. For example:\n---\ntbl-cap-location: top\n---"
  },
  {
    "objectID": "posts/2022-02-15-feature-tables/index.html#explicit-column-widths",
    "href": "posts/2022-02-15-feature-tables/index.html#explicit-column-widths",
    "title": "Scraping et base Excel",
    "section": "Explicit Column Widths",
    "text": "Explicit Column Widths\nBeyond standard pipe table syntax for expressing column width, you can also explicitly specify columns widths using the tbl-colwidths attribute or document-level option. For an individual markdown table, add the attribute after the caption. For example:\n| fruit  | price  |\n|--------|--------:\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n\n: Fruit prices {tbl-colwidths=\"[75,25]\"}\nNote that this option is specified at the top level so that it can be shared by both PDF and HTML formats. If you are only targeting a single format you can place it alongside other format specific options.\nValid values for the caption location include:\n\n\n\nValue\nDescription\n\n\n\n\ntop\nPosition the caption above the table.\n\n\nbottom\nPosition the caption below the table.\n\n\nmargin\nPosition the caption in the margin."
  },
  {
    "objectID": "posts/2022-02-15-feature-tables/index.html#computations",
    "href": "posts/2022-02-15-feature-tables/index.html#computations",
    "title": "Scraping et base Excel",
    "section": "Computations",
    "text": "Computations\nAll of the options described above work for tables produced by executable code cells. For example, here we apply the tbl-cap, tbl-colwidths and tbl-caption-location options to a code cell:\n```{r}\n#| tbl-cap: \"Cars\"\n#| tbl-colwidths: [60,40]\n#| tbl-cap-location: margin\n\nlibrary(knitr)\nkable(head(cars))\n```\nIn addition to the above, which focused on some of the features of Quarto when writing pipe tables in markdown, you can also author tables using grid syntax. You review the documentation. for more detail."
  },
  {
    "objectID": "posts/2022-06-21-rstudio-conf-2022-quarto/index.html",
    "href": "posts/2022-06-21-rstudio-conf-2022-quarto/index.html",
    "title": "Quarto at rstudio::conf(2022)",
    "section": "",
    "text": "rstudio::conf(2022) will feature a variety of workshops and talks on Quarto. Join us in Washington DC this July 25-28 to learn more about Quarto and hear from folks using Quarto to create, share, and collaborate.\nHere is a list of Quarto-related talks and workshops (and scroll down for details on each):"
  },
  {
    "objectID": "posts/2022-06-21-rstudio-conf-2022-quarto/index.html#keynote",
    "href": "posts/2022-06-21-rstudio-conf-2022-quarto/index.html#keynote",
    "title": "Quarto at rstudio::conf(2022)",
    "section": "Keynote",
    "text": "Keynote\nReimagine + Collaborate + Share with Quarto (Keynote): (Talk recording)\n\nPresented by Julia Stewart Lowndes (Director, Openscapes) and Mine Çetinkaya-Rundel (Developer Educator at RStudio and Professor at Duke University).\nThursday July 28, 9:00am - 10:00am EDT.\nWhat is Quarto? In this talk, in four acts, we will discuss how Quarto unifies and extends the R Markdown ecosystem. Through our work with NASA Openscapes, Duke University, and RStudio, we will share our experiences authoring, teaching, and collaborating with Quarto. Full of demos with Quarto in RStudio and Jupyter and weaving together narrative, R, and Python code, we will showcase features of Quarto that have enabled us to reimagine our reproducible workflows. This talk will help you get the most out of Quarto regardless of your background with R Markdown, the computing language(s) you use, and your tool of choice for authoring."
  },
  {
    "objectID": "posts/2022-06-21-rstudio-conf-2022-quarto/index.html#workshops",
    "href": "posts/2022-06-21-rstudio-conf-2022-quarto/index.html#workshops",
    "title": "Quarto at rstudio::conf(2022)",
    "section": "Workshops",
    "text": "Workshops\nWe will have two Quarto workshops at the conference, held on July 25-26, one for those who have no or little prior experience with R Markdown and the other for those who want to take their R Markdown skills and expertise and apply them in Quarto.\n\nGetting Started with Quarto: This workshop is designed for those who have no or little prior experience with R Markdown. In this 2 day workshop you will learn about the Quarto format for technical communication and computation. The workshop will teach you how to get started creating and fully customizing Quarto outputs (HTML, PDF, Presentations) and the use of RStudio’s Visual Editor which provides a user interface for editing all of Pandoc markdown. The workshop will also provide an overview of Quarto’s developer tooling support in alternative tools such as Jupyter, VS Code, and any text editors. The workshop will briefly cover how to add interactivity to Quarto with Shiny, Observable JS, htmlwidgets or Jupyter Widgets. Lastly, the workshop will cover Quarto Projects for aggregating many files such as complex web sites or entire books. Presented by Tom Mock, Customer Enablement Lead at RStudio, this workshop will be appropriate for attendees who answer yes to these questions:\n\nHave you programmed in R and want to better encapsulate your code, documentation, and outputs in a cohesive “data product”?\nDo you want to learn about the next generation of RMarkdown for data science?\nDo you want to have a better interactive experience when writing technical or scientific documents with literate programming?\n\nFind out more about this workshop and register at https://www.rstudio.com/conference/2022/workshops/get-started-quarto/.\nFrom R Markdown to Quarto: This workshop is designed for those who want to take their R Markdown skills and expertise and apply them in Quarto. In this workshop you will learn how to apply your reproducible authoring skills to the Quarto format and learn about new tools and workflows for authoring with Quarto in RStudio. You will learn to create static documents, to add interactivity to them with Shiny and htmlwidgets, and to create presentations in various formats such as reveal.js, beamer, and pptx. The workshop will also introduce you to Quarto projects which you can use to build websites and write blogs and books. Finally, you will learn various ways to deploy and publish your Quarto projects on the web. Independent modules will also highlight authoring in Quarto with Jupyter and VS Code as well as other text editors. Presented by Andrew Bray, Associate Teaching Professor in the Department of Statistics at UC Berkeley, this workshop will be appropriate for you if you answer yes to any of these questions:\n\nHave you authored R Markdown documents and are you interested in migrating your workflow to its successor format, Quarto?\nAre you interested in exploring the wide spectrum of documents that can be produced with Quarto, including static documents, websites, and slides?\n\nFind out more about this workshop and register at https://www.rstudio.com/conference/2022/workshops/rmd-to-quarto."
  },
  {
    "objectID": "posts/2022-06-21-rstudio-conf-2022-quarto/index.html#talks",
    "href": "posts/2022-06-21-rstudio-conf-2022-quarto/index.html#talks",
    "title": "Quarto at rstudio::conf(2022)",
    "section": "Talks",
    "text": "Talks\n\nQuarto for R Markdown users: (Talk recording)\n\nPresented by Tom Mock, Customer Enablement Lead at RStudio.\nWednesday July 27, 3:20pm - 3:40pm EDT.\nAre you curious about Quarto? Maybe you saw it on Twitter or the RStudio::conf agenda. Perhaps this raised questions like: What exactly is Quarto? What about RMarkdown? (don’t worry it’s not going away!) What features does Quarto add? What should I do with my existing Rmd/ipynb files? This talk will answer all of those questions and more! I’ll present Quarto as a next-gen version of RMarkdown, compare the similarities, and then discuss the new features in Quarto for publishing documents, presentations, blog posts, lab notebooks and more! Lastly, I’ll cover what this means for our customers using RStudio Team, and the exciting new world for Python users.\n\nThese are a few of my favorite things (about Quarto presentations): (Talk recording)\n\nPresented by Tracy Teal, Open Source Program Director at RStudio.\nThursday July 28, 2022 3:20pm - 3:40pm EDT.\nQuarto is the next generation of RMarkdown, and comes with a new presentation format, revealjs. In this talk, I’ll show a few of my favorite things about making interactive HTML presentations with Quarto. Along the way you’ll learn about the visual editor, multiple columns, delivering an effective talk with speaker notes and mode, making your presentations pop with transitions, effective ways to incorporate code into your presentation, beautiful themes (and how to match your corporate style guide), and sharing it as pdf and HTML. I’ll finish off with a brief look at generating a PowerPoint presentation from a template.\n\nLiterate Programming With Jupyter Notebooks and Quarto: (Talk recording)\n\nPresented by Hamel Husain, head of Data Science at Outerbounds (the developers of Metaflow) and core developer at fast.ai.\nThursday July 28, 3:40pm - 4:00pm EDT.\nJupyter Notebooks play a critical role in in the workflow of many users. Notebooks are used to document existing code, to quickly prototype and iterate on ideas, and as a medium of technical communication. However, package developers typically use an entirely separate set of more traditional development tools, and the context switching between these tools and notebooks can be frustrating. Not only do you lose the ability to iterate fast, but you lose the ability to document and test your code in-situ, requiring you to create documentation and tests separately from source code. Nbdev is a literate programming framework that allows you to develop Python libraries within Jupyter Notebooks. This talk will describe the integration between Nbdev and Quarto, which enables library developers to author their documentation right alongside their code, and automatically produce a Quarto website for their package. The result is a seamless workflow for developing, documenting, and testing software packages all within Jupyter Notebooks, with no context-switching required.\n\nWebsites & Books & Blogs, oh my! Creating Rich Content with Quarto: (Talk recording)\n\nPresented by Devin Pastoor, Solutions Engineer at RStudio.\nThursday July 28, 4:00pm - 4:20pm EDT.\nA number of packages have emerged in the R ecosystem to help create websites (hugodown), books (bookdown), and blogs (blogdown). In this talk, I’ll show you how Quarto handles creating these types of content and more. Whether you’re a grad student considering your first blog post about R, or a python expert about to write a technical book, I’ll show you how Quarto enables you to focus on content while it takes care of the rest. In addition, I’ll show the RStudio team is making it as easy as possible to publish and share content within your organization and to the whole community.\n\n\nTo find out more about the conference and register, visit rstd.io/conf. Looking forward to seeing you in DC!\nCan’t make it to the conference in person, but don’t want to miss this content? You can follow along with the talks remotely via the live stream and we will share materials from the workshops in a post-conf roundup post."
  },
  {
    "objectID": "posts/2022-10-25-shinylive-extension/index.html",
    "href": "posts/2022-10-25-shinylive-extension/index.html",
    "title": "Shinylive Extension",
    "section": "",
    "text": "The new Shinylive Quarto extension makes it easy to embed Shiny for Python applications in your Quarto documents. This makes it possible to add interactivity to your documents with just Python code. For example, you can include an interactive Shiny application like this, directly inside your Quarto document.\n\n\n\n\n\nIn case you’re not already familiar with Shiny, here’s some background: Shiny is a framework for creating web applications. Shiny was originally just for R, but we’ve recently released an alpha version of Shiny for Python.\nOne of the exciting new features of Shiny for Python is a deployment method called Shinylive: the application can be run entirely within the browser, without needing a remote server running Python. Instead, Python runs in the web browser, thanks to the magic of WebAssembly. In essence, but the server and client sides of the Shiny application run in the browser.\nThe Shiny for Python website contains many interactive, editable Shiny applications, and is built using this extension.\nBear in mind that not all Shiny applications can be deployed with Shinylive, in part because not all Python packages can run in WebAssembly – but for those that can, this extension makes it possible to deploy the Quarto document with the embedded application on any web hosting service. To learn more about Shinylive, see this page.\nThe new Shinylive Quarto extension makes it easy to embed Shiny for Python applications in Quarto documents. This is a great way of adding interactive components to your Quarto document. And, once again, you don’t need a server running Python to share these Quarto documents – just deploy the generated files as you would for any other Quarto website."
  },
  {
    "objectID": "posts/2022-07-25-feature-extensions/index.html",
    "href": "posts/2022-07-25-feature-extensions/index.html",
    "title": "Quarto Extensions",
    "section": "",
    "text": "Quarto Extensions are a powerful way to modify or extend the behavior of Quarto, and can be created and distributed by anyone. There are three types of extensions available:\n\nShortcodes are special markdown directives that generate various types of content. For example, you could create shortcodes to embed tweets or videos in a document.\nFilters are a flexible and powerful tool for introducing new global behaviors and/or new markdown rendering behaviors. For example, you could create filters to implement output folding, an image carousel, or just about anything you can imagine!\nFormats enable you to create new output formats by bundling together document options, templates, stylesheets, and other content.\n\nExtensions are a recently released Quarto feature so you should be sure to install the very latest version of Quarto (at least v1.0.36) if you want to try them out.\nHere are some examples of extensions developed and maintained by the core Quarto team:\n\n\n\n\n\n\n\nExtension\nDescription\n\n\n\n\nlightbox\nCreate lightbox treatments for images in your HTML documents.\n\n\nfancy-text\nOutput nicely formatted versions of fancy strings such as LaTeX and BibTeX in multiple formats.\n\n\nfontawesome\nUse Font Awesome icons in HTML and PDF documents.\n\n\nlatex-environment\nQuarto extension to output custom LaTeX environments.\n\n\n\nTo learn more about using extensions, see the Extensions documentation on the Quarto website. If you want to dive in to creating your own extensions check out the articles on Creating Shortcodes, Creating Filters, and Creating Formats."
  },
  {
    "objectID": "posts/2022-02-13-feature-callouts/index.html",
    "href": "posts/2022-02-13-feature-callouts/index.html",
    "title": "Using Callouts",
    "section": "",
    "text": "Callouts are an excellent way to draw extra attention to certain concepts, or to more clearly indicate that certain content is supplemental or applicable to only some scenarios."
  },
  {
    "objectID": "posts/2022-02-13-feature-callouts/index.html#callout-basics",
    "href": "posts/2022-02-13-feature-callouts/index.html#callout-basics",
    "title": "Using Callouts",
    "section": "Callout Basics",
    "text": "Callout Basics\nThere are five different types of callouts available.\n\nnote\ntip\nimportant\ncaution\nwarning\n\nThe color and icon will be different depending upon the type that you select."
  },
  {
    "objectID": "posts/2022-02-13-feature-callouts/index.html#syntax",
    "href": "posts/2022-02-13-feature-callouts/index.html#syntax",
    "title": "Using Callouts",
    "section": "Syntax",
    "text": "Syntax\nCreate callouts in markdown using the following syntax (note that the first markdown heading used within the callout is used as the callout heading):\n:::{.callout-note}\nNote that there are five types of callouts, including:\n`note`, `tip`, `warning`, `caution`, and `important`.\n:::\n\n:::{.callout-tip}\n## Tip With Caption\n\nThis is an example of a callout with a caption.\n:::\nSee our documentation on Callouts, to learn more, including more about how to customize the appearance and behavior of callouts."
  },
  {
    "objectID": "posts/2022-02-17-advanced-layout/index.html",
    "href": "posts/2022-02-17-advanced-layout/index.html",
    "title": "Positioning Content in the Margin",
    "section": "",
    "text": "Quarto supports a variety of page layout options that enable you to author content that\nThis post will demonstrate a few of the capabilities for positioning content in the margin of the page. You can read more about the complete capabilities in the the Article Layout Guide."
  },
  {
    "objectID": "posts/2022-02-17-advanced-layout/index.html#margin-figures",
    "href": "posts/2022-02-17-advanced-layout/index.html#margin-figures",
    "title": "Positioning Content in the Margin",
    "section": "Margin Figures",
    "text": "Margin Figures\nFigures that you create using code cells can be placed in the margin by using the column: margin code cell option. If the code produces more than one figure, each of the figures will be placed in the margin.\n\n```{r}\n#| label: fig-mtcars\n#| fig-cap: \"MPG vs horsepower, colored by transmission.\"\n#| column: margin\n\nlibrary(ggplot2)\nmtcars2 &lt;- mtcars\nmtcars2$am &lt;- factor(\n  mtcars$am, labels = c('automatic', 'manual')\n)\nggplot(mtcars2, aes(hp, mpg, color = am)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method = \"loess\") +\n  theme(legend.position = 'bottom')\n```\n\n\n\n\n\nFigure 1: MPG vs horsepower, colored by transmission."
  },
  {
    "objectID": "posts/2022-02-17-advanced-layout/index.html#margin-tables",
    "href": "posts/2022-02-17-advanced-layout/index.html#margin-tables",
    "title": "Positioning Content in the Margin",
    "section": "Margin Tables",
    "text": "Margin Tables\nYou an also place tables in the margin of your document by specifying column: margin.\n\n```{r}\n#| column: margin\n\nknitr::kable(\n  mtcars[1:3, 1:3]\n)\n```\n\n\n\n\n\n\nmpg\ncyl\ndisp\n\n\n\n\nMazda RX4\n21.0\n6\n160\n\n\nMazda RX4 Wag\n21.0\n6\n160\n\n\nDatsun 710\n22.8\n4\n108"
  },
  {
    "objectID": "posts/2022-02-17-advanced-layout/index.html#other-content",
    "href": "posts/2022-02-17-advanced-layout/index.html#other-content",
    "title": "Positioning Content in the Margin",
    "section": "Other Content",
    "text": "Other Content\nYou can also place content in the margin by targeting the margin column using a div with the .column-margin class. For example:\n::: {.column-margin}\nWe know from *the first fundamental theorem of calculus* that for $x$ in $[a, b]$:\n\n$$\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).$$\n:::\n\n\nWe know from the first fundamental theorem of calculus that for \\(x\\) in \\([a, b]\\):\n\\[\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).\\]"
  },
  {
    "objectID": "posts/2022-02-17-advanced-layout/index.html#margin-references",
    "href": "posts/2022-02-17-advanced-layout/index.html#margin-references",
    "title": "Positioning Content in the Margin",
    "section": "Margin References",
    "text": "Margin References\nFootnotes and the bibliography typically appear at the end of the document, but you can choose to have them placed in the margin by setting the following option[^1] in the document front matter:\n---\nreference-location: margin\ncitation-location: margin\n---\nWith these options set, footnotes and citations will (respectively) be automatically be placed in the margin of the document rather than the bottom of the page. As an example, when I cite @xie2018, the citation bibliography entry itself will now appear in the margin.\n\nAsides\nAsides allow you to place content aside from the content it is placed in. Asides look like footnotes, but do not include the footnote mark (the superscript number). This is a span that has the class aside which places it in the margin without a footnote number.\n[This is a span that has the class aside which places it in the margin without a footnote number.]{.aside}"
  },
  {
    "objectID": "posts/2022-02-17-advanced-layout/index.html#margin-captions",
    "href": "posts/2022-02-17-advanced-layout/index.html#margin-captions",
    "title": "Positioning Content in the Margin",
    "section": "Margin Captions",
    "text": "Margin Captions\nFor figures and tables, you may leave the content in the body of the document while placing the caption in the margin of the document. Using cap-location: margin in a code cell or document front matter to control this. For example:\n\n```{r}\n#| label: fig-cap-margin\n#| fig-cap: \"MPG vs horsepower, colored by transmission.\"\n#| cap-location: margin\n\nlibrary(ggplot2)\nmtcars2 &lt;- mtcars\nmtcars2$am &lt;- factor(\n  mtcars$am, labels = c('automatic', 'manual')\n)\nggplot(mtcars2, aes(hp, mpg, color = am)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method = \"loess\") +\n  theme(legend.position = 'bottom')\n```\n\n\n\n\nFigure 2: MPG vs horsepower, colored by transmission."
  },
  {
    "objectID": "about.html#derniers-diplômes",
    "href": "about.html#derniers-diplômes",
    "title": "Romuald ZAMI",
    "section": "Derniers diplômes :",
    "text": "Derniers diplômes :\nDU1 Dataviz | IUT2 Paris Rives-de-Seine | 2022\nLicence Data Mining | IUT Paris Rives-de-Seine | 2022\nDUT3 STID4 | IUT Paris Rives-de-Seine | 2022"
  },
  {
    "objectID": "about.html#experiences-actuelles",
    "href": "about.html#experiences-actuelles",
    "title": "Romuald ZAMI",
    "section": "Experiences actuelles :",
    "text": "Experiences actuelles :\nChargé d’analyse de données de pilotage  Direction générale de Pôle emploi | depuis janvier 2019\nIntervenant sur les cours de programmation R  IUT Paris Rives-de-Seine | depuis septembre 2022"
  },
  {
    "objectID": "about.html#footnotes",
    "href": "about.html#footnotes",
    "title": "Romuald ZAMI",
    "section": "Notes de bas de page",
    "text": "Notes de bas de page\n\n\nDiplôme Universitaire↩︎\nInstitut Universitaire et Technologique↩︎\nDiplôme Universitaire et Technologique↩︎\nStatistique et Traitement Informatique des Données↩︎"
  },
  {
    "objectID": "About.html",
    "href": "About.html",
    "title": "Romuald ZAMI",
    "section": "",
    "text": "Pour obtenir des informations plus détaillées, je vous invite à me contacter en utilisant les liens fournis ci-dessus."
  },
  {
    "objectID": "About.html#derniers-diplômes",
    "href": "About.html#derniers-diplômes",
    "title": "Romuald ZAMI",
    "section": "Derniers diplômes :",
    "text": "Derniers diplômes :\nDU1 Dataviz | IUT2 Paris Rives-de-Seine | 2022\nLicence Data Mining | IUT Paris Rives-de-Seine | 2022\nDUT3 STID4 | IUT Paris Rives-de-Seine | 2022"
  },
  {
    "objectID": "About.html#experiences-actuelles",
    "href": "About.html#experiences-actuelles",
    "title": "Romuald ZAMI",
    "section": "Experiences actuelles :",
    "text": "Experiences actuelles :\nChargé d’analyse de données de pilotage  Direction générale de Pôle emploi | depuis janvier 2019\nIntervenant sur les cours de programmation R  IUT Paris Rives-de-Seine | depuis septembre 2022"
  },
  {
    "objectID": "About.html#footnotes",
    "href": "About.html#footnotes",
    "title": "Romuald ZAMI",
    "section": "Notes de bas de page",
    "text": "Notes de bas de page\n\n\nDiplôme Universitaire↩︎\nInstitut Universitaire et Technologique↩︎\nDiplôme Universitaire et Technologique↩︎\nStatistique et Traitement Informatique des Données↩︎"
  },
  {
    "objectID": "presentation.html",
    "href": "presentation.html",
    "title": "Romuald ZAMI",
    "section": "",
    "text": "Pour obtenir des informations plus détaillées, je vous invite à me contacter en utilisant les liens fournis ci-dessus."
  },
  {
    "objectID": "presentation.html#derniers-diplômes",
    "href": "presentation.html#derniers-diplômes",
    "title": "Romuald ZAMI",
    "section": "Derniers diplômes :",
    "text": "Derniers diplômes :\nDU1 Dataviz | IUT2 Paris Rives-de-Seine | 2022\nLicence Data Mining | IUT Paris Rives-de-Seine | 2009\nDUT3 STID4 | IUT Paris Rives-de-Seine | 2008"
  },
  {
    "objectID": "presentation.html#experiences-actuelles",
    "href": "presentation.html#experiences-actuelles",
    "title": "Romuald ZAMI",
    "section": "Experiences actuelles :",
    "text": "Experiences actuelles :\nChargé d’analyse de données de pilotage  Direction générale de Pôle emploi | depuis janvier 2019\nIntervenant sur les cours de programmation R,  de Tableur Excel et de SAE5 décisionnelle  IUT Paris Rives-de-Seine | depuis septembre 2022"
  },
  {
    "objectID": "presentation.html#footnotes",
    "href": "presentation.html#footnotes",
    "title": "Romuald ZAMI",
    "section": "Notes de bas de page",
    "text": "Notes de bas de page\n\n\nDiplôme Universitaire↩︎\nInstitut Universitaire et Technologique↩︎\nDiplôme Universitaire et Technologique↩︎\nStatistique et Traitement Informatique des Données↩︎\nSituation d’Apprentissage et d’Évaluation↩︎"
  },
  {
    "objectID": "packages.html",
    "href": "packages.html",
    "title": "Les packages",
    "section": "",
    "text": "Installation et chargement du package :\ninstall.packages(\"nom_du_package\")     # installation package\nlibrary(nom_du_package)                       # chargement package\n\n\n\n\n\n\n\n\n\n    \n      \n      \n    \n\n\n\n\n\n\n\n\nTitre\n\n\nSous-titre\n\n\nCatégories\n\n\n\n\n\n\n\n\n\ndplyr\n\n\nEssentiel pour la manipulation de données\n\n\nmanipulation de données,tidyverse\n\n\n\n\n\n\n\nggplot2\n\n\nEssentiel pour la visualisation de données\n\n\nvisualisation de données,tidyverse\n\n\n\n\n\n\n\n\ngt\n\n\nPersonnalisation des tableaux de données\n\n\nmanipulation de données,table,personnalisation\n\n\n\n\n\n\n\nleaflet\n\n\nCartes intéractives\n\n\nvisualisation de données,cartographie\n\n\n\n\n\n\n\n\nrvest\n\n\nAide à la collecte de données web\n\n\nweb,table\n\n\n\n\n\n\nAucun article correspondant"
  },
  {
    "objectID": "packages/rvest/rvest.html",
    "href": "packages/rvest/rvest.html",
    "title": "rvest",
    "section": "",
    "text": "peut aussi trouver énormément d’informations sur le web : par exemple en cherchant à l’aide d’un moteur de recherche un problème lié à une tâche R on trouve presque toujours une réponse (souvent dans des forum ouverts sur le site Cross Validated).\nLe but de cette introduction tutorielle est de vous apprendre l’utilisation élémentaire de R. Bien que les objets et commandes de bases y soient introduits, cette introduction n’est pas une référence complète au langage R (loin de là!), vous serez donc amenés à utiliser l’aide et à chercher des informations sur le web. A chaque étape, vous êtes encouragés à taper les commandes et à en comprendre le résultat : la meilleur façon d’apprendre un langage est d’écrire et débugger beaucoup de lignes de code!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npeut aussi trouver énormément d’informations sur le web : par exemple en cherchant à l’aide d’un moteur de recherche un problème lié à une tâche R on trouve presque toujours une réponse (souvent dans des forum ouverts sur le site Cross Validated).\nLe but de cette introduction tutorielle est de vous apprendre l’utilisation élémentaire de R. Bien que les objets et commandes de bases y soient introduits, cette introduction n’est pas une référence complète au langage R (loin de là!), vous serez donc amenés à utiliser l’aide et à chercher des informations sur le web. A chaque étape, vous êtes encouragés à taper les commandes et à en comprendre le résultat : la meilleur façon d’apprendre un langage est d’écrire et débugger beaucoup de lignes de code!\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(rvest)"
  },
  {
    "objectID": "packages/ggplot2/ggplot2.html",
    "href": "packages/ggplot2/ggplot2.html",
    "title": "ggplot2",
    "section": "",
    "text": "peut aussi trouver énormément d’informations sur le web : par exemple en cherchant à l’aide d’un moteur de recherche un problème lié à une tâche R on trouve presque toujours une réponse (souvent dans des forum ouverts sur le site Cross Validated).\nLe but de cette introduction tutorielle est de vous apprendre l’utilisation élémentaire de R. Bien que les objets et commandes de bases y soient introduits, cette introduction n’est pas une référence complète au langage R (loin de là!), vous serez donc amenés à utiliser l’aide et à chercher des informations sur le web. A chaque étape, vous êtes encouragés à taper les commandes et à en comprendre le résultat : la meilleur façon d’apprendre un langage est d’écrire et débugger beaucoup de lignes de code!\n\n\n\n\nlibrary(tidyverse)\nlibrary(rvest)"
  },
  {
    "objectID": "packages/dplyr/dplyr.html",
    "href": "packages/dplyr/dplyr.html",
    "title": "dplyr",
    "section": "",
    "text": "Le package “dplyr” est un package populaire en R qui fournit une grammaire de manipulation de données cohérente et facile à utiliser. Il simplifie le processus de manipulation, de transformation et de filtrage des données, en offrant des fonctions puissantes et intuitives. Le package “dplyr” est largement utilisé dans l’analyse de données avec R en raison de sa syntaxe concise et de sa puissance de manipulation de données. Il offre une approche cohérente et intuitive pour effectuer des opérations courantes sur les données.\n\n\n\n\n Vous trouverez ci dessous, certaines des principales fonctionnalités du package “dplyr”, illustrées par des exemples. Nous utiliserons, le célèbre dataset “iris” inclus dans R :\n 1. Sélection de colonnes : “dplyr” propose la fonction select() qui permet de sélectionner les colonnes d’un dataframe en fonction de leur nom. Vous pouvez utiliser des opérations de sélection pour spécifier les colonnes à conserver ou à exclure. Par exemple, pour sélectionner uniquement les colonnes “Species” et “Sepal.Length” du dataset iris, vous pouvez utiliser :\nlibrary(dplyr)\niris_selection &lt;- select(iris, Species, Sepal.Length)\n 2. Filtrage des lignes : La fonction filter() de “dplyr” permet de filtrer les lignes d’un dataframe en fonction de certaines conditions. Vous pouvez utiliser des opérateurs de comparaison (par exemple, “==”, “&lt;”, “&gt;”) et des opérateurs logiques (par exemple, “&”, “|”) pour spécifier les conditions de filtrage. Par exemple, pour filtrer les lignes où la valeur de la colonne “Sepal.Width” est supérieure à 3, vous pouvez utiliser :\niris_filtre &lt;- filter(iris, Sepal.Width &gt; 3)\n 3. Ajout de nouvelles colonnes : “dplyr” permet d’ajouter de nouvelles colonnes à un dataframe à l’aide de la fonction mutate(). Vous pouvez effectuer des calculs ou appliquer des transformations sur les colonnes existantes pour créer de nouvelles colonnes. Par exemple, pour créer une nouvelle colonne “Petal.Ratio” qui représente le ratio de longueur du pétale par rapport à la largeur du pétale, vous pouvez utiliser :\niris_nouvelle_colonne &lt;- mutate(iris, Petal.Ratio = Petal.Length / Petal.Width)\n 4. Chaînage des opérations : L’un des points forts de “dplyr” est la possibilité de chaîner plusieurs opérations ensemble de manière fluide à l’aide de l’opérateur %&gt;%. Cela permet d’écrire un code lisible et concis en enchaînant les fonctions “dplyr” les unes après les autres. Par exemple, pour sélectionner les colonnes “Species” et “Petal.Width”, puis filtrage des lignes où la valeur de “Petal.Width” est supérieure à 1.5, vous pouvez utiliser :\nresultat &lt;- iris %&gt;% select(Species, Petal.Width) %&gt;% filter(Petal.Width &gt; 1.5)\n 5. Jointure de tables : “dplyr” permet de réaliser des jointures entre des tables à l’aide de la fonction join(). Vous pouvez combiner les lignes de plusieurs tables en fonction de clés de jointure communes. “dplyr” prend en charge différents types de jointures tels que la jointure interne, la jointure externe, la jointure gauche et la jointure droite. Par exemple, pour effectuer une jointure dataset iris avec le dataset SpeciesInfo en utilisant la colonne “Species” comme clé de jointure, vous pouvez utiliser :\niris_jointure &lt;- inner_join(iris, SpeciesInfo, by = \"Species\")\n 6. Agrégation des données : “dplyr” fournit des fonctions d’agrégation telles que summarize() et group_by() pour effectuer des opérations d’agrégation sur les données. Vous pouvez regrouper les lignes en fonction d’une ou plusieurs variables, puis calculer des statistiques agrégées (par exemple, la somme, la moyenne, le maximum) sur les groupes. Par exemple, pour calculer la moyenne de la colonne “Petal.Length” pour chaque espèce, vous pouvez utiliser :\niris_agreges &lt;- iris %&gt;% group_by(Species) %&gt;% summarize(moyenne_Petal.Length = mean(Petal.Length))"
  },
  {
    "objectID": "packages/leaflet/leaflet.html",
    "href": "packages/leaflet/leaflet.html",
    "title": "leaflet",
    "section": "",
    "text": "Le package leaflet en R est une bibliothèque interactive de cartographie qui permet de créer des cartes interactives et de les intégrer dans des applications web ou des rapports RMarkdown. Leaflet est basé sur la bibliothèque JavaScript Leaflet.js, ce qui en fait une solution puissante pour la visualisation de données géospatiales.\n\n\n\n\nLes cartes créées avec “leaflet” sont interactives par défaut. Vous pouvez zoomer, faire glisser, et cliquer sur les marqueurs pour afficher des informations supplémentaires. Vous pouvez également personnaliser l’interaction en ajoutant des couches de contrôle. De plus, vous pouvez ajouter une couche de contrôle pour basculer entre différentes vues de carte, activer/désactiver les couches et ajouter des légendes.\nDans l’exemple ci dessous nous avons ajouté un popup qui donne des informations sur le lieu indiqué, l’IUT Paris Rives de Seine (lien vers le site internet et l’adresse)\n\n\n\n\n\n\n\nif (!(require(leaflet))) install.packages(\"leaflet\")\nif (!(require(htmlwidgets))) install.packages(\"htmlwidgets\")\n\n\nlibrary(leaflet)\nlibrary(htmlwidgets)\n\nadresse_iut &lt;- paste(\n  \"&lt;b&gt;&lt;a href='https://iutparis-seine.u-paris.fr/'&gt;IUT Paris Rives de Seine&lt;/a&gt;&lt;/b&gt;\",\n  \"143 Av. de Versailles\",\n  \"75016 Paris\", sep = \"&lt;br/&gt;\"\n)\n\ncarte &lt;- leaflet() %&gt;% \n          addTiles() %&gt;%\n          addPopups(2.267872726605464, 48.84218567506416, adresse_iut,\n            options = popupOptions(closeButton = FALSE)\n  )\n\nsaveWidget(carte, file = \"iut_leaflet.html\")"
  },
  {
    "objectID": "TP1.html",
    "href": "TP1.html",
    "title": "RomuAnalyst",
    "section": "",
    "text": "Aperçu succinct des cours et des travaux pratiques dispensés aux étudiants."
  },
  {
    "objectID": "TP1.html#tp-manipulation-et-visualisation-du-14-novembre-2022",
    "href": "TP1.html#tp-manipulation-et-visualisation-du-14-novembre-2022",
    "title": "TP",
    "section": "",
    "text": "Le fichier contenant vos codes, doit être envoyé en utilisant le bouton “Envoi TP” (en haut à droite).\nÀ vos codes…"
  },
  {
    "objectID": "IUT/TP du 14 novembre 2022/index.html",
    "href": "IUT/TP du 14 novembre 2022/index.html",
    "title": "3ème semestre VCOD",
    "section": "",
    "text": "TP programmation statistique – R\nTous les codes utilisés dans les étapes suivantes, doivent être visibles dans votre rendu final. Les questions sont indépendantes, donc ne restez pas bloqué sur une question.\nPour la réalisation du TP, vous aurez besoin des packages suivants :\n\ndplyr\nggplot2\n\nUne fois les packages installés/chargés, vérifier que vous avez accès au dataset « starwars » (affichez le).\n\nAfficher les personnages qui ont joué dans le film : The Phantom Menace\nAfficher les 10 premières lignes de la table\nCombien y a t’il de personnages dans chaque espèce\nDonner le nom des personnages de l’espèce Droid\nCalculer la taille moyenne et le poids moyen\nCréer une nouvelle table « starwars_reduit » avec les variables : name, height, mass, sex, species, birth_year\nCi dessous le code à copier pour créér une nouvelle table « genre » :\n\n\n\ngenre &lt;- data.frame(sex = c(\"male\", \"none\", \"female\", \"hermaphroditic\",\"NA\"), sex_2022 = c(\"Homme\", \"Non prononcé\", \"Femme\", \"Bisexué\",\"\"))\n\nFusionner/joindre les 2 tables « starwars_reduit » et « genre » \n\nFaire une moyenne par espèce de : height, mass, birth_year (utiliser le pipe)\nFaire un nuage de points entre le poids et la taille (avec un titre)\nFaire un histogramme par espèce\nAjouter un titre au graphique précedent, ainsi qu’un thème\nReprésenter chaque espèce sur un graphique"
  },
  {
    "objectID": "TP1.html#interventions-iut",
    "href": "TP1.html#interventions-iut",
    "title": "RomuAnalyst",
    "section": "",
    "text": "Aperçu succinct des cours et des travaux pratiques dispensés aux étudiants."
  },
  {
    "objectID": "TP1.html#interventions-iut.",
    "href": "TP1.html#interventions-iut.",
    "title": "RomuAnalyst",
    "section": "",
    "text": "Aperçu succinct des cours et des travaux pratiques dispensés aux étudiants."
  },
  {
    "objectID": "R et Posit.html#références",
    "href": "R et Posit.html#références",
    "title": "R et son environnement",
    "section": "",
    "text": "Une référence complète est l’introduction officielle sur le site du CRAN :\nhttps://cran.r-project.org/doc/manuals/R-intro.html"
  },
  {
    "objectID": "Introduction à R.html",
    "href": "Introduction à R.html",
    "title": "Bases du langage",
    "section": "",
    "text": "Dans ce cours d’introduction à R, nous aborderons les principes fondamentaux du langage de programmation R ainsi que ses applications dans l’analyse de données. Le cours précédent a débuté par une présentation de l’environnement de développement RStudio. Ici, nous examinerons les concepts clés de la programmation en R, tels que les variables, les fonctions, les boucles et les conditions. Nous acquerrons également des compétences dans la manipulation des structures de données courantes telles que les vecteurs, les matrices et les data frames. De plus, nous traiterons des sujets tels que l’importation et l’exportation de données, ainsi que le nettoyage et la transformation des jeux de données.\nCe cours d’introduction à R fournit les bases nécessaires pour débuter la programmation en R.\nLes cours à venir se concentreront sur une introduction aux techniques de visualisation de données à l’aide de graphiques de base, ainsi que sur l’utilisation de packages populaires tels que ggplot2.\n\n\nIl y a deux types de commandes en R: les expressions et les affectations.\nExpression\n\nprint('Hello world!')\n\n[1] \"Hello world!\"\n\n\n\n5\n\n[1] 5\n\n\n\npi\n\n[1] 3.141593\n\n\nAffectations et expressions\nUn objet peut être créé avec l’opérateur assigner qui s’écrit &lt;-\n\nx&lt;-1+2\n\n\nx\n\n[1] 3\n\n\nou de manière équivalente avec =\n\nx=1+3\nx\n\n[1] 4\n\n\nSi l’objet existe déjà, sa valeur précédente est effacée :\n\nx=10+2\nx\n\n[1] 12\n\n\n\ny=4\nx+y\n\n[1] 16\n\n\nA l’aide de ; on peut taper deux commandes sur la même ligne avant leur exécution:\n\nb=3; x+y-3\n\n[1] 13\n\n\nLa fonction ls() permet d’afficher une liste simple des objets en mémoire, c’est-à-dire que seuls les noms des objets sont affichées.\n\nname &lt;- \"Carmen\"\nn1 &lt;- 10\nn2 &lt;- 100\nm &lt;- 0.5\nls()\n\n[1] \"b\"               \"has_annotations\" \"m\"               \"n1\"             \n[5] \"n2\"              \"name\"            \"x\"               \"y\""
  },
  {
    "objectID": "Introduction à R.html#commandes-créer-lister-et-effacer-les-objets-en-mémoire",
    "href": "Introduction à R.html#commandes-créer-lister-et-effacer-les-objets-en-mémoire",
    "title": "Bases du langage",
    "section": "",
    "text": "Il y a deux types de commandes en R: les expressions et les affectations.\nExpression\n\nprint('Hello world!')\n\n[1] \"Hello world!\"\n\n\n\n5\n\n[1] 5\n\n\n\npi\n\n[1] 3.141593\n\n\nAffectations et expressions\nUn objet peut être créé avec l’opérateur assigner qui s’écrit &lt;-\n\nx&lt;-1+2\n\n\nx\n\n[1] 3\n\n\nou de manière équivalente avec =\n\nx=1+3\nx\n\n[1] 4\n\n\nSi l’objet existe déjà, sa valeur précédente est effacée :\n\nx=10+2\nx\n\n[1] 12\n\n\n\ny=4\nx+y\n\n[1] 16\n\n\nA l’aide de ; on peut taper deux commandes sur la même ligne avant leur exécution:\n\nb=3; x+y-3\n\n[1] 13\n\n\nLa fonction ls() permet d’afficher une liste simple des objets en mémoire, c’est-à-dire que seuls les noms des objets sont affichées.\n\nname &lt;- \"Carmen\"\nn1 &lt;- 10\nn2 &lt;- 100\nm &lt;- 0.5\nls()\n\n[1] \"b\"               \"has_annotations\" \"m\"               \"n1\"             \n[5] \"n2\"              \"name\"            \"x\"               \"y\""
  },
  {
    "objectID": "Introduction à R.html#les-objets",
    "href": "Introduction à R.html#les-objets",
    "title": "Bases du langage",
    "section": "Les objets",
    "text": "Les objets\nDans R, tout est un objet. R manipule donc des objets qui sont caractérisés par leur nom, leur contenu mais aussi par des attributs qui vont spécifier le type de données représenté par un objet. Les objets ont tous deux attributs intrinsèques : le mode et la longueur.\n\nle mode spécifie ce qu’un objet peut contenir. Il s’obtient à l’aide de la fonction mode. Les modes principaux sont:\n\n\nnumeric : nombres réels\ncharacter: chaînes de caractères\nlogical : valeurs logiques vrai/faux ( TRUE / FALSE ou T / F sur R)\nlist: liste, collection d’objets\nfunction: fonction\n\nLes objets de mode numeric, character et logical, sont des objets simples qui peuvent contenir des données d’un seul type. Au contraire, les objets de mode list sont des objets spéciaux qui peuvent contenir des objets de types différents.\n\nla longueur est le nombre d’éléments de l’objet. Elle s’obtient à l’aide de la fonction length. Un objet de mode character doit contenir plusieurs chaînes de caractères pour que sa longueur soit supérieure à 1. Un objet peut être de longueur 0 et doit alors être interprété comme un contenant qui existe mais qui est vide.\n\n\nx &lt;- 10\nmode(x)\n\n[1] \"numeric\"\n\nlength(x)\n\n[1] 1\n\n\n\nx1 &lt;- c(\"test\")\nmode(x1)\n\n[1] \"character\"\n\nlength(x1)\n\n[1] 1\n\nnchar(x1)\n\n[1] 4\n\nmode(nchar)\n\n[1] \"function\"\n\nx2 &lt;- c(\"test1\", \"test2\") # La fonction de concatenation c() permet de créer des vecteurs\nlength(x2)\n\n[1] 2\n\nnchar(x2)\n\n[1] 5 5\n\nt &lt;- TRUE\nmode(t)\n\n[1] \"logical\"\n\nlength(t)\n\n[1] 1\n\nmode(mode)\n\n[1] \"function\"\n\n\n\nage &lt;- c(33,28,33)\nmode(age)\n\n[1] \"numeric\"\n\nlength(age)\n\n[1] 3\n\nnoms &lt;- c('Daniel', 'Jeanne', 'Romain')\nmode(noms)\n\n[1] \"character\"\n\nlength(noms)\n\n[1] 3\n\nma.liste &lt;- list(Noms=noms, Age=age)\nma.liste\n\n$Noms\n[1] \"Daniel\" \"Jeanne\" \"Romain\"\n\n$Age\n[1] 33 28 33\n\nmode(ma.liste)\n\n[1] \"list\"\n\nlength(ma.liste)\n\n[1] 2\n\nlength(ma.liste$Noms)\n\n[1] 3\n\nmode(ma.liste$Noms)\n\n[1] \"character\"\n\nmode(ma.liste$Age)\n\n[1] \"numeric\""
  },
  {
    "objectID": "Introduction à R.html#les-objets-spéciaux",
    "href": "Introduction à R.html#les-objets-spéciaux",
    "title": "Bases du langage",
    "section": "Les objets spéciaux",
    "text": "Les objets spéciaux\nNULL\nL’objet spécial NULL représente “rien” ou le vide. Son mode est NULL, sa longueur 0.\n\nmode(NULL)\n\n[1] \"NULL\"\n\nlength(NULL)\n\n[1] 0\n\n\nDans les applications statistiques, il est souvent utile de pouvoir représenter des données manquantes.\nNA\nDans R, l’objet spécial NA remplit ce rôle. NA signifiant : Not Allowed (valeur non allouée). Par défaut, le mode de NA est logical cependant NA n’est ni TRUE ni FALSE. Toute opération impliquant une donnée NA a comme résultat NA mais certaines fonctions (sum, mean,…) ont un argument na.rm qui, lorsque TRUE, élimine les données manquantes. La valeur NA n’est égale à aucune autre, pas même à elle même.\n\nNA==NA\n\n[1] NA\n\n\nPar conséquent, pour tester si les éléments d’un objet sont NA ou non, il faut utiliser la fonction is.na.\n\nis.na(NA)\n\n[1] TRUE\n\nis.na(mean(c(1,4,NA)))\n\n[1] TRUE\n\nmean(c(1,4,NA),na.rm=T)\n\n[1] 2.5\n\n\nIl existe différents types d’objets qui sont détaillés dans les sections suivantes. Les fonctions is.&lt;type&gt;() permettent de tester si l’objet en paramètre est du type demandé."
  },
  {
    "objectID": "Introduction à R.html#type-vector",
    "href": "Introduction à R.html#type-vector",
    "title": "Bases du langage",
    "section": "Type vector",
    "text": "Type vector\nEn R l’unité de base dans les calculs est le vecteur c’est-à-dire que tout est vector de base (au minimum). Il n’existe pas de type scalaire. Un scalaire est simplement un vecteur de longueur 1.\n\na&lt;-3\na\n\n[1] 3\n\nclass(a)\n\n[1] \"numeric\"\n\nis.vector(a)\n\n[1] TRUE\n\n\n\nComme évoqué précédemment, la fonction de base la plus utilisée pour créer un vecteur est c commme concaténation :\n\n\nprix &lt;- c(150, 162, 155, 157); prix\n\n[1] 150 162 155 157\n\n\nLes autres fonctions de base pour créer des vecteurs sont :\n\nnumeric (vecteur de mode numeric)\ncharacter (vecteur de mode character)\nlogical (vecteur de mode logical)\n\nAttention dans un vecteur simple, tous les éléments doivent avoir le même mode:\n\nx &lt;- c(1,2, 'a', 'b'); x\n\n[1] \"1\" \"2\" \"a\" \"b\"\n\nmode(x)\n\n[1] \"character\"\n\nmode(prix)\n\n[1] \"numeric\"\n\n\nIl est également possible de donner une étiquette à chacun des éléments d’un vecteur.\n\nv &lt;- c(a=1,b=2,c=5)\nv\n\na b c \n1 2 5 \n\nv &lt;- c(1,2,5)\nnames(v) &lt;- c(\"a\",\"b\",\"c\")\nv\n\na b c \n1 2 5 \n\n\n\nIndiçage\nL’indiçage dans un vecteur se fait avec les crochets [ ]. On peut extraire un élément d’un vecteur par sa position ou par son étiquette.\n\nv\n\na b c \n1 2 5 \n\nv[2]\n\nb \n2 \n\nv[\"b\"]\n\nb \n2 \n\n\n\nprix[1] # Le premier indice est toujours 1\n\n[1] 150\n\nprix[c(1,3)]\n\n[1] 150 155\n\nprix[-c(1,2)] # pour extraire tous les éléments sauf le 1e et le 2e\n\n[1] 155 157\n\n\nOn peut aussi utiliser un vecteur d’indiçage booléen, les éléments extraits sont bien évidement ceux correspondant aux valeurs TRUE. Par exemple pour extraire les prix supérieurs à 156 :\n\nprix &gt; 156 # le vecteur booléen\n\n[1] FALSE  TRUE FALSE  TRUE\n\nprix[prix&gt;156] \n\n[1] 162 157\n\n\nUne alternative est donnée par la fonction which()qui rend les indices dont les éléments vérifient une condition logique :\n\nwhich(prix&gt;155)\n\n[1] 2 4\n\nprix[which(prix&gt;156)]\n\n[1] 162 157\n\n\nOn peut utiliser l’indiçage pour changer un élément:\n\nprix[1] &lt;- 0; prix\n\n[1]   0 162 155 157\n\n\nIl est possible d’extraire des éléments sur la base des étiquettes :\n\nnames(prix)\n\nNULL\n\nnames(prix) &lt;- c('model.1', 'model.2', 'model.3', 'model.4')\nprix\n\nmodel.1 model.2 model.3 model.4 \n      0     162     155     157 \n\nprix['model.3']\n\nmodel.3 \n    155 \n\n\nEn résumé, il existe quatre façons d’indicer un vecteur (matrice ou data frame) dans R :\n\navec un vecteur d’entiers positifs. Les éléments se trouvant aux positions correspondant aux entiers sont extraits du vecteur dans l’ordre :\n\n\nv &lt;- c(8,7,-9,2,-1)\nnames(v) &lt;- c(\"a\",\"b\",\"c\",\"d\",\"e\")\nv\n\n a  b  c  d  e \n 8  7 -9  2 -1 \n\nv[c(1,3)]\n\n a  c \n 8 -9 \n\n\n\navec un vecteur d’entiers négatifs. Les éléments se trouvant aux positions correspondant aux entiers sont alors éliminés du vecteur :\n\n\nv[-c(1,3)]\n\n b  d  e \n 7  2 -1 \n\n\n\navec un vecteur booléen. Le vecteur d’indiçage doit alors être de même longueur que le vecteur indicé. Seuls les éléments correspondant à une valeur TRUE sont extraits du vecteur :\n\n\nv&gt;0\n\n    a     b     c     d     e \n TRUE  TRUE FALSE  TRUE FALSE \n\nv[v&gt;0]\n\na b d \n8 7 2 \n\n\n\navec un vecteur de chaîne de caractères (utile pour extraire les éléments d’un vecteur à condition que ceux-ci soient nommés) :\n\n\nv[c(\"a\",\"c\")]\n\n a  c \n 8 -9 \n\n\n\n\nCréer des vecteurs de type numeric\nPour créer des vecteurs de type numeric, d’autres commandes peuvent être utiles :\nfonction :\n\n: pour des suites d’entiers consécutifs\n\nPour générer le vecteur des \\(n\\) premiers entiers on utilise la syntaxe 1:n\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n2:6\n\n[1] 2 3 4 5 6\n\n\nfonction seq\n\nseq pour des suites (plus générales) d’éléments\n\n\nseq(1:5)\n\n[1] 1 2 3 4 5\n\n\n\nseq(1,5,by=.5)\n\n[1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0\n\n\n\nseq(5,1,by=-.5)\n\n[1] 5.0 4.5 4.0 3.5 3.0 2.5 2.0 1.5 1.0\n\n\n\nseq(1,5,length=6)\n\n[1] 1.0 1.8 2.6 3.4 4.2 5.0\n\n\nfonction rep\n\nrep pour des éléments répétés\n\n\nrep(1:5,times=3)\n\n [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\n\n\n\nrep(1:5,each=2)\n\n [1] 1 1 2 2 3 3 4 4 5 5\n\n\n\nrep(1:5,each=2,times=3)\n\n [1] 1 1 2 2 3 3 4 4 5 5 1 1 2 2 3 3 4 4 5 5 1 1 2 2 3 3 4 4 5 5"
  },
  {
    "objectID": "Introduction à R.html#type-matrix-et-array",
    "href": "Introduction à R.html#type-matrix-et-array",
    "title": "Bases du langage",
    "section": "Type matrix et array",
    "text": "Type matrix et array\nLes matrices ne sont rien d’autre que des vecteurs dotés d’un attribut dimension de longueur 2 contenant les dimensions de la matrice. Tous les éléments d’une matrice ont donc le même mode. La fonction de base pour créer des matrices est matrix.\n\nmatrix(0,nrow=2,ncol=5)\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    0    0    0    0    0\n[2,]    0    0    0    0    0\n\n\n\nmatrix(1:10,2,5)\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n\n\nLa fonction matrix remplit naturellement la matrice par colonnes. L’argument byrow permet d’inverser l’ordre de remplissage.\n\nm &lt;- matrix(1:10,2,5,byrow=TRUE)\nm\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    6    7    8    9   10\n\n\nL’instruction dim donne les dimensions de la matrice : nombre de lignes et nombres de colonnes.\n\ndim(m)\n\n[1] 2 5\n\n\nOn utilise les [,] pour accéder aux éléments de la matrice, avec tout ce qui est pour les lignes avant la virgule, et pour les colonnes, après. On peut aussi ne donner que la position de l’élément dans le vecteur sous-jacent. Lorsqu’une dimension est omise dans les crochets, tous les éléments de cette dimension sont extraits.\n\nm[1,2] # element de la 1e ligne et 2e colonne\n\n[1] 2\n\nm[3]   # 3e element\n\n[1] 2\n\nm[1,]  # 1ere ligne\n\n[1] 1 2 3 4 5\n\nm[,2]  # 2e colonne\n\n[1] 2 7\n\nm[,-2] # pour extraire toutes les colonnes sauf la 2e\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    3    4    5\n[2,]    6    8    9   10\n\n\nDes fonctions permettent de fusionner des matrices ayant au moins une dimension identique :\n\nrbind : fusionne verticalement des matrices ayant le même nombre de colonnes\n\n\nrbind(m,m)\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    6    7    8    9   10\n[3,]    1    2    3    4    5\n[4,]    6    7    8    9   10\n\n\n\ncbind : fusionne horizontalement des matrices ayant le même nombre de lignes.\n\n\ncbind(m,m)\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n[1,]    1    2    3    4    5    1    2    3    4     5\n[2,]    6    7    8    9   10    6    7    8    9    10\n\n\nLa généralisation d’une matrice à plus de deux dimensions est un tableau array. La fonction de base pour créer des tableaux est array.\n\narray(1:24,dim=c(3,4,2))\n\n, , 1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n, , 2\n\n     [,1] [,2] [,3] [,4]\n[1,]   13   16   19   22\n[2,]   14   17   20   23\n[3,]   15   18   21   24"
  },
  {
    "objectID": "Introduction à R.html#opérations-sur-vecteurs-et-matrices-numériques",
    "href": "Introduction à R.html#opérations-sur-vecteurs-et-matrices-numériques",
    "title": "Bases du langage",
    "section": "Opérations sur vecteurs et matrices numériques",
    "text": "Opérations sur vecteurs et matrices numériques\nLes opérations sur les vecteurs sont effectuées élément par élément :\n\nv &lt;- c(3,4,1,6)\nv + 2\n\n[1] 5 6 3 8\n\nv * 2\n\n[1]  6  8  2 12\n\nv * v\n\n[1]  9 16  1 36\n\nv/2\n\n[1] 1.5 2.0 0.5 3.0\n\nv/v\n\n[1] 1 1 1 1\n\nv + v^2\n\n[1] 12 20  2 42\n\nsqrt(m)\n\n        [,1]     [,2]     [,3] [,4]     [,5]\n[1,] 1.00000 1.414214 1.732051    2 2.236068\n[2,] 2.44949 2.645751 2.828427    3 3.162278\n\nm * m\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    4    9   16   25\n[2,]   36   49   64   81  100\n\n\n\nx&lt;- c(1,2,3)\ny &lt;- c(4,5,6)\nx + y\n\n[1] 5 7 9\n\nx*y\n\n[1]  4 10 18\n\n\nSi les vecteurs impliqués dans une expression arithmétique ne sont pas de la même longueur, les plus courts sont récyclés de façon à correspondre au plus long vecteur.\n\n1:10 + 2\n\n [1]  3  4  5  6  7  8  9 10 11 12\n\n\nSi la longueur du plus long vecteur est un multiple de celle du (ou des) autres vecteurs, ces derniers sont recyclés un nombre entier de fois. Sinon, le plus court vecteur est recyclé un nombre fractionnaire de fois mais comme ce résultat est rarement souhaité, un avertissement est affiché.\n\n1:10 + 1:5 + c(2,4)\n\n [1]  4  8  8 12 12 11 11 15 15 19\n\n1:10 + rep(1:5,2) + rep(c(2,4),5)\n\n [1]  4  8  8 12 12 11 11 15 15 19\n\n1:10 + c(2, 4, 6)\n\n [1]  3  6  9  6  9 12  9 12 15 12\n\nm + v\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    4    3    6    5    8\n[2,]   10   13   12   15   14"
  },
  {
    "objectID": "Introduction à R.html#quelques-fonctions-utiles",
    "href": "Introduction à R.html#quelques-fonctions-utiles",
    "title": "Bases du langage",
    "section": "Quelques fonctions utiles",
    "text": "Quelques fonctions utiles\nLe langage R compte un très grand nombre de fonctions internes permettant de :\n\nextraire des éléments de vecteurs :\n\n\nhead(1:10)\n\n[1] 1 2 3 4 5 6\n\nhead(1:10,3)\n\n[1] 1 2 3\n\ntail(1:10,3)\n\n[1]  8  9 10\n\nunique(c(2,4,2,5,9,5,1))\n\n[1] 2 4 5 9 1\n\n\n\nordonner des vecteurs :\n\n\nsort(c(4,-1,2,6))\n\n[1] -1  2  4  6\n\nrank(c(4,-1,2,6))\n\n[1] 3 1 2 4\n\norder(c(4,-1,2,6))\n\n[1] 2 3 1 4\n\nrev(c(4,-1,2,6))\n\n[1]  6  2 -1  4\n\n\n\nrechercher des éléments dans un vecteur :\n\n\nx &lt;- c(4,-1,2,-3,6)\nwhich(x&gt;0)\n\n[1] 1 3 5\n\nwhich.min(x)\n\n[1] 4\n\nwhich.max(x)\n\n[1] 5\n\nmatch(2,x)\n\n[1] 3\n\n-1:2 %in% x\n\n[1]  TRUE FALSE FALSE  TRUE\n\n\n\narrondir les éléments d’un vecteur :\n\n\nx &lt;- 10*runif(10) # Permet de générer un vecteur aléatoire suivant une loi uniforme\nx\n\n [1] 9.3161842 9.2090853 7.3105590 9.9608965 7.4405469 9.5947470 1.2408265\n [8] 9.3861557 0.9932954 3.5417271\n\nround(x)\n\n [1]  9  9  7 10  7 10  1  9  1  4\n\nround(x,3)\n\n [1] 9.316 9.209 7.311 9.961 7.441 9.595 1.241 9.386 0.993 3.542\n\nfloor(x)\n\n [1] 9 9 7 9 7 9 1 9 0 3\n\nceiling(x)\n\n [1] 10 10  8 10  8 10  2 10  1  4\n\ntrunc(x)\n\n [1] 9 9 7 9 7 9 1 9 0 3\n\n\n\nfaire des opérations sur les matrices :\n\n\nx &lt;- matrix(1:4,nrow=2,ncol=2)\nx\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\nnrow(x)\n\n[1] 2\n\nncol(x)\n\n[1] 2\n\nrowSums(x)\n\n[1] 4 6\n\nrowMeans(x)\n\n[1] 2 3\n\nt(x)\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\ndiag(x)\n\n[1] 1 4\n\nx %*% x # Attention : produit matriciel !\n\n     [,1] [,2]\n[1,]    7   15\n[2,]   10   22"
  },
  {
    "objectID": "Introduction à R.html#type-factor",
    "href": "Introduction à R.html#type-factor",
    "title": "Bases du langage",
    "section": "Type factor",
    "text": "Type factor\nPuisque R est un langage orienté statistique, il dispose d’un type particulier permettant de coder des variables qualitatives, le type factor. Un facteur est un vecteur utilisé pour contenir une variable qualitative autrement dit c’est un vecteur avec une liste prédéfinie de valeurs que l’on appelle modalités, catégories ou niveaux (levels en R).\n\nville &lt;- c('paris', 'lyon', 'lyon', 'paris', 'nantes')\nfact.ville &lt;- as.factor(ville); fact.ville\n\n[1] paris  lyon   lyon   paris  nantes\nLevels: lyon nantes paris\n\nclass(fact.ville)\n\n[1] \"factor\"\n\nlevels(fact.ville)\n\n[1] \"lyon\"   \"nantes\" \"paris\" \n\n\nUn facteur a le mode numeric : en effet ses éléments sont stockés comme les entiers énumérant les différentes modalités :\n\nmode(fact.ville)\n\n[1] \"numeric\"\n\nas.numeric(fact.ville)\n\n[1] 3 1 1 3 2\n\n\nComme nous pouvons le voir en transformant la variable en numeric, chaque modalité est codée numériquement (en valeur entière de 1 à \\(n\\), \\(n\\) désignant le nombre total de niveaux) et garde la liste des niveaux en plus."
  },
  {
    "objectID": "Introduction à R.html#type-list",
    "href": "Introduction à R.html#type-list",
    "title": "Bases du langage",
    "section": "Type list",
    "text": "Type list\nLa liste est le mode de stockage le plus général de R, permettant de mettre ensemble des éléments de différents types et mode, y compris list. Cela permet donc d’emboîter des listes. La fonction de base pour créer des listes est list().\n\nl &lt;- list(1:5,month.abb,pi)\nl\n\n[[1]]\n[1] 1 2 3 4 5\n\n[[2]]\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\n[[3]]\n[1] 3.141593\n\n\nLa liste demeure un vecteur. On peut donc l’indicer avec [ ]. Cependant, cela retourne une liste contenant le ou les éléments indicés. C’est rarement ce que l’on souhaite. Pour indicer un élément d’une liste et n’obtenir que cet élément, il faut utiliser [[ ]]. On ne peut alors extraire qu’un seul élément à la fois.\n\nl[1]\n\n[[1]]\n[1] 1 2 3 4 5\n\nl[[1]]\n\n[1] 1 2 3 4 5\n\nl[[1]][1]\n\n[1] 1\n\n\nSi les éléments d’une liste sont nommés par des étiquettes, on peut alors utiliser l’opérateur $ à la place de [[ ]].\n\nl &lt;- list(x=1:5,mois=month.abb,pi=pi)\nl$x\n\n[1] 1 2 3 4 5\n\n\nLa fonction convertit une liste en vecteur simple.\n\nunlist(l)\n\n                x1                 x2                 x3                 x4 \n               \"1\"                \"2\"                \"3\"                \"4\" \n                x5              mois1              mois2              mois3 \n               \"5\"              \"Jan\"              \"Feb\"              \"Mar\" \n             mois4              mois5              mois6              mois7 \n             \"Apr\"              \"May\"              \"Jun\"              \"Jul\" \n             mois8              mois9             mois10             mois11 \n             \"Aug\"              \"Sep\"              \"Oct\"              \"Nov\" \n            mois12                 pi \n             \"Dec\" \"3.14159265358979\" \n\n\n\nchercher des éléments d’une liste :\n\n\nl = list(a = \"chaîne\", \n  b = 12, \n  c = 1:10, \n  d = month.abb, \n  e = list(x = 1:10, y = log(1:10)))\nFind(is.vector, l)\n\n[1] \"chaîne\"\n\nFind(is.vector, l, right=TRUE)\n\n$x\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$y\n [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101\n [8] 2.0794415 2.1972246 2.3025851\n\nPosition(is.vector, l)\n\n[1] 1\n\nFilter(is.vector, l)\n\n$a\n[1] \"chaîne\"\n\n$b\n[1] 12\n\n$c\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$d\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\n$e\n$e$x\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$e$y\n [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101\n [8] 2.0794415 2.1972246 2.3025851"
  },
  {
    "objectID": "Introduction à R.html#type-data.frame",
    "href": "Introduction à R.html#type-data.frame",
    "title": "Bases du langage",
    "section": "Type data.frame",
    "text": "Type data.frame\nLa classe d’un objet spécifie son comportement et donc sa façon d’interagir avec les opérations et les fonctions. L’exemple probablement le plus important est le data frame: une liste spéciale dont les éléments ont tous la même longueur. En effet, même si les vecteurs, matrices et listes sont les types d’objet les plus fréquement utilisés sous R, un grand nombre de procédures statistiques reposent sur les data.frame pour le stockage des données. Bien que visuellement similaire à une matrice (représentation sous la forme d’un tableau à deux dimensions dont les colonnes sont ses éléments), un data.frame est plus général puisque les colonnes peuvent être de modes différents. Typiquement, dans un data frame les colonnes représentent les variables et les ligne les observations.\nLa commande de base pour créer un data.frame est data.frame() ou as.data.frame() pour convertir un autre type d’objets en data frame. L’élément distinctif entre un data frame et une liste générale, c’est que tous les éléments du premier doivent être de même longueur et que, par conséquent, R les dispose en colonnes.La classe d’un data frame est différente de celle des listes génériques et les data frame ont un système d’indiçage qui n’existe pas pour les autres listes.\n\nid &lt;- c('id.453', 'id.452', 'id.455', 'id.459', 'id.458', 'id.456', 'id.450', 'id.451')\nage &lt;- c(19, 45, 67, 53, 17, 30, 27, 35)\nfumeur &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE)\nsex &lt;- c('f', 'f', 'h', 'h', 'f', 'h', 'f', 'f')\nma.bd &lt;- data.frame(Id=id, Age=age, Fumeur=fumeur, Sex=sex); ma.bd\n\n      Id Age Fumeur Sex\n1 id.453  19   TRUE   f\n2 id.452  45  FALSE   f\n3 id.455  67   TRUE   h\n4 id.459  53   TRUE   h\n5 id.458  17  FALSE   f\n6 id.456  30   TRUE   h\n7 id.450  27   TRUE   f\n8 id.451  35   TRUE   f\n\ndim(ma.bd); nrow(ma.bd); ncol(ma.bd)\n\n[1] 8 4\n\n\n[1] 8\n\n\n[1] 4\n\nnames(ma.bd)\n\n[1] \"Id\"     \"Age\"    \"Fumeur\" \"Sex\"   \n\n\nUn data frame étant une liste, on pourra extraire une colonne à l’aide de l’opérateur $ précédé par le nom du data frame et suivi par le nom de la colonne (ou variable), ou utiliser l’opérateur []\n\nma.bd$Sex # une colonne de caractères est transformée automatiquement en facteur\n\n[1] \"f\" \"f\" \"h\" \"h\" \"f\" \"h\" \"f\" \"f\"\n\nma.bd[,2]\n\n[1] 19 45 67 53 17 30 27 35\n\nma.bd$Age[ma.bd$Fumeur==FALSE]\n\n[1] 45 17\n\n\nLes colonnes sont directement accessibles dans l’espace de travail (sans devoir taper le nom du data frame et le $) après avoir attaché le data frame. En effet, on peut travailler directement avec les colonnes d’un data frame en travailler sur leur noms à l’aide de la fonction attach(cela les rend visibles dans l’espace de travail). Il est possible d’annuler cela avec detach.\n\nattach(ma.bd)\nAge\n\n[1] 19 45 67 53 17 30 27 35\n\ndetach(ma.bd)\n\nPour afficher seulement les six premières lignes:\n\nhead(ma.bd)\n\n      Id Age Fumeur Sex\n1 id.453  19   TRUE   f\n2 id.452  45  FALSE   f\n3 id.455  67   TRUE   h\n4 id.459  53   TRUE   h\n5 id.458  17  FALSE   f\n6 id.456  30   TRUE   h\n\n\nPour afficher seulement les six dernières lignes:\n\ntail(ma.bd)\n\n      Id Age Fumeur Sex\n3 id.455  67   TRUE   h\n4 id.459  53   TRUE   h\n5 id.458  17  FALSE   f\n6 id.456  30   TRUE   h\n7 id.450  27   TRUE   f\n8 id.451  35   TRUE   f\n\n\nLes jeux de données contenus dans R sont (presque) toujours des data.frame.\n\ndata(mtcars)\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\nVous pouvez utiliser la fonction View(mtcars) pour visualiser votre jeu de données.\n\nmtcars[1,]\n\n          mpg cyl disp  hp drat   wt  qsec vs am gear carb\nMazda RX4  21   6  160 110  3.9 2.62 16.46  0  1    4    4\n\n\n\nmtcars$mpg\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\nmtcars[,\"mpg\"]\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\n\n\nmtcars[\"Mazda RX4\",]\n\n          mpg cyl disp  hp drat   wt  qsec vs am gear carb\nMazda RX4  21   6  160 110  3.9 2.62 16.46  0  1    4    4"
  },
  {
    "objectID": "Introduction à R.html#petit-retour-sur-le-type-factor-sur-le-jeu-de-données-iris",
    "href": "Introduction à R.html#petit-retour-sur-le-type-factor-sur-le-jeu-de-données-iris",
    "title": "Bases du langage",
    "section": "Petit retour sur le type factor sur le jeu de données iris",
    "text": "Petit retour sur le type factor sur le jeu de données iris\n\ndata(iris)\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\nlevels(iris$Species)\n\n[1] \"setosa\"     \"versicolor\" \"virginica\" \n\niris$Species[1:5]\n\n[1] setosa setosa setosa setosa setosa\nLevels: setosa versicolor virginica\n\nas.numeric(iris$Species[1:5])\n\n[1] 1 1 1 1 1\n\nas.character(iris$Species[1:5])\n\n[1] \"setosa\" \"setosa\" \"setosa\" \"setosa\" \"setosa\"\n\n\nLe plus souvent on travaille sur des jeux de données que l’on importe c’est-à-dire qui ne sont pas directement disponibles dans R."
  },
  {
    "objectID": "Introduction à R.html#en-tête",
    "href": "Introduction à R.html#en-tête",
    "title": "Bases du langage",
    "section": "En-tête",
    "text": "En-tête\nLors de la création d’un nouveau document R markdown, vous devez voir apparaître en début de document une partie d’en-tête, comme ci-dessous, au format YAML.\n---\ntitle: \"Titre\"\nauthor: \"Romu\"\ndate: \"23/01/2023\"\noutput: html_document\n---\nDans cet en-tête, nous pouvons donc définir le titre, éventuellement un sous-titre (avec subtitle:), le ou les auteurs, la date et des options de sortie. Pour le moment, nous allons garder la sortie au format HTML. Pour passer au format PDF, il faut écrire pdf_document dans output (ainsi qu’avoir \\(\\LaTeX\\) installé sur sa machine - ce qui n’est pas le cas à l’IUT). Pour créer un document de type Word, il faut choisir word_document pour output.\nIl y a d’autres possibilités de sortie, ainsi que la possibilité d’ajouter d’autres paramètres de sortie, que nous ne verrons pas ici.\n\nChunk\nUn chunk sera donc un bloc de commande R (ou autre langage possible) qui sera exécuté par R Studio. Pour cela, il faut indiquer sur la première ligne le langage utilisé. Pour R, voici donc un exemple simple\n```{r}\n# code R\nsummary(mtcars)\n```\nDans le document sera donc intégré à la fois le code, ainsi que le résultat de son exécution. L’exemple donnera donc\n\n# code R\nsummary(mtcars)\n\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n\n\nIl est possible de nommer le chunk en lui donnant un label (sans espace, sans accent) après r dans les {}. Ceci est intéressant surtout dans l’étape de développement, car si une erreur arrive lors de l’exécution, il sera plus facile de retrouver dans quel chunk est l’erreur (indiqué lors de l’affichage de l’erreur).\nDe plus, il est possible de mettre des options dans le chunk, toujours dans les {}, après une \",\". Voici quelques options classiques et utiles (avec leur valeur par défaut indiquée, si elle existe) :\n\ninclude = TRUE : si FALSE, le code est exécuté mais il n’est pas inclus dans le document (ni le code, ni son résultat)\necho = TRUE : si FALSE, le code n’est pas affiché mais bien exécuté\neval = TRUE : si FALSE, le code est affiché mais n’est pas exécuté\nresults = 'markup' : permet de définir comment le résultat est affiché (intéressant pour les tableaux, cf plus loin)\nfig.cap : titre du graphique produit\n\nIl est possible de mettre plusieurs options, toutes séparées par des \",\".\n\n\nQuelques exemples\nDans la suite, voici quelques exemples de chunks avec options. Regardez le source pour mieux comprendre le fonctionnement.\nTout d’abord, on importe les données iris.txt, mais ce genre de code n’est souvent pas à inclure, dans le sens où l’on ne veut ni l’afficher, ni voir de résultat.\nEnsuite, la librairie knitr contient une fonction kable() permettant d’afficher un data.frame au format markdown. Cela permet d’avoir un résultat plus lisible qu’une sortie de console R classique.\n\nknitr::kable(head(Iris))\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n\n\n\nEnfin, on peut vouloir faire un graphique, ce qui pourrait donner ce qui suit. Pour ce genre de présentation, nous pouvons décider de ne pas afficher le code permettant de les obtenir.\n\n\n\n\n\nRépartition de la longeur du sépale en fonction du type d’iris"
  },
  {
    "objectID": "Introduction à R.html#inline-chunk",
    "href": "Introduction à R.html#inline-chunk",
    "title": "Bases du langage",
    "section": "Inline chunk",
    "text": "Inline chunk\nOn peut faire des chunks en ligne en encadrant le code avec des ` et en commencant le code par un r. Par exemple, on peut dire que dans le jeu de données Iris sont présentés 150 individus et 5 variables."
  },
  {
    "objectID": "Introduction à R.html#paramètres-globaux-des-chunks",
    "href": "Introduction à R.html#paramètres-globaux-des-chunks",
    "title": "Bases du langage",
    "section": "Paramètres globaux des chunks",
    "text": "Paramètres globaux des chunks\nIl est possible de déterminer des paramètres globaux pour tous les blocs chunks du document (sauf paramètres locaux précisés). Ceci doit se faire comme suit, avec la fonction set() de l’objet opts_chunk de la librairie knitr. Il est par exemple possible de définir echo=FALSE pour n’avoir aucun code apparaissant dans le document.\nknitr::opts_chunk$set(...)\nDans votre document, penser à nommer chaque chunk différement. Et n’hésiter pas à commenter le document pour le rendre plus conforme à ce qu’on pourrait vouloir produire comme document.\nVous trouverez sur le site rmarkdown beaucoup d’informations et de compléments sur cette librairie. Beaucoup sont résumées dans ce document."
  },
  {
    "objectID": "Introduction à R.html#schémas-de-programmation",
    "href": "Introduction à R.html#schémas-de-programmation",
    "title": "Bases du langage",
    "section": "Schémas de programmation",
    "text": "Schémas de programmation\n\nChoix (impliquant des conditions)\n\nif (condition) branche.vraie else branche.fausse : si condition est vraie, branche.vraie est exécutée, sinon ce sera branche.fausse\n\n\nx &lt;- -2\nif (x&lt;0){\n  cat(\"x est négatif\")\n} else {\n  cat(\"x est positif\")\n}\n\nx est négatif\n\n\n\nwhile (condition) expression : exécute expression tant que condition est vraie\n\n\nx &lt;- 10\nwhile (x&gt;0){\n  x &lt;- x-1\n}\nx\n\n[1] 0\n\n\n\n\nItération ou boucle\n\nfor (variable in suite) expression : exécute expression successivement pour chaque valeur de variable contenue dans suite\n\n\nx &lt;- 0\nfor (i in (1:10)){\n  x &lt;- x+1\n}\nx\n\n[1] 10"
  },
  {
    "objectID": "Introduction à R.html#fonctions-définies-par-lusager",
    "href": "Introduction à R.html#fonctions-définies-par-lusager",
    "title": "Bases du langage",
    "section": "Fonctions définies par l’usager",
    "text": "Fonctions définies par l’usager\nOn définit une nouvelle fonction avec la syntaxe suivante : fun &lt;- function(arguments) expression où\n\nfun est le nom de la fonction\narguments est la liste des arguments, séparés par des virgules\nexpression constitue le corps de la fonction, soit une expression ou un groupe d’expressions réunies par des accolades.\n\nLa plupart des fonctions sont écrites dans le but de retourner un résultat. Ici, une fonction retourne tout simplement le résultat de la dernière expression du corps de la fonction. On peut utiliser la fonction return() pour retourner un résultat qui n’est pas à la dernière ligne de la fonction.\nExemple:\n\nma.fonction &lt;- function(x,y=10){ # la valeur par défaut de y est 10\n  z=x-y\n  return(z)\n}\nma.fonction(2)\n\n[1] -8\n\nma.fonction(2,4)\n\n[1] -2\n\nma.fonction(y=1, x=4)\n\n[1] 3\n\n\nToute variable définie dans une fonction est locale et n’apparaît pas dans l’espace de travail: essayer d’exécuter\n\nz\n\n\nMoyenne &lt;- function(x){\n  if (mode(x)==\"numeric\"){\n    M &lt;- mean(x)\n    return(M)\n  } else {\n    cat(\"x n'est pas numérique\")\n  }\n}\nMoyenne(c(1,3,5))\n\n[1] 3\n\nMoyenne(c(\"a\",\"b\",\"c\"))\n\nx n'est pas numérique"
  },
  {
    "objectID": "Introduction à R.html#fonction-apply",
    "href": "Introduction à R.html#fonction-apply",
    "title": "Bases du langage",
    "section": "Fonction apply()",
    "text": "Fonction apply()\nLa fonction apply() sert à appliquer une fonction quelconque sur une partie d’une matrice, ou plus généralement, d’un tableau. La syntaxe de la fonction est la suivante apply(X, MARGIN, FUN, ...) où\n\nX est une matrice ou un tableau\nMARGIN est un vecteur d’entiers contenant la (ou les) dimensions de la matrice ou tableau sur lesquelles la fonction doit s’appliquer\nFUN est la fonction à appliquer.\n\nLorsque X est une matrice, apply sert principalement à calculer des sommaires par ligne (dimension 1) ou par colonne (dimension 2).\n\nx &lt;- matrix(sample(1:100, 20, rep = TRUE), 5, 4)\nx\n\n     [,1] [,2] [,3] [,4]\n[1,]   18   59   41   46\n[2,]   16   37   65   40\n[3,]   14   87  100   54\n[4,]   91   40   87   62\n[5,]   28   17   11   18\n\napply(x,1,var)\n\n[1]  292.66667  403.00000 1474.91667  564.66667   49.66667\n\napply(x,2,min)\n\n[1] 14 17 11 18"
  },
  {
    "objectID": "Introduction à R.html#fonctions-lapply-et-sapply",
    "href": "Introduction à R.html#fonctions-lapply-et-sapply",
    "title": "Bases du langage",
    "section": "Fonctions lapply() et sapply()",
    "text": "Fonctions lapply() et sapply()\nLes fonctions lapply() et sapply() sont similaires à la fonction apply() puisqu’elles permettent d’appliquer une fonction aux éléments d’une structure (vecteur ou liste). Leur syntaxe est similaire lapply(X,FUN,...), sapply(X,FUNC,...).\nLa fonction lapply() applique une fonction FUN à tous les éléments d’un vecteur ou d’une liste X et retourne le résultat sous la forme d’une liste. La fonction sapply() est similaire, sauf que le résultat est retourné sous forme de vecteur, si possible. Le résultat est donc simplifié par rapport à celui de lapply().\n\nx &lt;- lapply(5:8, sample, x = 1:10)\nx\n\n[[1]]\n[1]  2  7 10  9  5\n\n[[2]]\n[1] 5 6 3 1 4 2\n\n[[3]]\n[1] 7 2 6 9 3 1 4\n\n[[4]]\n[1] 10  4  1  7  5  9  6  8\n\nlapply(x,mean)\n\n[[1]]\n[1] 6.6\n\n[[2]]\n[1] 3.5\n\n[[3]]\n[1] 4.571429\n\n[[4]]\n[1] 6.25\n\nsapply(x,mean)\n\n[1] 6.600000 3.500000 4.571429 6.250000\n\n\nSi le résultat de chaque application de la fonction est un vecteur et que les vecteurs sont tous de la même longueur, alors sapply retourne une matrice, remplie comme toujours par colonne :\n\nx &lt;- lapply(rep(5, 3), sample, x = 1:10)\nx\n\n[[1]]\n[1] 8 4 5 6 2\n\n[[2]]\n[1]  2  5  3  4 10\n\n[[3]]\n[1] 5 6 4 1 9\n\nsapply(x,sort)\n\n     [,1] [,2] [,3]\n[1,]    2    2    1\n[2,]    4    3    4\n[3,]    5    4    5\n[4,]    6    5    6\n[5,]    8   10    9"
  },
  {
    "objectID": "Introduction à R.html#fonction-particulière",
    "href": "Introduction à R.html#fonction-particulière",
    "title": "Bases du langage",
    "section": "Fonction particulière",
    "text": "Fonction particulière\nOn a souvent besoin d’utiliser une fonction spécifique dans les fonctions comme lapply() ou sapply(). On peut par exemple la définir au préalable et l’utiliser comme une autre.\n\nl = list(a = \"chaîne\", \n  b = 12, \n  c = 1:10, \n  d = head(mtcars), \n  e = list(x = 1:10, y = log(1:10)))\n\ninfoElement &lt;- function(e) {\n    return(c(classe = class(e), longueur = length(e)))\n}\n\nsapply(l, infoElement)\n\n         a           b         c         d            e     \nclasse   \"character\" \"numeric\" \"integer\" \"data.frame\" \"list\"\nlongueur \"1\"         \"1\"       \"10\"      \"11\"         \"2\"   \n\n\nIl est également possible de déclarer directement la fonction dans les fonctions lapply() et sapply(). On parle alors de fonction anonyme.\n\nsapply(l, function(e) {\n  return(c(classe = class(e), longueur = length(e)))\n})\n\n         a           b         c         d            e     \nclasse   \"character\" \"numeric\" \"integer\" \"data.frame\" \"list\"\nlongueur \"1\"         \"1\"       \"10\"      \"11\"         \"2\""
  },
  {
    "objectID": "posts/Article/Article suivant.html",
    "href": "posts/Article/Article suivant.html",
    "title": "Lignes de métro parisien",
    "section": "",
    "text": "Nous allons tenter d’avoir sur une carte les stations qui composent les lignes passant par la station Châtelet dans le dataset, la cellule…\n\n\n\n# ...La cellule correspondant aux lignes de la station Châtelet contient des valeurs séparées par des virgules\n# Utilisez strsplit pour diviser les valeurs\n# sep_lignes est maintenant une liste\n# Accédez aux valeurs individuelles avec [[1]], [[2]], etc.\n\n\nattach(metro) #on \"attache\" le dataset metro aux codes que l'on va écrire. le dataset sera gardé en \"mémoire\"\n\nsep_lignes &lt;- lines[name == \"Châtelet\"] %&gt;% strsplit(\", \")\nprint(sep_lignes[[1]])\n\ndetach(metro) # on \"détache\" le dataset\n\nEn d’autres termes :\n\nlignes_chatelet &lt;- metro$lines[metro$name == \"Châtelet\"]\nsep_lignes &lt;- strsplit(lignes_chatelet, \", \")\nprint(sep_lignes[[1]])\n\n[1] \"1\"  \"4\"  \"7\"  \"11\" \"14\"\n\n\nLes stations que nous allons étudier font parties des lignes : 1, 4, 7, 11, 14.\n\nmetro1 &lt;- metro %&gt;% mutate(sepa = strsplit(lines,\", \"))\nsep &lt;- metro1$sepa[[7]]\nsep\n\n[1] \"1\"  \"4\"  \"7\"  \"11\" \"14\"\n\ntable_filtrée &lt;- metro1[grepl(paste(sep, collapse = \"|\"), metro1$lines), ]\n\n\n# Fonction de filtrage pour les valeurs exactes\nfiltrer_valeurs_exactes &lt;- function(metro1, lines, sep) {\n  pattern &lt;- paste0(\"\\\\b(\", paste(sep, collapse = \"|\"), \")\\\\b\")\n  table_filtrée &lt;- metro1[grepl(pattern, metro1[[lines]]), ]\n  return(table_filtrée)\n}\n\n\ntable_filtrée &lt;- filtrer_valeurs_exactes(metro1, \"lines\", sep)\n\nprint(table_filtrée)\n\n# A tibble: 109 × 12\n   name             caption lines connect_rer connect_tramway connect_transilien\n   &lt;chr&gt;            &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt;           &lt;chr&gt;             \n 1 Argentine        &lt;NA&gt;    1     &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;              \n 2 Bastille         &lt;NA&gt;    1, 5… &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;              \n 3 Bérault          &lt;NA&gt;    1     &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;              \n 4 Champs-Élysées—… Grand … 1, 13 &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;              \n 5 Charles de Gaul… &lt;NA&gt;    1, 2… A           &lt;NA&gt;            &lt;NA&gt;              \n 6 Château de Vinc… &lt;NA&gt;    1     &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;              \n 7 Châtelet         &lt;NA&gt;    1, 4… A, B, D     &lt;NA&gt;            &lt;NA&gt;              \n 8 Concorde         &lt;NA&gt;    1, 8… &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;              \n 9 Esplanade de La… &lt;NA&gt;    1     &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;              \n10 Franklin D. Roo… &lt;NA&gt;    1, 9  &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;              \n# ℹ 99 more rows\n# ℹ 6 more variables: connect_other &lt;chr&gt;, passengers &lt;int&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, location &lt;chr&gt;, sepa &lt;list&gt;\n\nicon &lt;- makeIcon(iconUrl = \"5227997.png\")\nleaflet(data = table_filtrée) %&gt;% addTiles() %&gt;%\n  addMarkers(\n    ~ table_filtrée$longitude,\n    ~ table_filtrée$latitude,\n    popup = paste(table_filtrée$name, table_filtrée$location, sep = \"&lt;br&gt;\"),\n    icon = icon\n  ) %&gt;%  addPopups(2.347324,\n                   48.85835,\n                   \"Châtelet\",\n                   options = popupOptions(closeButton = FALSE))\n\n\n\n\n\n\nmetro_modifstr &lt;- metro[sample(1:nrow(metro),15, replace = TRUE), ] %&gt;% rename(Station = name, Lignes = lines, Lieux = caption, connect_autre = connect_other, Nombre_de_passagers = passengers, localisation = location)\nmetro_modifstr &lt;- replace(metro_modifstr,is.na(metro_modifstr),\"\")\ntableau &lt;- gt(metro_modifstr) %&gt;%\n  tab_header(title = \"Métro parisien\",\n             subtitle = 'Six premières lignes du dataset \"metro\" disponible dans le package {gt}')\n\nmy_modified_gt_theme &lt;- function(gt_tbl) {\n  # Grab number of rows of data from gt object\n  n_rows &lt;- nrow(gt_tbl$`_data`)\n  \n  gt_tbl |&gt;\n    tab_options(\n      data_row.padding = px(6),\n      heading.align = 'left',\n      column_labels.background.color = 'dodgerblue4',\n      heading.title.font.size = px(26),\n      heading.subtitle.font.size = px(14),\n      table_body.hlines.width = px(0)\n    ) |&gt;\n    tab_style(\n      style = cell_text(\n        color = 'dodgerblue4',\n        weight = 'bold',\n        font = google_font('Merriweather')\n      ),\n      locations = cells_title(groups = 'title')\n    ) |&gt;\n    tab_style(style = cell_fill(color = 'grey90'),\n              # Use number of rows from data set\n              locations = cells_body(rows = seq(1, n_rows, 2)))\n}\n\ntableau |&gt;\n  my_modified_gt_theme()\n\n\n\n\n\n  \n    \n      Métro parisien\n    \n    \n      Six premières lignes du dataset \"metro\" disponible dans le package {gt}\n    \n    \n      Station\n      Lieux\n      Lignes\n      connect_rer\n      connect_tramway\n      connect_transilien\n      connect_autre\n      Nombre_de_passagers\n      latitude\n      longitude\n      localisation\n    \n  \n  \n    Champs-Élysées—Clemenceau\nGrand Palais\n1, 13\n\n\n\n\n1909005\n48.86750\n2.313500\nParis 8th\n    Plaisance\n\n13\n\n\n\n\n3521753\n48.83155\n2.313741\nParis 14th\n    Cambronne\n\n6\n\n\n\n\n1636566\n48.84754\n2.302937\nParis 15th\n    George V\n\n1\n\n\n\n\n3842260\n48.87194\n2.300556\nParis 8th\n    Volontaires\n\n12\n\n\n\n\n1734848\n48.84134\n2.307504\nParis 15th\n    Arts et Métiers\n\n3, 11\n\n\n\n\n2403042\n48.86550\n2.356100\nParis 3rd\n    Voltaire\n\n9\n\n\n\n\n3454006\n48.85780\n2.380106\nParis 11th\n    Falguière\n\n12\n\n\n\n\n650291\n48.84457\n2.318287\nParis 15th\n    Sully—Morland\n\n7\n\n\n\n\n1124169\n48.85142\n2.361894\nParis 4th\n    Pyrénées\n\n11\n\n\n\n\n2288587\n48.87387\n2.385259\nParis 19th, Paris 20th\n    Saint-Marcel\n\n5\n\n\n\n\n1666744\n48.83800\n2.360000\nParis 13th\n    Basilique de Saint-Denis\nHôtel de Ville\n13\n\nT1, T5\n\n\n3991395\n48.93806\n2.360830\nSaint-Denis\n    Charles de Gaulle—Étoile\n\n1, 2, 6\nA\n\n\n\n4291663\n48.87389\n2.295000\nParis 8th, Paris 16th, Paris 17th\n    Les Sablons\nJardin d'Acclimatation\n1\n\n\n\n\n3954920\n48.88083\n2.272222\nNeuilly-sur-Seine\n    Javel—André Citroën\n\n10\nC\n\n\n\n1589561\n48.84616\n2.278716\nParis 15th\n  \n  \n  \n\n\n\ndf_tab &lt;- gt_theme_pff(tableau)\n\nre &lt;- metro %&gt;% filter(lines == \"1\") %&gt;% head\ngt(re)\n\n\n\n\n\n  \n    \n    \n      name\n      caption\n      lines\n      connect_rer\n      connect_tramway\n      connect_transilien\n      connect_other\n      passengers\n      latitude\n      longitude\n      location\n    \n  \n  \n    Argentine\nNA\n1\nNA\nNA\nNA\nNA\n2079212\n48.87528\n2.290000\nParis 16th, Paris 17th\n    Bérault\nNA\n1\nNA\nNA\nNA\nNA\n2106827\n48.84528\n2.428333\nSaint-Mandé, Vincennes\n    Château de Vincennes\nNA\n1\nNA\nNA\nNA\nNA\n3617738\n48.84444\n2.440000\nParis 12th, Vincennes\n    Esplanade de La Défense\nNA\n1\nNA\nNA\nNA\nNA\n4708183\n48.88833\n2.250000\nCourbevoie, Puteaux\n    George V\nNA\n1\nNA\nNA\nNA\nNA\n3842260\n48.87194\n2.300556\nParis 8th\n    La Défense\nGrande Arche\n1\nA\nT2\nL, U\nNA\n9256802\n48.89185\n2.238539\nPuteaux\n  \n  \n  \n\n\n\nre2 &lt;- df_tab %&gt;% \n  tab_header(\n    title = add_text_img(\n      \"Métro parisien\",\n      url = \"https://cdn-icons-png.flaticon.com/512/50/50844.png\"\n      ),\n    subtitle = 'Quinze lignes aléatoires du dataset \"metro\" disponible dans le package {gt}'\n  )\n\nre2 |&gt; \n  my_modified_gt_theme()\n\n\n\n\n\n  \n    \n      Métro parisien\n    \n    \n      Quinze lignes aléatoires du dataset \"metro\" disponible dans le package {gt}\n    \n    \n      Station\n      Lieux\n      Lignes\n      connect_rer\n      connect_tramway\n      connect_transilien\n      connect_autre\n      Nombre_de_passagers\n      latitude\n      longitude\n      localisation\n    \n  \n  \n    Champs-Élysées—Clemenceau\nGrand Palais\n1, 13\n\n\n\n\n1909005\n48.86750\n2.313500\nParis 8th\n    Plaisance\n\n13\n\n\n\n\n3521753\n48.83155\n2.313741\nParis 14th\n    Cambronne\n\n6\n\n\n\n\n1636566\n48.84754\n2.302937\nParis 15th\n    George V\n\n1\n\n\n\n\n3842260\n48.87194\n2.300556\nParis 8th\n    Volontaires\n\n12\n\n\n\n\n1734848\n48.84134\n2.307504\nParis 15th\n    Arts et Métiers\n\n3, 11\n\n\n\n\n2403042\n48.86550\n2.356100\nParis 3rd\n    Voltaire\n\n9\n\n\n\n\n3454006\n48.85780\n2.380106\nParis 11th\n    Falguière\n\n12\n\n\n\n\n650291\n48.84457\n2.318287\nParis 15th\n    Sully—Morland\n\n7\n\n\n\n\n1124169\n48.85142\n2.361894\nParis 4th\n    Pyrénées\n\n11\n\n\n\n\n2288587\n48.87387\n2.385259\nParis 19th, Paris 20th\n    Saint-Marcel\n\n5\n\n\n\n\n1666744\n48.83800\n2.360000\nParis 13th\n    Basilique de Saint-Denis\nHôtel de Ville\n13\n\nT1, T5\n\n\n3991395\n48.93806\n2.360830\nSaint-Denis\n    Charles de Gaulle—Étoile\n\n1, 2, 6\nA\n\n\n\n4291663\n48.87389\n2.295000\nParis 8th, Paris 16th, Paris 17th\n    Les Sablons\nJardin d'Acclimatation\n1\n\n\n\n\n3954920\n48.88083\n2.272222\nNeuilly-sur-Seine\n    Javel—André Citroën\n\n10\nC\n\n\n\n1589561\n48.84616\n2.278716\nParis 15th\n  \n  \n  \n\n\n\nre2\n\n\n\n\n\n  \n    \n      Métro parisien\n    \n    \n      Quinze lignes aléatoires du dataset \"metro\" disponible dans le package {gt}\n    \n    \n      Station\n      Lieux\n      Lignes\n      connect_rer\n      connect_tramway\n      connect_transilien\n      connect_autre\n      Nombre_de_passagers\n      latitude\n      longitude\n      localisation\n    \n  \n  \n    Champs-Élysées—Clemenceau\nGrand Palais\n1, 13\n\n\n\n\n1909005\n48.86750\n2.313500\nParis 8th\n    Plaisance\n\n13\n\n\n\n\n3521753\n48.83155\n2.313741\nParis 14th\n    Cambronne\n\n6\n\n\n\n\n1636566\n48.84754\n2.302937\nParis 15th\n    George V\n\n1\n\n\n\n\n3842260\n48.87194\n2.300556\nParis 8th\n    Volontaires\n\n12\n\n\n\n\n1734848\n48.84134\n2.307504\nParis 15th\n    Arts et Métiers\n\n3, 11\n\n\n\n\n2403042\n48.86550\n2.356100\nParis 3rd\n    Voltaire\n\n9\n\n\n\n\n3454006\n48.85780\n2.380106\nParis 11th\n    Falguière\n\n12\n\n\n\n\n650291\n48.84457\n2.318287\nParis 15th\n    Sully—Morland\n\n7\n\n\n\n\n1124169\n48.85142\n2.361894\nParis 4th\n    Pyrénées\n\n11\n\n\n\n\n2288587\n48.87387\n2.385259\nParis 19th, Paris 20th\n    Saint-Marcel\n\n5\n\n\n\n\n1666744\n48.83800\n2.360000\nParis 13th\n    Basilique de Saint-Denis\nHôtel de Ville\n13\n\nT1, T5\n\n\n3991395\n48.93806\n2.360830\nSaint-Denis\n    Charles de Gaulle—Étoile\n\n1, 2, 6\nA\n\n\n\n4291663\n48.87389\n2.295000\nParis 8th, Paris 16th, Paris 17th\n    Les Sablons\nJardin d'Acclimatation\n1\n\n\n\n\n3954920\n48.88083\n2.272222\nNeuilly-sur-Seine\n    Javel—André Citroën\n\n10\nC\n\n\n\n1589561\n48.84616\n2.278716\nParis 15th\n  \n  \n  \n\n\n\n\n\ntop10 &lt;- metro1 %&gt;% mutate(Station = name, nb_lignes = sapply(metro1$sepa, function(x) length(x))) %&gt;% select(Station, nb_lignes) %&gt;% arrange(desc(nb_lignes)) %&gt;% head(10) %&gt;% gt() %&gt;%\n  gt_fa_repeats(nb_lignes, name = \"train\")\ntop10\n\n\n\n\n\n  \n    \n    \n      Station\n      nb_lignes\n    \n  \n  \n    Châtelet\nTrain Train Train Train Train\n    République\nTrain Train Train Train Train\n    Nation\nTrain Train Train Train\n    Saint-Lazare\nTrain Train Train Train\n    Montparnasse—Bienvenüe\nTrain Train Train Train\n    Bastille\nTrain Train Train\n    Charles de Gaulle—Étoile\nTrain Train Train\n    Concorde\nTrain Train Train\n    Jaurès\nTrain Train Train\n    Stalingrad\nTrain Train Train"
  },
  {
    "objectID": "posts/Article/Article suivant.html#quarto",
    "href": "posts/Article/Article suivant.html#quarto",
    "title": "Lignes de métro parisien",
    "section": "",
    "text": "Nous allons tenter d’avoir sur une carte les stations qui composent les lignes passant par la station Châtelet dans le dataset, la cellule…\n\n\n\n# ...La cellule correspondant aux lignes de la station Châtelet contient des valeurs séparées par des virgules\n# Utilisez strsplit pour diviser les valeurs\n# sep_lignes est maintenant une liste\n# Accédez aux valeurs individuelles avec [[1]], [[2]], etc.\n\n\nattach(metro) #on \"attache\" le dataset metro aux codes que l'on va écrire. le dataset sera gardé en \"mémoire\"\n\nsep_lignes &lt;- lines[name == \"Châtelet\"] %&gt;% strsplit(\", \")\nprint(sep_lignes[[1]])\n\ndetach(metro) # on \"détache\" le dataset\n\nEn d’autres termes :\n\nlignes_chatelet &lt;- metro$lines[metro$name == \"Châtelet\"]\nsep_lignes &lt;- strsplit(lignes_chatelet, \", \")\nprint(sep_lignes[[1]])\n\n[1] \"1\"  \"4\"  \"7\"  \"11\" \"14\"\n\n\nLes stations que nous allons étudier font parties des lignes : 1, 4, 7, 11, 14.\n\nmetro1 &lt;- metro %&gt;% mutate(sepa = strsplit(lines,\", \"))\nsep &lt;- metro1$sepa[[7]]\nsep\n\n[1] \"1\"  \"4\"  \"7\"  \"11\" \"14\"\n\ntable_filtrée &lt;- metro1[grepl(paste(sep, collapse = \"|\"), metro1$lines), ]\n\n\n# Fonction de filtrage pour les valeurs exactes\nfiltrer_valeurs_exactes &lt;- function(metro1, lines, sep) {\n  pattern &lt;- paste0(\"\\\\b(\", paste(sep, collapse = \"|\"), \")\\\\b\")\n  table_filtrée &lt;- metro1[grepl(pattern, metro1[[lines]]), ]\n  return(table_filtrée)\n}\n\n\ntable_filtrée &lt;- filtrer_valeurs_exactes(metro1, \"lines\", sep)\n\nprint(table_filtrée)\n\n# A tibble: 109 × 12\n   name             caption lines connect_rer connect_tramway connect_transilien\n   &lt;chr&gt;            &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt;           &lt;chr&gt;             \n 1 Argentine        &lt;NA&gt;    1     &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;              \n 2 Bastille         &lt;NA&gt;    1, 5… &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;              \n 3 Bérault          &lt;NA&gt;    1     &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;              \n 4 Champs-Élysées—… Grand … 1, 13 &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;              \n 5 Charles de Gaul… &lt;NA&gt;    1, 2… A           &lt;NA&gt;            &lt;NA&gt;              \n 6 Château de Vinc… &lt;NA&gt;    1     &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;              \n 7 Châtelet         &lt;NA&gt;    1, 4… A, B, D     &lt;NA&gt;            &lt;NA&gt;              \n 8 Concorde         &lt;NA&gt;    1, 8… &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;              \n 9 Esplanade de La… &lt;NA&gt;    1     &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;              \n10 Franklin D. Roo… &lt;NA&gt;    1, 9  &lt;NA&gt;        &lt;NA&gt;            &lt;NA&gt;              \n# ℹ 99 more rows\n# ℹ 6 more variables: connect_other &lt;chr&gt;, passengers &lt;int&gt;, latitude &lt;dbl&gt;,\n#   longitude &lt;dbl&gt;, location &lt;chr&gt;, sepa &lt;list&gt;\n\nicon &lt;- makeIcon(iconUrl = \"5227997.png\")\nleaflet(data = table_filtrée) %&gt;% addTiles() %&gt;%\n  addMarkers(\n    ~ table_filtrée$longitude,\n    ~ table_filtrée$latitude,\n    popup = paste(table_filtrée$name, table_filtrée$location, sep = \"&lt;br&gt;\"),\n    icon = icon\n  ) %&gt;%  addPopups(2.347324,\n                   48.85835,\n                   \"Châtelet\",\n                   options = popupOptions(closeButton = FALSE))\n\n\n\n\n\n\nmetro_modifstr &lt;- metro[sample(1:nrow(metro),15, replace = TRUE), ] %&gt;% rename(Station = name, Lignes = lines, Lieux = caption, connect_autre = connect_other, Nombre_de_passagers = passengers, localisation = location)\nmetro_modifstr &lt;- replace(metro_modifstr,is.na(metro_modifstr),\"\")\ntableau &lt;- gt(metro_modifstr) %&gt;%\n  tab_header(title = \"Métro parisien\",\n             subtitle = 'Six premières lignes du dataset \"metro\" disponible dans le package {gt}')\n\nmy_modified_gt_theme &lt;- function(gt_tbl) {\n  # Grab number of rows of data from gt object\n  n_rows &lt;- nrow(gt_tbl$`_data`)\n  \n  gt_tbl |&gt;\n    tab_options(\n      data_row.padding = px(6),\n      heading.align = 'left',\n      column_labels.background.color = 'dodgerblue4',\n      heading.title.font.size = px(26),\n      heading.subtitle.font.size = px(14),\n      table_body.hlines.width = px(0)\n    ) |&gt;\n    tab_style(\n      style = cell_text(\n        color = 'dodgerblue4',\n        weight = 'bold',\n        font = google_font('Merriweather')\n      ),\n      locations = cells_title(groups = 'title')\n    ) |&gt;\n    tab_style(style = cell_fill(color = 'grey90'),\n              # Use number of rows from data set\n              locations = cells_body(rows = seq(1, n_rows, 2)))\n}\n\ntableau |&gt;\n  my_modified_gt_theme()\n\n\n\n\n\n  \n    \n      Métro parisien\n    \n    \n      Six premières lignes du dataset \"metro\" disponible dans le package {gt}\n    \n    \n      Station\n      Lieux\n      Lignes\n      connect_rer\n      connect_tramway\n      connect_transilien\n      connect_autre\n      Nombre_de_passagers\n      latitude\n      longitude\n      localisation\n    \n  \n  \n    Champs-Élysées—Clemenceau\nGrand Palais\n1, 13\n\n\n\n\n1909005\n48.86750\n2.313500\nParis 8th\n    Plaisance\n\n13\n\n\n\n\n3521753\n48.83155\n2.313741\nParis 14th\n    Cambronne\n\n6\n\n\n\n\n1636566\n48.84754\n2.302937\nParis 15th\n    George V\n\n1\n\n\n\n\n3842260\n48.87194\n2.300556\nParis 8th\n    Volontaires\n\n12\n\n\n\n\n1734848\n48.84134\n2.307504\nParis 15th\n    Arts et Métiers\n\n3, 11\n\n\n\n\n2403042\n48.86550\n2.356100\nParis 3rd\n    Voltaire\n\n9\n\n\n\n\n3454006\n48.85780\n2.380106\nParis 11th\n    Falguière\n\n12\n\n\n\n\n650291\n48.84457\n2.318287\nParis 15th\n    Sully—Morland\n\n7\n\n\n\n\n1124169\n48.85142\n2.361894\nParis 4th\n    Pyrénées\n\n11\n\n\n\n\n2288587\n48.87387\n2.385259\nParis 19th, Paris 20th\n    Saint-Marcel\n\n5\n\n\n\n\n1666744\n48.83800\n2.360000\nParis 13th\n    Basilique de Saint-Denis\nHôtel de Ville\n13\n\nT1, T5\n\n\n3991395\n48.93806\n2.360830\nSaint-Denis\n    Charles de Gaulle—Étoile\n\n1, 2, 6\nA\n\n\n\n4291663\n48.87389\n2.295000\nParis 8th, Paris 16th, Paris 17th\n    Les Sablons\nJardin d'Acclimatation\n1\n\n\n\n\n3954920\n48.88083\n2.272222\nNeuilly-sur-Seine\n    Javel—André Citroën\n\n10\nC\n\n\n\n1589561\n48.84616\n2.278716\nParis 15th\n  \n  \n  \n\n\n\ndf_tab &lt;- gt_theme_pff(tableau)\n\nre &lt;- metro %&gt;% filter(lines == \"1\") %&gt;% head\ngt(re)\n\n\n\n\n\n  \n    \n    \n      name\n      caption\n      lines\n      connect_rer\n      connect_tramway\n      connect_transilien\n      connect_other\n      passengers\n      latitude\n      longitude\n      location\n    \n  \n  \n    Argentine\nNA\n1\nNA\nNA\nNA\nNA\n2079212\n48.87528\n2.290000\nParis 16th, Paris 17th\n    Bérault\nNA\n1\nNA\nNA\nNA\nNA\n2106827\n48.84528\n2.428333\nSaint-Mandé, Vincennes\n    Château de Vincennes\nNA\n1\nNA\nNA\nNA\nNA\n3617738\n48.84444\n2.440000\nParis 12th, Vincennes\n    Esplanade de La Défense\nNA\n1\nNA\nNA\nNA\nNA\n4708183\n48.88833\n2.250000\nCourbevoie, Puteaux\n    George V\nNA\n1\nNA\nNA\nNA\nNA\n3842260\n48.87194\n2.300556\nParis 8th\n    La Défense\nGrande Arche\n1\nA\nT2\nL, U\nNA\n9256802\n48.89185\n2.238539\nPuteaux\n  \n  \n  \n\n\n\nre2 &lt;- df_tab %&gt;% \n  tab_header(\n    title = add_text_img(\n      \"Métro parisien\",\n      url = \"https://cdn-icons-png.flaticon.com/512/50/50844.png\"\n      ),\n    subtitle = 'Quinze lignes aléatoires du dataset \"metro\" disponible dans le package {gt}'\n  )\n\nre2 |&gt; \n  my_modified_gt_theme()\n\n\n\n\n\n  \n    \n      Métro parisien\n    \n    \n      Quinze lignes aléatoires du dataset \"metro\" disponible dans le package {gt}\n    \n    \n      Station\n      Lieux\n      Lignes\n      connect_rer\n      connect_tramway\n      connect_transilien\n      connect_autre\n      Nombre_de_passagers\n      latitude\n      longitude\n      localisation\n    \n  \n  \n    Champs-Élysées—Clemenceau\nGrand Palais\n1, 13\n\n\n\n\n1909005\n48.86750\n2.313500\nParis 8th\n    Plaisance\n\n13\n\n\n\n\n3521753\n48.83155\n2.313741\nParis 14th\n    Cambronne\n\n6\n\n\n\n\n1636566\n48.84754\n2.302937\nParis 15th\n    George V\n\n1\n\n\n\n\n3842260\n48.87194\n2.300556\nParis 8th\n    Volontaires\n\n12\n\n\n\n\n1734848\n48.84134\n2.307504\nParis 15th\n    Arts et Métiers\n\n3, 11\n\n\n\n\n2403042\n48.86550\n2.356100\nParis 3rd\n    Voltaire\n\n9\n\n\n\n\n3454006\n48.85780\n2.380106\nParis 11th\n    Falguière\n\n12\n\n\n\n\n650291\n48.84457\n2.318287\nParis 15th\n    Sully—Morland\n\n7\n\n\n\n\n1124169\n48.85142\n2.361894\nParis 4th\n    Pyrénées\n\n11\n\n\n\n\n2288587\n48.87387\n2.385259\nParis 19th, Paris 20th\n    Saint-Marcel\n\n5\n\n\n\n\n1666744\n48.83800\n2.360000\nParis 13th\n    Basilique de Saint-Denis\nHôtel de Ville\n13\n\nT1, T5\n\n\n3991395\n48.93806\n2.360830\nSaint-Denis\n    Charles de Gaulle—Étoile\n\n1, 2, 6\nA\n\n\n\n4291663\n48.87389\n2.295000\nParis 8th, Paris 16th, Paris 17th\n    Les Sablons\nJardin d'Acclimatation\n1\n\n\n\n\n3954920\n48.88083\n2.272222\nNeuilly-sur-Seine\n    Javel—André Citroën\n\n10\nC\n\n\n\n1589561\n48.84616\n2.278716\nParis 15th\n  \n  \n  \n\n\n\nre2\n\n\n\n\n\n  \n    \n      Métro parisien\n    \n    \n      Quinze lignes aléatoires du dataset \"metro\" disponible dans le package {gt}\n    \n    \n      Station\n      Lieux\n      Lignes\n      connect_rer\n      connect_tramway\n      connect_transilien\n      connect_autre\n      Nombre_de_passagers\n      latitude\n      longitude\n      localisation\n    \n  \n  \n    Champs-Élysées—Clemenceau\nGrand Palais\n1, 13\n\n\n\n\n1909005\n48.86750\n2.313500\nParis 8th\n    Plaisance\n\n13\n\n\n\n\n3521753\n48.83155\n2.313741\nParis 14th\n    Cambronne\n\n6\n\n\n\n\n1636566\n48.84754\n2.302937\nParis 15th\n    George V\n\n1\n\n\n\n\n3842260\n48.87194\n2.300556\nParis 8th\n    Volontaires\n\n12\n\n\n\n\n1734848\n48.84134\n2.307504\nParis 15th\n    Arts et Métiers\n\n3, 11\n\n\n\n\n2403042\n48.86550\n2.356100\nParis 3rd\n    Voltaire\n\n9\n\n\n\n\n3454006\n48.85780\n2.380106\nParis 11th\n    Falguière\n\n12\n\n\n\n\n650291\n48.84457\n2.318287\nParis 15th\n    Sully—Morland\n\n7\n\n\n\n\n1124169\n48.85142\n2.361894\nParis 4th\n    Pyrénées\n\n11\n\n\n\n\n2288587\n48.87387\n2.385259\nParis 19th, Paris 20th\n    Saint-Marcel\n\n5\n\n\n\n\n1666744\n48.83800\n2.360000\nParis 13th\n    Basilique de Saint-Denis\nHôtel de Ville\n13\n\nT1, T5\n\n\n3991395\n48.93806\n2.360830\nSaint-Denis\n    Charles de Gaulle—Étoile\n\n1, 2, 6\nA\n\n\n\n4291663\n48.87389\n2.295000\nParis 8th, Paris 16th, Paris 17th\n    Les Sablons\nJardin d'Acclimatation\n1\n\n\n\n\n3954920\n48.88083\n2.272222\nNeuilly-sur-Seine\n    Javel—André Citroën\n\n10\nC\n\n\n\n1589561\n48.84616\n2.278716\nParis 15th\n  \n  \n  \n\n\n\n\n\ntop10 &lt;- metro1 %&gt;% mutate(Station = name, nb_lignes = sapply(metro1$sepa, function(x) length(x))) %&gt;% select(Station, nb_lignes) %&gt;% arrange(desc(nb_lignes)) %&gt;% head(10) %&gt;% gt() %&gt;%\n  gt_fa_repeats(nb_lignes, name = \"train\")\ntop10\n\n\n\n\n\n  \n    \n    \n      Station\n      nb_lignes\n    \n  \n  \n    Châtelet\nTrain Train Train Train Train\n    République\nTrain Train Train Train Train\n    Nation\nTrain Train Train Train\n    Saint-Lazare\nTrain Train Train Train\n    Montparnasse—Bienvenüe\nTrain Train Train Train\n    Bastille\nTrain Train Train\n    Charles de Gaulle—Étoile\nTrain Train Train\n    Concorde\nTrain Train Train\n    Jaurès\nTrain Train Train\n    Stalingrad\nTrain Train Train"
  },
  {
    "objectID": "packages/rvest/rvest2.html#scraping-de-contenu-html",
    "href": "packages/rvest/rvest2.html#scraping-de-contenu-html",
    "title": "rvest",
    "section": "1. Scraping de contenu HTML",
    "text": "1. Scraping de contenu HTML\nAvec rvest, vous pouvez extraire du contenu HTML à partir de pages web, y compris des données tabulaires, des listes, des images, des liens, etc. Vous pouvez utiliser des sélecteurs CSS ou XPath pour cibler spécifiquement les éléments que vous souhaitez extraire.\nlibrary(rvest)\n\n# Extraction d'une table HTML\nurl &lt;- \"https://www.example.com/table.html\"\ntable &lt;- read_html(url) %&gt;%\n  html_table(fill = TRUE)\n\n# Extraction d'une liste de valeurs\nurl &lt;- \"https://www.example.com/list.html\"\nlist &lt;- read_html(url) %&gt;%\n  html_nodes(\".list-item\") %&gt;%\n  html_text()\n\nScraping récursif ﻿rvest prend en charge le scraping récursif, ce qui signifie que vous pouvez extraire du contenu à partir de plusieurs pages web en suivant les liens. Cela permet d’extraire des données à partir de sites web avec une structure de navigation hiérarchique. # Extraction de liens et de leur contenu à partir d’une page de navigation\n\nurl &lt;- \"https://www.example.com/navigation.html\"\npages &lt;- read_html(url) %&gt;%\n  html_nodes(\"a\") %&gt;%\n  html_attr(\"href\")\n\ndata &lt;- lapply(pages, function(page) {\n  page_url &lt;- paste0(\"https://www.example.com\", page)\n  read_html(page_url) %&gt;%\n    html_nodes(\".content\") %&gt;%\n    html_text()\n})\n\nManipulation de contenu En plus de l’extraction de données, ﻿rvest permet également la manipulation de contenu HTML, y compris l’ajout, la suppression ou la modification d’éléments. Cela vous permet de nettoyer ou de structurer les données extraites selon vos besoins. # Suppression d’éléments indésirables\n\nurl &lt;- \"https://www.example.com/page.html\"\npage &lt;- read_html(url)\n\npage %&gt;%\n  html_nodes(\".unwanted-element\") %&gt;%\n  html_remove()\n\n# Modification d'attributs d'éléments\npage %&gt;%\n  html_nodes(\"img\") %&gt;%\n  html_attr(\"src\") &lt;- \"new_image.jpg\"\n\nPrise en charge des formulaires ﻿rvest permet également d’interagir avec des formulaires sur les pages web, en remplissant les champs et en soumettant les données. Cela permet d’automatiser l’extraction de données à partir de sites web qui nécessitent une interaction utilisateur. # Remplir un formulaire et soumettre les données\n\nurl &lt;- \"https://www.example.com/login.html\"\nform &lt;- read_html(url) %&gt;%\n  html_form() %&gt;%\n  .[[1]]\n\nform &lt;- set_values(form,\n                   username = \"my_username\",\n                   password = \"my_password\")\n\nresult &lt;- submit_form(form)"
  },
  {
    "objectID": "Introduction_R.html",
    "href": "Introduction_R.html",
    "title": "Bases du langage",
    "section": "",
    "text": "Dans ce cours d’introduction à R, nous aborderons les principes fondamentaux du langage de programmation R ainsi que ses applications dans l’analyse de données.\nLe cours précédent a débuté par une présentation de l’environnement de développement RStudio. Ici, nous examinerons les concepts clés de la programmation en R, tels que les variables, les fonctions, les boucles et les conditions. Nous acquerrons également des compétences dans la manipulation des structures de données courantes telles que les vecteurs, les matrices et les data frames. De plus, nous traiterons des sujets tels que l’importation et l’exportation de données, ainsi que le nettoyage et la transformation des jeux de données.\nCe cours d’introduction fournit les bases nécessaires pour débuter la programmation en R.\nLes cours à venir se concentreront sur une introduction aux techniques de visualisation de données à l’aide de graphiques de base, ainsi que sur l’utilisation de packages populaires tels que ggplot2."
  },
  {
    "objectID": "Introduction_R.html#commandes-créer-lister-et-effacer-les-objets-en-mémoire",
    "href": "Introduction_R.html#commandes-créer-lister-et-effacer-les-objets-en-mémoire",
    "title": "Bases du langage",
    "section": "Commandes : créer, lister et effacer les objets en mémoire",
    "text": "Commandes : créer, lister et effacer les objets en mémoire\nIl y a deux types de commandes en R: les expressions et les affectations.\nExpression\n\nprint('Hello world!')\n\n[1] \"Hello world!\"\n\n\n\n5\n\n[1] 5\n\n\n\npi\n\n[1] 3.141593\n\n\nAffectations et expressions\nUn objet peut être créé avec l’opérateur assigner qui s’écrit &lt;-\n\nx&lt;-1+2\n\n\nx\n\n[1] 3\n\n\nou de manière équivalente avec =\n\nx=1+3\nx\n\n[1] 4\n\n\nSi l’objet existe déjà, sa valeur précédente est effacée :\n\nx=10+2\nx\n\n[1] 12\n\n\n\ny=4\nx+y\n\n[1] 16\n\n\nA l’aide de ; on peut taper deux commandes sur la même ligne avant leur exécution:\n\nb=3; x+y-3\n\n[1] 13\n\n\nLa fonction ls() permet d’afficher une liste simple des objets en mémoire, c’est-à-dire que seuls les noms des objets sont affichées.\n\nname &lt;- \"Carmen\"\nn1 &lt;- 10\nn2 &lt;- 100\nm &lt;- 0.5\nls()\n\n[1] \"b\"               \"has_annotations\" \"m\"               \"n1\"             \n[5] \"n2\"              \"name\"            \"x\"               \"y\""
  },
  {
    "objectID": "Introduction_R.html#les-objets",
    "href": "Introduction_R.html#les-objets",
    "title": "Bases du langage",
    "section": "Les objets",
    "text": "Les objets\nDans R, tout est un objet. R manipule donc des objets qui sont caractérisés par leur nom, leur contenu mais aussi par des attributs qui vont spécifier le type de données représenté par un objet. Les objets ont tous deux attributs intrinsèques : le mode et la longueur.\n\nle mode spécifie ce qu’un objet peut contenir. Il s’obtient à l’aide de la fonction mode. Les modes principaux sont:\n\n\nnumeric : nombres réels\ncharacter: chaînes de caractères\nlogical : valeurs logiques vrai/faux ( TRUE / FALSE ou T / F sur R)\nlist: liste, collection d’objets\nfunction: fonction\n\nLes objets de mode numeric, character et logical, sont des objets simples qui peuvent contenir des données d’un seul type. Au contraire, les objets de mode list sont des objets spéciaux qui peuvent contenir des objets de types différents.\n\nla longueur est le nombre d’éléments de l’objet. Elle s’obtient à l’aide de la fonction length. Un objet de mode character doit contenir plusieurs chaînes de caractères pour que sa longueur soit supérieure à 1. Un objet peut être de longueur 0 et doit alors être interprété comme un contenant qui existe mais qui est vide.\n\n\nx &lt;- 10\nmode(x)\n\n[1] \"numeric\"\n\nlength(x)\n\n[1] 1\n\n\n\nx1 &lt;- c(\"test\")\nmode(x1)\n\n[1] \"character\"\n\nlength(x1)\n\n[1] 1\n\nnchar(x1)\n\n[1] 4\n\nmode(nchar)\n\n[1] \"function\"\n\nx2 &lt;- c(\"test1\", \"test2\") # La fonction de concatenation c() permet de créer des vecteurs\nlength(x2)\n\n[1] 2\n\nnchar(x2)\n\n[1] 5 5\n\nt &lt;- TRUE\nmode(t)\n\n[1] \"logical\"\n\nlength(t)\n\n[1] 1\n\nmode(mode)\n\n[1] \"function\"\n\n\n\nage &lt;- c(33,28,33)\nmode(age)\n\n[1] \"numeric\"\n\nlength(age)\n\n[1] 3\n\nnoms &lt;- c('Daniel', 'Jeanne', 'Romain')\nmode(noms)\n\n[1] \"character\"\n\nlength(noms)\n\n[1] 3\n\nma.liste &lt;- list(Noms=noms, Age=age)\nma.liste\n\n$Noms\n[1] \"Daniel\" \"Jeanne\" \"Romain\"\n\n$Age\n[1] 33 28 33\n\nmode(ma.liste)\n\n[1] \"list\"\n\nlength(ma.liste)\n\n[1] 2\n\nlength(ma.liste$Noms)\n\n[1] 3\n\nmode(ma.liste$Noms)\n\n[1] \"character\"\n\nmode(ma.liste$Age)\n\n[1] \"numeric\""
  },
  {
    "objectID": "Introduction_R.html#les-objets-spéciaux",
    "href": "Introduction_R.html#les-objets-spéciaux",
    "title": "Bases du langage",
    "section": "Les objets spéciaux",
    "text": "Les objets spéciaux\nNULL\nL’objet spécial NULL représente “rien” ou le vide. Son mode est NULL, sa longueur 0.\n\nmode(NULL)\n\n[1] \"NULL\"\n\nlength(NULL)\n\n[1] 0\n\n\nDans les applications statistiques, il est souvent utile de pouvoir représenter des données manquantes.\nNA\nDans R, l’objet spécial NA remplit ce rôle. NA signifiant : Not Allowed (valeur non allouée). Par défaut, le mode de NA est logical cependant NA n’est ni TRUE ni FALSE. Toute opération impliquant une donnée NA a comme résultat NA mais certaines fonctions (sum, mean,…) ont un argument na.rm qui, lorsque TRUE, élimine les données manquantes. La valeur NA n’est égale à aucune autre, pas même à elle même.\n\nNA==NA\n\n[1] NA\n\n\nPar conséquent, pour tester si les éléments d’un objet sont NA ou non, il faut utiliser la fonction is.na.\n\nis.na(NA)\n\n[1] TRUE\n\nis.na(mean(c(1,4,NA)))\n\n[1] TRUE\n\nmean(c(1,4,NA),na.rm=T)\n\n[1] 2.5\n\n\nIl existe différents types d’objets qui sont détaillés dans les sections suivantes. Les fonctions is.&lt;type&gt;() permettent de tester si l’objet en paramètre est du type demandé."
  },
  {
    "objectID": "Introduction_R.html#type-vector",
    "href": "Introduction_R.html#type-vector",
    "title": "Bases du langage",
    "section": "Type vector",
    "text": "Type vector\nEn R l’unité de base dans les calculs est le vecteur c’est-à-dire que tout est vector de base (au minimum). Il n’existe pas de type scalaire. Un scalaire est simplement un vecteur de longueur 1.\n\na&lt;-3\na\n\n[1] 3\n\nclass(a)\n\n[1] \"numeric\"\n\nis.vector(a)\n\n[1] TRUE\n\n\n\nComme évoqué précédemment, la fonction de base la plus utilisée pour créer un vecteur est c commme concaténation :\n\n\nprix &lt;- c(150, 162, 155, 157); prix\n\n[1] 150 162 155 157\n\n\nLes autres fonctions de base pour créer des vecteurs sont :\n\nnumeric (vecteur de mode numeric)\ncharacter (vecteur de mode character)\nlogical (vecteur de mode logical)\n\nAttention dans un vecteur simple, tous les éléments doivent avoir le même mode:\n\nx &lt;- c(1,2, 'a', 'b'); x\n\n[1] \"1\" \"2\" \"a\" \"b\"\n\nmode(x)\n\n[1] \"character\"\n\nmode(prix)\n\n[1] \"numeric\"\n\n\nIl est également possible de donner une étiquette à chacun des éléments d’un vecteur.\n\nv &lt;- c(a=1,b=2,c=5)\nv\n\na b c \n1 2 5 \n\nv &lt;- c(1,2,5)\nnames(v) &lt;- c(\"a\",\"b\",\"c\")\nv\n\na b c \n1 2 5 \n\n\n\nIndiçage\nL’indiçage dans un vecteur se fait avec les crochets [ ]. On peut extraire un élément d’un vecteur par sa position ou par son étiquette.\n\nv\n\na b c \n1 2 5 \n\nv[2]\n\nb \n2 \n\nv[\"b\"]\n\nb \n2 \n\n\n\nprix[1] # Le premier indice est toujours 1\n\n[1] 150\n\nprix[c(1,3)]\n\n[1] 150 155\n\nprix[-c(1,2)] # pour extraire tous les éléments sauf le 1e et le 2e\n\n[1] 155 157\n\n\nOn peut aussi utiliser un vecteur d’indiçage booléen, les éléments extraits sont bien évidement ceux correspondant aux valeurs TRUE. Par exemple pour extraire les prix supérieurs à 156 :\n\nprix &gt; 156 # le vecteur booléen\n\n[1] FALSE  TRUE FALSE  TRUE\n\nprix[prix&gt;156] \n\n[1] 162 157\n\n\nUne alternative est donnée par la fonction which()qui rend les indices dont les éléments vérifient une condition logique :\n\nwhich(prix&gt;155)\n\n[1] 2 4\n\nprix[which(prix&gt;156)]\n\n[1] 162 157\n\n\nOn peut utiliser l’indiçage pour changer un élément:\n\nprix[1] &lt;- 0; prix\n\n[1]   0 162 155 157\n\n\nIl est possible d’extraire des éléments sur la base des étiquettes :\n\nnames(prix)\n\nNULL\n\nnames(prix) &lt;- c('model.1', 'model.2', 'model.3', 'model.4')\nprix\n\nmodel.1 model.2 model.3 model.4 \n      0     162     155     157 \n\nprix['model.3']\n\nmodel.3 \n    155 \n\n\nEn résumé, il existe quatre façons d’indicer un vecteur (matrice ou data frame) dans R :\n\navec un vecteur d’entiers positifs. Les éléments se trouvant aux positions correspondant aux entiers sont extraits du vecteur dans l’ordre :\n\n\nv &lt;- c(8,7,-9,2,-1)\nnames(v) &lt;- c(\"a\",\"b\",\"c\",\"d\",\"e\")\nv\n\n a  b  c  d  e \n 8  7 -9  2 -1 \n\nv[c(1,3)]\n\n a  c \n 8 -9 \n\n\n\navec un vecteur d’entiers négatifs. Les éléments se trouvant aux positions correspondant aux entiers sont alors éliminés du vecteur :\n\n\nv[-c(1,3)]\n\n b  d  e \n 7  2 -1 \n\n\n\navec un vecteur booléen. Le vecteur d’indiçage doit alors être de même longueur que le vecteur indicé. Seuls les éléments correspondant à une valeur TRUE sont extraits du vecteur :\n\n\nv&gt;0\n\n    a     b     c     d     e \n TRUE  TRUE FALSE  TRUE FALSE \n\nv[v&gt;0]\n\na b d \n8 7 2 \n\n\n\navec un vecteur de chaîne de caractères (utile pour extraire les éléments d’un vecteur à condition que ceux-ci soient nommés) :\n\n\nv[c(\"a\",\"c\")]\n\n a  c \n 8 -9 \n\n\n\n\nCréer des vecteurs de type numeric\nPour créer des vecteurs de type numeric, d’autres commandes peuvent être utiles :\nfonction :\n\n: pour des suites d’entiers consécutifs\n\nPour générer le vecteur des \\(n\\) premiers entiers on utilise la syntaxe 1:n\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n2:6\n\n[1] 2 3 4 5 6\n\n\nfonction seq\n\nseq pour des suites (plus générales) d’éléments\n\n\nseq(1:5)\n\n[1] 1 2 3 4 5\n\n\n\nseq(1,5,by=.5)\n\n[1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0\n\n\n\nseq(5,1,by=-.5)\n\n[1] 5.0 4.5 4.0 3.5 3.0 2.5 2.0 1.5 1.0\n\n\n\nseq(1,5,length=6)\n\n[1] 1.0 1.8 2.6 3.4 4.2 5.0\n\n\nfonction rep\n\nrep pour des éléments répétés\n\n\nrep(1:5,times=3)\n\n [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\n\n\n\nrep(1:5,each=2)\n\n [1] 1 1 2 2 3 3 4 4 5 5\n\n\n\nrep(1:5,each=2,times=3)\n\n [1] 1 1 2 2 3 3 4 4 5 5 1 1 2 2 3 3 4 4 5 5 1 1 2 2 3 3 4 4 5 5"
  },
  {
    "objectID": "Introduction_R.html#type-matrix-et-array",
    "href": "Introduction_R.html#type-matrix-et-array",
    "title": "Bases du langage",
    "section": "Type matrix et array",
    "text": "Type matrix et array\nLes matrices ne sont rien d’autre que des vecteurs dotés d’un attribut dimension de longueur 2 contenant les dimensions de la matrice. Tous les éléments d’une matrice ont donc le même mode. La fonction de base pour créer des matrices est matrix.\n\nmatrix(0,nrow=2,ncol=5)\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    0    0    0    0    0\n[2,]    0    0    0    0    0\n\n\n\nmatrix(1:10,2,5)\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n\n\nLa fonction matrix remplit naturellement la matrice par colonnes. L’argument byrow permet d’inverser l’ordre de remplissage.\n\nm &lt;- matrix(1:10,2,5,byrow=TRUE)\nm\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    6    7    8    9   10\n\n\nL’instruction dim donne les dimensions de la matrice : nombre de lignes et nombres de colonnes.\n\ndim(m)\n\n[1] 2 5\n\n\nOn utilise les [,] pour accéder aux éléments de la matrice, avec tout ce qui est pour les lignes avant la virgule, et pour les colonnes, après. On peut aussi ne donner que la position de l’élément dans le vecteur sous-jacent. Lorsqu’une dimension est omise dans les crochets, tous les éléments de cette dimension sont extraits.\n\nm[1,2] # element de la 1e ligne et 2e colonne\n\n[1] 2\n\nm[3]   # 3e element\n\n[1] 2\n\nm[1,]  # 1ere ligne\n\n[1] 1 2 3 4 5\n\nm[,2]  # 2e colonne\n\n[1] 2 7\n\nm[,-2] # pour extraire toutes les colonnes sauf la 2e\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    3    4    5\n[2,]    6    8    9   10\n\n\nDes fonctions permettent de fusionner des matrices ayant au moins une dimension identique :\n\nrbind : fusionne verticalement des matrices ayant le même nombre de colonnes\n\n\nrbind(m,m)\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    6    7    8    9   10\n[3,]    1    2    3    4    5\n[4,]    6    7    8    9   10\n\n\n\ncbind : fusionne horizontalement des matrices ayant le même nombre de lignes.\n\n\ncbind(m,m)\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n[1,]    1    2    3    4    5    1    2    3    4     5\n[2,]    6    7    8    9   10    6    7    8    9    10\n\n\nLa généralisation d’une matrice à plus de deux dimensions est un tableau array. La fonction de base pour créer des tableaux est array.\n\narray(1:24,dim=c(3,4,2))\n\n, , 1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n, , 2\n\n     [,1] [,2] [,3] [,4]\n[1,]   13   16   19   22\n[2,]   14   17   20   23\n[3,]   15   18   21   24"
  },
  {
    "objectID": "Introduction_R.html#opérations-sur-vecteurs-et-matrices-numériques",
    "href": "Introduction_R.html#opérations-sur-vecteurs-et-matrices-numériques",
    "title": "Bases du langage",
    "section": "Opérations sur vecteurs et matrices numériques",
    "text": "Opérations sur vecteurs et matrices numériques\nLes opérations sur les vecteurs sont effectuées élément par élément :\n\nv &lt;- c(3,4,1,6)\nv + 2\n\n[1] 5 6 3 8\n\nv * 2\n\n[1]  6  8  2 12\n\nv * v\n\n[1]  9 16  1 36\n\nv/2\n\n[1] 1.5 2.0 0.5 3.0\n\nv/v\n\n[1] 1 1 1 1\n\nv + v^2\n\n[1] 12 20  2 42\n\nsqrt(m)\n\n        [,1]     [,2]     [,3] [,4]     [,5]\n[1,] 1.00000 1.414214 1.732051    2 2.236068\n[2,] 2.44949 2.645751 2.828427    3 3.162278\n\nm * m\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    4    9   16   25\n[2,]   36   49   64   81  100\n\n\n\nx&lt;- c(1,2,3)\ny &lt;- c(4,5,6)\nx + y\n\n[1] 5 7 9\n\nx*y\n\n[1]  4 10 18\n\n\nSi les vecteurs impliqués dans une expression arithmétique ne sont pas de la même longueur, les plus courts sont récyclés de façon à correspondre au plus long vecteur.\n\n1:10 + 2\n\n [1]  3  4  5  6  7  8  9 10 11 12\n\n\nSi la longueur du plus long vecteur est un multiple de celle du (ou des) autres vecteurs, ces derniers sont recyclés un nombre entier de fois. Sinon, le plus court vecteur est recyclé un nombre fractionnaire de fois mais comme ce résultat est rarement souhaité, un avertissement est affiché.\n\n1:10 + 1:5 + c(2,4)\n\n [1]  4  8  8 12 12 11 11 15 15 19\n\n1:10 + rep(1:5,2) + rep(c(2,4),5)\n\n [1]  4  8  8 12 12 11 11 15 15 19\n\n1:10 + c(2, 4, 6)\n\n [1]  3  6  9  6  9 12  9 12 15 12\n\nm + v\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    4    3    6    5    8\n[2,]   10   13   12   15   14"
  },
  {
    "objectID": "Introduction_R.html#quelques-fonctions-utiles",
    "href": "Introduction_R.html#quelques-fonctions-utiles",
    "title": "Bases du langage",
    "section": "Quelques fonctions utiles",
    "text": "Quelques fonctions utiles\nLe langage R compte un très grand nombre de fonctions internes permettant de :\n\nextraire des éléments de vecteurs :\n\n\nhead(1:10)\n\n[1] 1 2 3 4 5 6\n\nhead(1:10,3)\n\n[1] 1 2 3\n\ntail(1:10,3)\n\n[1]  8  9 10\n\nunique(c(2,4,2,5,9,5,1))\n\n[1] 2 4 5 9 1\n\n\n\nordonner des vecteurs :\n\n\nsort(c(4,-1,2,6))\n\n[1] -1  2  4  6\n\nrank(c(4,-1,2,6))\n\n[1] 3 1 2 4\n\norder(c(4,-1,2,6))\n\n[1] 2 3 1 4\n\nrev(c(4,-1,2,6))\n\n[1]  6  2 -1  4\n\n\n\nrechercher des éléments dans un vecteur :\n\n\nx &lt;- c(4,-1,2,-3,6)\nwhich(x&gt;0)\n\n[1] 1 3 5\n\nwhich.min(x)\n\n[1] 4\n\nwhich.max(x)\n\n[1] 5\n\nmatch(2,x)\n\n[1] 3\n\n-1:2 %in% x\n\n[1]  TRUE FALSE FALSE  TRUE\n\n\n\narrondir les éléments d’un vecteur :\n\n\nx &lt;- 10*runif(10) # Permet de générer un vecteur aléatoire suivant une loi uniforme\nx\n\n [1] 1.2609623 2.4682853 8.7029881 1.7348370 0.3032269 3.3376511 1.1160957\n [8] 6.0393577 9.2793153 5.1077534\n\nround(x)\n\n [1] 1 2 9 2 0 3 1 6 9 5\n\nround(x,3)\n\n [1] 1.261 2.468 8.703 1.735 0.303 3.338 1.116 6.039 9.279 5.108\n\nfloor(x)\n\n [1] 1 2 8 1 0 3 1 6 9 5\n\nceiling(x)\n\n [1]  2  3  9  2  1  4  2  7 10  6\n\ntrunc(x)\n\n [1] 1 2 8 1 0 3 1 6 9 5\n\n\n\nfaire des opérations sur les matrices :\n\n\nx &lt;- matrix(1:4,nrow=2,ncol=2)\nx\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\nnrow(x)\n\n[1] 2\n\nncol(x)\n\n[1] 2\n\nrowSums(x)\n\n[1] 4 6\n\nrowMeans(x)\n\n[1] 2 3\n\nt(x)\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\ndiag(x)\n\n[1] 1 4\n\nx %*% x # Attention : produit matriciel !\n\n     [,1] [,2]\n[1,]    7   15\n[2,]   10   22"
  },
  {
    "objectID": "Introduction_R.html#type-factor",
    "href": "Introduction_R.html#type-factor",
    "title": "Bases du langage",
    "section": "Type factor",
    "text": "Type factor\nPuisque R est un langage orienté statistique, il dispose d’un type particulier permettant de coder des variables qualitatives, le type factor. Un facteur est un vecteur utilisé pour contenir une variable qualitative autrement dit c’est un vecteur avec une liste prédéfinie de valeurs que l’on appelle modalités, catégories ou niveaux (levels en R).\n\nville &lt;- c('paris', 'lyon', 'lyon', 'paris', 'nantes')\nfact.ville &lt;- as.factor(ville); fact.ville\n\n[1] paris  lyon   lyon   paris  nantes\nLevels: lyon nantes paris\n\nclass(fact.ville)\n\n[1] \"factor\"\n\nlevels(fact.ville)\n\n[1] \"lyon\"   \"nantes\" \"paris\" \n\n\nUn facteur a le mode numeric : en effet ses éléments sont stockés comme les entiers énumérant les différentes modalités :\n\nmode(fact.ville)\n\n[1] \"numeric\"\n\nas.numeric(fact.ville)\n\n[1] 3 1 1 3 2\n\n\nComme nous pouvons le voir en transformant la variable en numeric, chaque modalité est codée numériquement (en valeur entière de 1 à \\(n\\), \\(n\\) désignant le nombre total de niveaux) et garde la liste des niveaux en plus."
  },
  {
    "objectID": "Introduction_R.html#type-list",
    "href": "Introduction_R.html#type-list",
    "title": "Bases du langage",
    "section": "Type list",
    "text": "Type list\nLa liste est le mode de stockage le plus général de R, permettant de mettre ensemble des éléments de différents types et mode, y compris list. Cela permet donc d’emboîter des listes. La fonction de base pour créer des listes est list().\n\nl &lt;- list(1:5,month.abb,pi)\nl\n\n[[1]]\n[1] 1 2 3 4 5\n\n[[2]]\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\n[[3]]\n[1] 3.141593\n\n\nLa liste demeure un vecteur. On peut donc l’indicer avec [ ]. Cependant, cela retourne une liste contenant le ou les éléments indicés. C’est rarement ce que l’on souhaite. Pour indicer un élément d’une liste et n’obtenir que cet élément, il faut utiliser [[ ]]. On ne peut alors extraire qu’un seul élément à la fois.\n\nl[1]\n\n[[1]]\n[1] 1 2 3 4 5\n\nl[[1]]\n\n[1] 1 2 3 4 5\n\nl[[1]][1]\n\n[1] 1\n\n\nSi les éléments d’une liste sont nommés par des étiquettes, on peut alors utiliser l’opérateur $ à la place de [[ ]].\n\nl &lt;- list(x=1:5,mois=month.abb,pi=pi)\nl$x\n\n[1] 1 2 3 4 5\n\n\nLa fonction convertit une liste en vecteur simple.\n\nunlist(l)\n\n                x1                 x2                 x3                 x4 \n               \"1\"                \"2\"                \"3\"                \"4\" \n                x5              mois1              mois2              mois3 \n               \"5\"              \"Jan\"              \"Feb\"              \"Mar\" \n             mois4              mois5              mois6              mois7 \n             \"Apr\"              \"May\"              \"Jun\"              \"Jul\" \n             mois8              mois9             mois10             mois11 \n             \"Aug\"              \"Sep\"              \"Oct\"              \"Nov\" \n            mois12                 pi \n             \"Dec\" \"3.14159265358979\" \n\n\n\nchercher des éléments d’une liste :\n\n\nl = list(a = \"chaîne\", \n  b = 12, \n  c = 1:10, \n  d = month.abb, \n  e = list(x = 1:10, y = log(1:10)))\nFind(is.vector, l)\n\n[1] \"chaîne\"\n\nFind(is.vector, l, right=TRUE)\n\n$x\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$y\n [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101\n [8] 2.0794415 2.1972246 2.3025851\n\nPosition(is.vector, l)\n\n[1] 1\n\nFilter(is.vector, l)\n\n$a\n[1] \"chaîne\"\n\n$b\n[1] 12\n\n$c\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$d\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\n$e\n$e$x\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$e$y\n [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101\n [8] 2.0794415 2.1972246 2.3025851"
  },
  {
    "objectID": "Introduction_R.html#type-data.frame",
    "href": "Introduction_R.html#type-data.frame",
    "title": "Bases du langage",
    "section": "Type data.frame",
    "text": "Type data.frame\nLa classe d’un objet spécifie son comportement et donc sa façon d’interagir avec les opérations et les fonctions. L’exemple probablement le plus important est le data frame: une liste spéciale dont les éléments ont tous la même longueur. En effet, même si les vecteurs, matrices et listes sont les types d’objet les plus fréquement utilisés sous R, un grand nombre de procédures statistiques reposent sur les data.frame pour le stockage des données. Bien que visuellement similaire à une matrice (représentation sous la forme d’un tableau à deux dimensions dont les colonnes sont ses éléments), un data.frame est plus général puisque les colonnes peuvent être de modes différents. Typiquement, dans un data frame les colonnes représentent les variables et les ligne les observations.\nLa commande de base pour créer un data.frame est data.frame() ou as.data.frame() pour convertir un autre type d’objets en data frame. L’élément distinctif entre un data frame et une liste générale, c’est que tous les éléments du premier doivent être de même longueur et que, par conséquent, R les dispose en colonnes.La classe d’un data frame est différente de celle des listes génériques et les data frame ont un système d’indiçage qui n’existe pas pour les autres listes.\n\nid &lt;- c('id.453', 'id.452', 'id.455', 'id.459', 'id.458', 'id.456', 'id.450', 'id.451')\nage &lt;- c(19, 45, 67, 53, 17, 30, 27, 35)\nfumeur &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE)\nsex &lt;- c('f', 'f', 'h', 'h', 'f', 'h', 'f', 'f')\nma.bd &lt;- data.frame(Id=id, Age=age, Fumeur=fumeur, Sex=sex); ma.bd\n\n      Id Age Fumeur Sex\n1 id.453  19   TRUE   f\n2 id.452  45  FALSE   f\n3 id.455  67   TRUE   h\n4 id.459  53   TRUE   h\n5 id.458  17  FALSE   f\n6 id.456  30   TRUE   h\n7 id.450  27   TRUE   f\n8 id.451  35   TRUE   f\n\ndim(ma.bd); nrow(ma.bd); ncol(ma.bd)\n\n[1] 8 4\n\n\n[1] 8\n\n\n[1] 4\n\nnames(ma.bd)\n\n[1] \"Id\"     \"Age\"    \"Fumeur\" \"Sex\"   \n\n\nUn data frame étant une liste, on pourra extraire une colonne à l’aide de l’opérateur $ précédé par le nom du data frame et suivi par le nom de la colonne (ou variable), ou utiliser l’opérateur []\n\nma.bd$Sex # une colonne de caractères est transformée automatiquement en facteur\n\n[1] \"f\" \"f\" \"h\" \"h\" \"f\" \"h\" \"f\" \"f\"\n\nma.bd[,2]\n\n[1] 19 45 67 53 17 30 27 35\n\nma.bd$Age[ma.bd$Fumeur==FALSE]\n\n[1] 45 17\n\n\nLes colonnes sont directement accessibles dans l’espace de travail (sans devoir taper le nom du data frame et le $) après avoir attaché le data frame. En effet, on peut travailler directement avec les colonnes d’un data frame en travailler sur leur noms à l’aide de la fonction attach(cela les rend visibles dans l’espace de travail). Il est possible d’annuler cela avec detach.\n\nattach(ma.bd)\nAge\n\n[1] 19 45 67 53 17 30 27 35\n\ndetach(ma.bd)\n\nPour afficher seulement les six premières lignes:\n\nhead(ma.bd)\n\n      Id Age Fumeur Sex\n1 id.453  19   TRUE   f\n2 id.452  45  FALSE   f\n3 id.455  67   TRUE   h\n4 id.459  53   TRUE   h\n5 id.458  17  FALSE   f\n6 id.456  30   TRUE   h\n\n\nPour afficher seulement les six dernières lignes:\n\ntail(ma.bd)\n\n      Id Age Fumeur Sex\n3 id.455  67   TRUE   h\n4 id.459  53   TRUE   h\n5 id.458  17  FALSE   f\n6 id.456  30   TRUE   h\n7 id.450  27   TRUE   f\n8 id.451  35   TRUE   f\n\n\nLes jeux de données contenus dans R sont (presque) toujours des data.frame.\n\ndata(mtcars)\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\nVous pouvez utiliser la fonction View(mtcars) pour visualiser votre jeu de données.\n\nmtcars[1,]\n\n          mpg cyl disp  hp drat   wt  qsec vs am gear carb\nMazda RX4  21   6  160 110  3.9 2.62 16.46  0  1    4    4\n\n\n\nmtcars$mpg\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\nmtcars[,\"mpg\"]\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\n\n\nmtcars[\"Mazda RX4\",]\n\n          mpg cyl disp  hp drat   wt  qsec vs am gear carb\nMazda RX4  21   6  160 110  3.9 2.62 16.46  0  1    4    4"
  },
  {
    "objectID": "Introduction_R.html#petit-retour-sur-le-type-factor-sur-le-jeu-de-données-iris",
    "href": "Introduction_R.html#petit-retour-sur-le-type-factor-sur-le-jeu-de-données-iris",
    "title": "Bases du langage",
    "section": "Petit retour sur le type factor sur le jeu de données iris",
    "text": "Petit retour sur le type factor sur le jeu de données iris\n\ndata(iris)\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\nlevels(iris$Species)\n\n[1] \"setosa\"     \"versicolor\" \"virginica\" \n\niris$Species[1:5]\n\n[1] setosa setosa setosa setosa setosa\nLevels: setosa versicolor virginica\n\nas.numeric(iris$Species[1:5])\n\n[1] 1 1 1 1 1\n\nas.character(iris$Species[1:5])\n\n[1] \"setosa\" \"setosa\" \"setosa\" \"setosa\" \"setosa\"\n\n\nLe plus souvent on travaille sur des jeux de données que l’on importe c’est-à-dire qui ne sont pas directement disponibles dans R."
  },
  {
    "objectID": "Introduction_R.html#en-tête",
    "href": "Introduction_R.html#en-tête",
    "title": "Bases du langage",
    "section": "En-tête",
    "text": "En-tête\nLors de la création d’un nouveau document R markdown, vous devez voir apparaître en début de document une partie d’en-tête, comme ci-dessous, au format YAML.\n---\ntitle: \"Titre\"\nauthor: \"Romu\"\ndate: \"23/01/2023\"\noutput: html_document\n---\nDans cet en-tête, nous pouvons donc définir le titre, éventuellement un sous-titre (avec subtitle:), le ou les auteurs, la date et des options de sortie. Pour le moment, nous allons garder la sortie au format HTML. Pour passer au format PDF, il faut écrire pdf_document dans output (ainsi qu’avoir \\(\\LaTeX\\) installé sur sa machine - ce qui n’est pas le cas à l’IUT). Pour créer un document de type Word, il faut choisir word_document pour output.\nIl y a d’autres possibilités de sortie, ainsi que la possibilité d’ajouter d’autres paramètres de sortie, que nous ne verrons pas ici.\n\nChunk\nUn chunk sera donc un bloc de commande R (ou autre langage possible) qui sera exécuté par R Studio. Pour cela, il faut indiquer sur la première ligne le langage utilisé. Pour R, voici donc un exemple simple\n```{r}\n# code R\nsummary(mtcars)\n```\nDans le document sera donc intégré à la fois le code, ainsi que le résultat de son exécution. L’exemple donnera donc\n\n# code R\nsummary(mtcars)\n\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n\n\nIl est possible de nommer le chunk en lui donnant un label (sans espace, sans accent) après r dans les {}. Ceci est intéressant surtout dans l’étape de développement, car si une erreur arrive lors de l’exécution, il sera plus facile de retrouver dans quel chunk est l’erreur (indiqué lors de l’affichage de l’erreur).\nDe plus, il est possible de mettre des options dans le chunk, toujours dans les {}, après une \",\". Voici quelques options classiques et utiles (avec leur valeur par défaut indiquée, si elle existe) :\n\ninclude = TRUE : si FALSE, le code est exécuté mais il n’est pas inclus dans le document (ni le code, ni son résultat)\necho = TRUE : si FALSE, le code n’est pas affiché mais bien exécuté\neval = TRUE : si FALSE, le code est affiché mais n’est pas exécuté\nresults = 'markup' : permet de définir comment le résultat est affiché (intéressant pour les tableaux, cf plus loin)\nfig.cap : titre du graphique produit\n\nIl est possible de mettre plusieurs options, toutes séparées par des \",\".\n\n\nQuelques exemples\nDans la suite, voici quelques exemples de chunks avec options. Regardez le source pour mieux comprendre le fonctionnement.\nTout d’abord, on importe les données iris.txt, mais ce genre de code n’est souvent pas à inclure, dans le sens où l’on ne veut ni l’afficher, ni voir de résultat.\nEnsuite, la librairie knitr contient une fonction kable() permettant d’afficher un data.frame au format markdown. Cela permet d’avoir un résultat plus lisible qu’une sortie de console R classique.\n\nknitr::kable(head(Iris))\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n\n\n\nEnfin, on peut vouloir faire un graphique, ce qui pourrait donner ce qui suit. Pour ce genre de présentation, nous pouvons décider de ne pas afficher le code permettant de les obtenir.\n\n\n\n\n\nRépartition de la longeur du sépale en fonction du type d’iris"
  },
  {
    "objectID": "Introduction_R.html#inline-chunk",
    "href": "Introduction_R.html#inline-chunk",
    "title": "Bases du langage",
    "section": "Inline chunk",
    "text": "Inline chunk\nOn peut faire des chunks en ligne en encadrant le code avec des ` et en commencant le code par un r. Par exemple, on peut dire que dans le jeu de données Iris sont présentés 150 individus et 5 variables."
  },
  {
    "objectID": "Introduction_R.html#paramètres-globaux-des-chunks",
    "href": "Introduction_R.html#paramètres-globaux-des-chunks",
    "title": "Bases du langage",
    "section": "Paramètres globaux des chunks",
    "text": "Paramètres globaux des chunks\nIl est possible de déterminer des paramètres globaux pour tous les blocs chunks du document (sauf paramètres locaux précisés). Ceci doit se faire comme suit, avec la fonction set() de l’objet opts_chunk de la librairie knitr. Il est par exemple possible de définir echo=FALSE pour n’avoir aucun code apparaissant dans le document.\nknitr::opts_chunk$set(...)\nDans votre document, penser à nommer chaque chunk différement. Et n’hésiter pas à commenter le document pour le rendre plus conforme à ce qu’on pourrait vouloir produire comme document.\nVous trouverez sur le site rmarkdown beaucoup d’informations et de compléments sur cette librairie. Beaucoup sont résumées dans ce document."
  },
  {
    "objectID": "Introduction_R.html#schémas-de-programmation",
    "href": "Introduction_R.html#schémas-de-programmation",
    "title": "Bases du langage",
    "section": "Schémas de programmation",
    "text": "Schémas de programmation\n\nChoix (impliquant des conditions)\n\nif (condition) branche.vraie else branche.fausse : si condition est vraie, branche.vraie est exécutée, sinon ce sera branche.fausse\n\n\nx &lt;- -2\nif (x&lt;0){\n  cat(\"x est négatif\")\n} else {\n  cat(\"x est positif\")\n}\n\nx est négatif\n\n\n\nwhile (condition) expression : exécute expression tant que condition est vraie\n\n\nx &lt;- 10\nwhile (x&gt;0){\n  x &lt;- x-1\n}\nx\n\n[1] 0\n\n\n\n\nItération ou boucle\n\nfor (variable in suite) expression : exécute expression successivement pour chaque valeur de variable contenue dans suite\n\n\nx &lt;- 0\nfor (i in (1:10)){\n  x &lt;- x+1\n}\nx\n\n[1] 10"
  },
  {
    "objectID": "Introduction_R.html#fonctions-définies-par-lusager",
    "href": "Introduction_R.html#fonctions-définies-par-lusager",
    "title": "Bases du langage",
    "section": "Fonctions définies par l’usager",
    "text": "Fonctions définies par l’usager\nOn définit une nouvelle fonction avec la syntaxe suivante : fun &lt;- function(arguments) expression où\n\nfun est le nom de la fonction\narguments est la liste des arguments, séparés par des virgules\nexpression constitue le corps de la fonction, soit une expression ou un groupe d’expressions réunies par des accolades.\n\nLa plupart des fonctions sont écrites dans le but de retourner un résultat. Ici, une fonction retourne tout simplement le résultat de la dernière expression du corps de la fonction. On peut utiliser la fonction return() pour retourner un résultat qui n’est pas à la dernière ligne de la fonction.\nExemple:\n\nma.fonction &lt;- function(x,y=10){ # la valeur par défaut de y est 10\n  z=x-y\n  return(z)\n}\nma.fonction(2)\n\n[1] -8\n\nma.fonction(2,4)\n\n[1] -2\n\nma.fonction(y=1, x=4)\n\n[1] 3\n\n\nToute variable définie dans une fonction est locale et n’apparaît pas dans l’espace de travail: essayer d’exécuter\n\nz\n\n\nMoyenne &lt;- function(x){\n  if (mode(x)==\"numeric\"){\n    M &lt;- mean(x)\n    return(M)\n  } else {\n    cat(\"x n'est pas numérique\")\n  }\n}\nMoyenne(c(1,3,5))\n\n[1] 3\n\nMoyenne(c(\"a\",\"b\",\"c\"))\n\nx n'est pas numérique"
  },
  {
    "objectID": "Introduction_R.html#fonction-apply",
    "href": "Introduction_R.html#fonction-apply",
    "title": "Bases du langage",
    "section": "Fonction apply()",
    "text": "Fonction apply()\nLa fonction apply() sert à appliquer une fonction quelconque sur une partie d’une matrice, ou plus généralement, d’un tableau. La syntaxe de la fonction est la suivante apply(X, MARGIN, FUN, ...) où\n\nX est une matrice ou un tableau\nMARGIN est un vecteur d’entiers contenant la (ou les) dimensions de la matrice ou tableau sur lesquelles la fonction doit s’appliquer\nFUN est la fonction à appliquer.\n\nLorsque X est une matrice, apply sert principalement à calculer des sommaires par ligne (dimension 1) ou par colonne (dimension 2).\n\nx &lt;- matrix(sample(1:100, 20, rep = TRUE), 5, 4)\nx\n\n     [,1] [,2] [,3] [,4]\n[1,]   30   92   27   20\n[2,]   27   65   18   62\n[3,]   21    9   18   35\n[4,]   80   94   54   68\n[5,]   23    4    4   88\n\napply(x,1,var)\n\n[1] 1117.5833  575.3333  116.2500  290.6667 1588.2500\n\napply(x,2,min)\n\n[1] 21  4  4 20"
  },
  {
    "objectID": "Introduction_R.html#fonctions-lapply-et-sapply",
    "href": "Introduction_R.html#fonctions-lapply-et-sapply",
    "title": "Bases du langage",
    "section": "Fonctions lapply() et sapply()",
    "text": "Fonctions lapply() et sapply()\nLes fonctions lapply() et sapply() sont similaires à la fonction apply() puisqu’elles permettent d’appliquer une fonction aux éléments d’une structure (vecteur ou liste). Leur syntaxe est similaire lapply(X,FUN,...), sapply(X,FUNC,...).\nLa fonction lapply() applique une fonction FUN à tous les éléments d’un vecteur ou d’une liste X et retourne le résultat sous la forme d’une liste. La fonction sapply() est similaire, sauf que le résultat est retourné sous forme de vecteur, si possible. Le résultat est donc simplifié par rapport à celui de lapply().\n\nx &lt;- lapply(5:8, sample, x = 1:10)\nx\n\n[[1]]\n[1] 10  6  2  1  5\n\n[[2]]\n[1] 7 5 1 8 6 3\n\n[[3]]\n[1]  3 10  9  5  2  6  8\n\n[[4]]\n[1]  1 10  2  4  9  7  5  3\n\nlapply(x,mean)\n\n[[1]]\n[1] 4.8\n\n[[2]]\n[1] 5\n\n[[3]]\n[1] 6.142857\n\n[[4]]\n[1] 5.125\n\nsapply(x,mean)\n\n[1] 4.800000 5.000000 6.142857 5.125000\n\n\nSi le résultat de chaque application de la fonction est un vecteur et que les vecteurs sont tous de la même longueur, alors sapply retourne une matrice, remplie comme toujours par colonne :\n\nx &lt;- lapply(rep(5, 3), sample, x = 1:10)\nx\n\n[[1]]\n[1] 1 4 2 5 6\n\n[[2]]\n[1]  8  2 10  4  9\n\n[[3]]\n[1] 7 6 3 8 2\n\nsapply(x,sort)\n\n     [,1] [,2] [,3]\n[1,]    1    2    2\n[2,]    2    4    3\n[3,]    4    8    6\n[4,]    5    9    7\n[5,]    6   10    8"
  },
  {
    "objectID": "Introduction_R.html#fonction-particulière",
    "href": "Introduction_R.html#fonction-particulière",
    "title": "Bases du langage",
    "section": "Fonction particulière",
    "text": "Fonction particulière\nOn a souvent besoin d’utiliser une fonction spécifique dans les fonctions comme lapply() ou sapply(). On peut par exemple la définir au préalable et l’utiliser comme une autre.\n\nl = list(a = \"chaîne\", \n  b = 12, \n  c = 1:10, \n  d = head(mtcars), \n  e = list(x = 1:10, y = log(1:10)))\n\ninfoElement &lt;- function(e) {\n    return(c(classe = class(e), longueur = length(e)))\n}\n\nsapply(l, infoElement)\n\n         a           b         c         d            e     \nclasse   \"character\" \"numeric\" \"integer\" \"data.frame\" \"list\"\nlongueur \"1\"         \"1\"       \"10\"      \"11\"         \"2\"   \n\n\nIl est également possible de déclarer directement la fonction dans les fonctions lapply() et sapply(). On parle alors de fonction anonyme.\n\nsapply(l, function(e) {\n  return(c(classe = class(e), longueur = length(e)))\n})\n\n         a           b         c         d            e     \nclasse   \"character\" \"numeric\" \"integer\" \"data.frame\" \"list\"\nlongueur \"1\"         \"1\"       \"10\"      \"11\"         \"2\""
  },
  {
    "objectID": "Introduction_R.html#introduction-à-fa-brands-r-project",
    "href": "Introduction_R.html#introduction-à-fa-brands-r-project",
    "title": "Bases du langage",
    "section": "",
    "text": "Dans ce cours d’introduction à R, nous aborderons les principes fondamentaux du langage de programmation R ainsi que ses applications dans l’analyse de données.\nLe cours précédent a débuté par une présentation de l’environnement de développement RStudio. Ici, nous examinerons les concepts clés de la programmation en R, tels que les variables, les fonctions, les boucles et les conditions. Nous acquerrons également des compétences dans la manipulation des structures de données courantes telles que les vecteurs, les matrices et les data frames. De plus, nous traiterons des sujets tels que l’importation et l’exportation de données, ainsi que le nettoyage et la transformation des jeux de données.\nCe cours d’introduction fournit les bases nécessaires pour débuter la programmation en R.\nLes cours à venir se concentreront sur une introduction aux techniques de visualisation de données à l’aide de graphiques de base, ainsi que sur l’utilisation de packages populaires tels que ggplot2."
  },
  {
    "objectID": "posts/Scrapping/index.html",
    "href": "posts/Scrapping/index.html",
    "title": "Scraping et base Excel",
    "section": "",
    "text": "Le scraping (ou web scraping) est le processus de collecte automatique de données à partir de sites web en utilisant des logiciels ou des scripts. Il permet d’extraire des informations telles que des textes, des images, des prix, etc. à partir de pages web. Dans notre exemple, nous utiliserons un script R pour que cette collecte nous crée notre base de données\nNous allons étudier des données NBA de la saison 2024 issues du site web : https://www.basketball-reference.com/leagues/NBA_2024.html\nLa première table “Eastern Conference” comprend les statistiques des équipes de la conférence Est de la NBA. Nous allons explorer les différentes colonnes de la table pour comprendre les performances des équipes, les classements et les tendances dans la conférence Est.\nNotre scraping commencera par l’import des données sous forme de table :\nlibrary(rvest)\nlibrary(ggplot2)\nlibrary(gt)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\nurl &lt;- \"https://www.basketball-reference.com/leagues/NBA_2024.html\"   # recupération de l'url à scraper\ntable &lt;- url %&gt;% \n  read_html() %&gt;%\n  html_table()    # import des données sous forme de table\n\n# Tune liste de tous les tableaux importés est créée, nous allons nous intérésser au tableau n°1\nstats_2024 &lt;- as.data.frame(table[11])      # affectation du nom \"stats_2024\" au tableau 11 convertit en dataframe (DF)\n\n# Définir les noms des colonnes en utilisant la première ligne du tableau car les intitulés de colonne sont décalés\ncolnames(stats_2024) &lt;- stats_2024[1, ]\n\n# Supprimer la première ligne du tableau\nstats_2024 &lt;- stats_2024[-1, ]"
  },
  {
    "objectID": "posts/Scrapping/index.html#markdown-tables",
    "href": "posts/Scrapping/index.html#markdown-tables",
    "title": "Scraping et base Excel",
    "section": "Markdown Tables",
    "text": "Markdown Tables\nThe most commonly used markdown table is known as a pipe table. Pipe tables support specifying per column alignment as well as captions. For example:\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 12      | 12   |    12 |   12   |\n| 123     | 123  |   123 |  123   |\n| 1       | 1    |     1 |   1    |\n\n: Demonstration of pipe table sytnax\nHere is the table rendered to HTML:\n\nDemonstration of pipe table syntax\n\n\nDefault\nLeft\nRight\nCenter\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1\n\n\n\n\nCaption Location\nBy default, table captions are positioned above tables. You can modify this behavior using the tbl-cap-location option. For example:\n---\ntbl-cap-location: top\n---"
  },
  {
    "objectID": "posts/Scrapping/index.html#explicit-column-widths",
    "href": "posts/Scrapping/index.html#explicit-column-widths",
    "title": "Scraping et base Excel",
    "section": "Explicit Column Widths",
    "text": "Explicit Column Widths\nBeyond standard pipe table syntax for expressing column width, you can also explicitly specify columns widths using the tbl-colwidths attribute or document-level option. For an individual markdown table, add the attribute after the caption. For example:\n| fruit  | price  |\n|--------|--------:\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n\n: Fruit prices {tbl-colwidths=\"[75,25]\"}\nNote that this option is specified at the top level so that it can be shared by both PDF and HTML formats. If you are only targeting a single format you can place it alongside other format specific options.\nValid values for the caption location include:\n\n\n\nValue\nDescription\n\n\n\n\ntop\nPosition the caption above the table.\n\n\nbottom\nPosition the caption below the table.\n\n\nmargin\nPosition the caption in the margin."
  },
  {
    "objectID": "posts/Scrapping/index.html#computations",
    "href": "posts/Scrapping/index.html#computations",
    "title": "Scraping et base Excel",
    "section": "Computations",
    "text": "Computations\nAll of the options described above work for tables produced by executable code cells. For example, here we apply the tbl-cap, tbl-colwidths and tbl-caption-location options to a code cell:\n```{r}\n#| tbl-cap: \"Cars\"\n#| tbl-colwidths: [60,40]\n#| tbl-cap-location: margin\n\nlibrary(knitr)\nkable(head(cars))\n```\nIn addition to the above, which focused on some of the features of Quarto when writing pipe tables in markdown, you can also author tables using grid syntax. You review the documentation. for more detail."
  },
  {
    "objectID": "packages/gt/gt.html",
    "href": "packages/gt/gt.html",
    "title": "gt",
    "section": "",
    "text": "Le package gt permet de créer des tableaux de données à partir de différents types de données, notamment des dataframes, les tibbles et les data tables, des matrices et des listes. Il est également possible de créer des tableaux à partir de données externes, telles que des fichiers CSV ou des bases de données.\nIci, nous allons nous concentrer sur la création de tableaux à partir de données saisies dans R."
  },
  {
    "objectID": "packages/gt/gt.html#création-dun-tableau-simple",
    "href": "packages/gt/gt.html#création-dun-tableau-simple",
    "title": "gt",
    "section": "Création d’un tableau simple",
    "text": "Création d’un tableau simple\n\n\nlibrary(gt)\n\n# création du dataframe \"joueur\"\njoueur &lt;- data.frame( \n  Nom = c(\"Curry\", \"James\", \"Harden\", \"Durant\",\"Wemby\", \"Tatum\", \"Brown\"),\n  Taille = paste(c(1.88, 2.06, 1.96, 2.08, 2.24, 2.03, 1.98), \"m\")\n)\n\n# création du tableau de base gt\ntableau &lt;- joueur %&gt;%\n  gt() \n\n\n\n\n\n\n\n\n  \n    \n    \n      Nom\n      Taille\n    \n  \n  \n    Curry\n1.88 m\n    James\n2.06 m\n    Harden\n1.96 m\n    Durant\n2.08 m\n    Wemby\n2.24 m\n    Tatum\n2.03 m\n    Brown\n1.98 m\n  \n  \n  \n\n\n\n\n\n\nTravail effectué : chargement du package gt, puis création d’un tableau de base à partir d’un dataframe en utilisant la fonction gt(). Le tableau est ensuite stocké dans la variable tableau et affiché dans la console.\nVoici un exemple montrant comment personnaliser un tableau gt avec des couleurs et des en-têtes de colonnes :\n\n\n\n# Petit rappel du dataframe \"joueur\"\njoueur &lt;- data.frame(\n  Nom = c(\"Curry\", \"James\", \"Harden\", \"Durant\", \"Wemby\", \"Tatum\", \"Brown\"),\n  Taille = paste(c(1.88, 2.06, 1.96, 2.08, 2.24, 2.03, 1.98), \"m\")\n)\n\n# Ajout d'une palette de couleurs, de nouvelles etiquettes de colonne, d'un titre et des sous-titres\ntableau &lt;- joueur %&gt;%\n  gt() %&gt;%\n  data_color(columns = Taille,\n             palette = \"viridis\",\n             reverse = TRUE) %&gt;%\n  cols_label(Nom = \"Joueur\",\n             Taille = \"Taille (m)\") %&gt;%\n  tab_header(title = \"Joueurs NBA\",\n             subtitle = \"Taille en mètres...🙂\")\n\n\n\n\n\n\n\n\n\n  \n    \n      Joueurs NBA\n    \n    \n      Taille en mètres...🙂\n    \n    \n      Joueur\n      Taille (m)\n    \n  \n  \n    Curry\n1.88 m\n    James\n2.06 m\n    Harden\n1.96 m\n    Durant\n2.08 m\n    Wemby\n2.24 m\n    Tatum\n2.03 m\n    Brown\n1.98 m\n  \n  \n  \n\n\n\n\n\n\nTravail effectué : utilisation de data_color pour ajouter des couleurs aux données de la colonne “Taille” , tab_header pour personnaliser le titre et le sous-titre du tableau et cols_label pour modifier les étiquettes de colonnes.\nCette petite introduction n’est qu’un très petit aperçu des possibilités de ce package. Nous tacherons d’aller un peu plus loin dans les prochaines lignes."
  },
  {
    "objectID": "packages/gt/gt.html#agrégation",
    "href": "packages/gt/gt.html#agrégation",
    "title": "gt",
    "section": "Agrégation",
    "text": "Agrégation\nAgrégation de données Le package gt vous permet également d’agrégation de données pour résumer les informations dans le tableau. Voici comment vous pouvez agréger des données dans un tableau gt :\n\n\n\n# Création d'un tableau de base\ndata &lt;- data.frame(\n  Catégorie = c(\"Fruits\", \"Légumes\", \"Fruits\", \"Légumes\"),\n  Produit = c(\"Pommes\", \"Carottes\", \"Bananes\", \"Brocolis\"),\n  Quantité = c(10, 15, 8, 12)\n)\n\ntableau &lt;- data %&gt;%\n  gt()\n\n# Agrégation de données\ntableau_agrégé &lt;- tableau %&gt;%\n  grand_summary_rows(\n    columns = Quantité,\n    fns = list(Total = \"sum\")\n  )\n\n\n\n\n\n\n\n\n\n  \n    \n    \n      \n      Catégorie\n      Produit\n      Quantité\n    \n  \n  \n    \nFruits\nPommes\n10\n    \nLégumes\nCarottes\n15\n    \nFruits\nBananes\n8\n    \nLégumes\nBrocolis\n12\n    sum\n—\n—\n45\n  \n  \n  \n\n\n\n\n\n\nDans cet exemple, nous avons utilisé grand_summary_rows pour agréger les données dans la colonne “Quantité” en calculant la somme totale. Cela ajoute une ligne de résumé au tableau.\nLe groupement et l’agrégation de données dans le package gt sont utiles pour organiser et résumer des informations complexes dans vos tableaux, en permettant une visualisation plus claire des données."
  },
  {
    "objectID": "packages/gt/gt.html#sauvegarde-du-tableau",
    "href": "packages/gt/gt.html#sauvegarde-du-tableau",
    "title": "gt",
    "section": "Sauvegarde du tableau",
    "text": "Sauvegarde du tableau\nSauvegarde en HTML Vos tableaux au format HTML, vous permettent de partager vos résultats de manière conviviale sur le web. Voici comment vous pouvez sauvegarder un tableau gt en HTML :\n\n# Création du tableau à partir du dataset mtcars\ndf_mtcars &lt;- mtcars %&gt;% head(10) %&gt;% gt()\n\n# Sauvegarder le tableau en format HTML\ngtsave(df_mtcars, file = \"tableau_cars.html\")\n\nDans cet exemple, nous avons créé un tableau de base avec le package gt, puis utilisé la fonction gtsave pour sauvegarder le tableau. Vous pouvez spécifier le nom du fichier HTML dans l’argument file.\nExportation en d’autres formats Le package gt vous permet également d’exporter vos tableaux dans d’autres formats, tels que PDF et Excel. Il est important de noter que pour exporter en PDF et Excel, vous devrez peut-être installer et charger d’autres packages R spécifiques à ces formats.. Assurez-vous d’installer et de charger les packages nécessaires avant d’effectuer l’exportation vers ces formats.\nL’exportation vers différents formats permet de partager vos tableaux avec d’autres de manière flexible, en fonction de leurs besoins."
  },
  {
    "objectID": "packages/gt/gt.html#exemple-analyse-des-ventes-de-pizzas",
    "href": "packages/gt/gt.html#exemple-analyse-des-ventes-de-pizzas",
    "title": "gt",
    "section": "Exemple : Analyse des ventes de pizzas",
    "text": "Exemple : Analyse des ventes de pizzas\nIci nous allons reprendre un code de la documentation  du package gt et l’adapter à notre cas d’étude. Nous utiliserons le dataset pizzaplace qui contient les données de vente d’une pizzeria.\nVous trouverez dans le code suivant de nombreuses fonctions du package gt qui permettent de personnaliser le tableau. Les commentaires dans le code vous permettront de comprendre le rôle de chaque fonction.\n\nfinal &lt;- pizzaplace |&gt;\n  dplyr::group_by(type, size) |&gt;  # regroupement par type et taille de pizza\n  dplyr::summarize(  # données aggrégées : nombre de pizza vendues et gain (somme des prix)\n    nb_vendu= dplyr::n(),\n    gain = sum(price),\n    .groups = \"drop_last\"\n  ) |&gt;\n  dplyr::group_by(type) |&gt;  # regroupement par type de pizza\n  dplyr::mutate(part_vendu = nb_vendu / sum(nb_vendu)) |&gt;  # part des ventes pour chaque type de pizza en divisant le nombre de ventes par le total des ventes pour chaque type\n  dplyr::mutate(size = factor(  # conversion de la taille de pizza en facteur pour pouvoir la trier\n    size, levels = c(\"S\", \"M\", \"L\", \"XL\", \"XXL\"))\n  ) |&gt;\n  dplyr::arrange(type, size) |&gt;  # tri par type de pizza (type) et taille de pizza (size).\n  gt(  # conversion en tableau gt\n    rowname_col = \"size\",\n    groupname_col = \"type\"\n  ) |&gt; tab_header(title = \"Ventes de pizzas et gains - 2015\",\n                  subtitle = \"Données de la pizzeria Pizzaplace\") |&gt;\n  cols_label(  # renommage des colonnes\n    nb_vendu = \"Nombre de ventes\",\n    gain = \"Gains\",\n    part_vendu = \"Part des ventes\"\n  ) |&gt;\n  fmt_integer(columns = nb_vendu) |&gt;  # formatage des nombres de ventes en entiers\n  fmt_currency(columns = gain,  # formatage des gains en euros\n               currency = \"euro\",\n               placement = \"right\",\n               incl_space = TRUE) |&gt;\n  fmt_percent(  # formatage des pourcentages avec une décimale\n    columns = part_vendu,\n    decimals = 1\n  ) |&gt;\n  cols_merge(  # fusion des colonnes \"size\" et \"part_vendu\" pour afficher la taille et la part de vente de cette pizza dans la même cellule\n    columns = c(size, part_vendu),\n    pattern = \"{1} ({2})\"\n  ) |&gt;\n  cols_align(align = \"left\", columns = stub()) |&gt; # alignement à gauche des colonnes\n  data_color(  # coloration des données en fonction de leur valeur\n    method = \"numeric\",\n    palette = \"ggsci::purple_material\"\n  )\n\nLe tableau final reprend les données de ventes de pizzas et les agrège par type de pizza. Les données sont ensuite triées par type de pizza et taille de pizza.\n\nCi-dessous, les 3 stades de la création du tableau :\n\n.\n\n\n20 lignes aléatoires du dataset pizzaplace\n\n\n            id       date     time         name size    type price\n1  2015-018052 2015-11-04 13:47:41    ital_supr    M supreme 16.50\n2  2015-003907 2015-03-07 18:06:44     cali_ckn    S chicken 12.75\n3  2015-012829 2015-08-02 17:21:25   southw_ckn    L chicken 20.75\n4  2015-015615 2015-09-18 13:50:36   veggie_veg    M  veggie 16.00\n5  2015-008454 2015-05-22 12:50:41 mediterraneo    L  veggie 20.25\n6  2015-008465 2015-05-22 16:01:51   spicy_ital    L supreme 20.75\n7  2015-009204 2015-06-03 21:48:26     thai_ckn    M chicken 16.75\n8  2015-003295 2015-02-25 12:44:09  ital_cpcllo    L classic 20.50\n9  2015-004000 2015-03-09 11:34:01     thai_ckn    L chicken 20.75\n10 2015-006697 2015-04-23 12:15:04     mexicana    L  veggie 20.25\n11 2015-014390 2015-08-28 19:28:51   spicy_ital    L supreme 20.75\n12 2015-021092 2015-12-24 18:53:52      bbq_ckn    L chicken 20.75\n13 2015-014125 2015-08-24 12:20:13    ckn_pesto    S chicken 12.75\n14 2015-002024 2015-02-03 16:04:02  soppressata    S supreme 12.50\n15 2015-013400 2015-08-11 22:28:52     hawaiian    S classic 10.50\n16 2015-006194 2015-04-14 19:13:18  classic_dlx    M classic 16.00\n17 2015-020232 2015-12-10 14:19:58      bbq_ckn    S chicken 12.75\n18 2015-008145 2015-05-16 18:11:45   southw_ckn    L chicken 20.75\n19 2015-014473 2015-08-29 22:22:07     mexicana    L  veggie 20.25\n20 2015-020543 2015-12-15 17:34:31    the_greek   XL classic 25.50\n\n\n\n\nRegroupement type et taille de pizza  \n(nombre de pizzas, somme des prix et part des ventes)\n\n\n      type size nb_vendu      gain  part_vendu\n1  chicken    S     2224  28356.00 0.201266968\n2  chicken    M     3894  65224.50 0.352398190\n3  chicken    L     4932 102339.00 0.446334842\n4  classic    S     6139  69870.25 0.412345513\n5  classic    M     4112  60581.75 0.276195594\n6  classic    L     4057  74518.50 0.272501343\n7  classic   XL      552  14076.00 0.037076840\n8  classic  XXL       28   1006.60 0.001880709\n9  supreme    S     3377  47463.50 0.281721865\n10 supreme    M     4046  66475.00 0.337532327\n11 supreme    L     4564  94258.50 0.380745808\n12  veggie    S     2663  32386.75 0.228603314\n13  veggie    M     3583  57101.00 0.307580050\n14  veggie    L     5403 104202.70 0.463816637\n\n\n\n\nTableau final des données de ventes\n\n\n\n\n\n\n  \n    \n      Ventes de pizzas et gains - 2015\n    \n    \n      Données de la pizzeria Pizzaplace\n    \n    \n      \n      Nombre de ventes\n      Gains\n    \n  \n  \n    \n      chicken\n    \n    S (20.1%)\n2,224\n28,356.00 €\n    M (35.2%)\n3,894\n65,224.50 €\n    L (44.6%)\n4,932\n102,339.00 €\n    \n      classic\n    \n    S (41.2%)\n6,139\n69,870.25 €\n    M (27.6%)\n4,112\n60,581.75 €\n    L (27.3%)\n4,057\n74,518.50 €\n    XL (3.7%)\n552\n14,076.00 €\n    XXL (0.2%)\n28\n1,006.60 €\n    \n      supreme\n    \n    S (28.2%)\n3,377\n47,463.50 €\n    M (33.8%)\n4,046\n66,475.00 €\n    L (38.1%)\n4,564\n94,258.50 €\n    \n      veggie\n    \n    S (22.9%)\n2,663\n32,386.75 €\n    M (30.8%)\n3,583\n57,101.00 €\n    L (46.4%)\n5,403\n104,202.70 €"
  },
  {
    "objectID": "Calcom.html",
    "href": "Calcom.html",
    "title": "RomuAnalyst",
    "section": "",
    "text": "Aperçu succinct des cours et des travaux pratiques dispensés aux étudiants."
  },
  {
    "objectID": "Calcom.html#interventions-iut",
    "href": "Calcom.html#interventions-iut",
    "title": "RomuAnalyst",
    "section": "",
    "text": "Aperçu succinct des cours et des travaux pratiques dispensés aux étudiants."
  },
  {
    "objectID": "posts/Scrapping/index.html#analyse-des-données",
    "href": "posts/Scrapping/index.html#analyse-des-données",
    "title": "Scraping et base Excel",
    "section": "Analyse des données :",
    "text": "Analyse des données :\n•   L'équipe ayant le meilleur bilan est les Boston Celtics avec 16 victoires et 5 défaites.\n•   L'équipe la plus jeune en moyenne est les Oklahoma City Thunder avec une moyenne d'âge de 23 ans.\n•   L'équipe la plus âgée en moyenne est les Los Angeles Clippers avec une moyenne d'âge de 30.9 ans.\n•   Les Celtics ont la plus grande marge de victoire moyenne (MOV) avec 8.48 points.\n•   La force de l'opposition moyenne (SOS) la plus élevée est celle des Houston Rockets avec 0.48.\n•   Le rating SRS (SRS) le plus élevé est celui des Celtics avec 10.22.\n•   Les Celtics ont le meilleur ORtg (118.3) et les Pistons ont le plus faible ORtg (107.8).\n•   Les Cavaliers ont le meilleur DRtg (111.5) et les Rockets ont le plus faible DRtg (109.7).\n•   L'équipe avec le rythme de jeu le plus rapide est les Pacers avec un pace de 104.2 possessions par match.\n•   Les Clippers ont le meilleur ratio de lancers francs tentés par tirs tentés (FT/FGA) avec 0.270.\n•   Les Magic ont le plus haut ratio de lancers francs adverses tentés par tirs adverses tentés (FT/FGA) avec 0.247.\n•   L'arène avec la plus grande affluence totale est le United Center avec 251,594 spectateurs.\n•   L'arène avec la plus grande affluence moyenne par match est le Madison Square Garden (IV) avec 19,734 spectateurs par match.\nCes données fournissent des informations détaillées sur les performances des équipes de la NBA, leurs statistiques offensives et défensives, ainsi que des informations sur les spectateurs lors des matchs.\nQuarto includes a number of features aimed at making it easy to to author and customize markdown table output, including:\n\nSpecifying column alignment and widths.\nProviding captions, subcaptions, and cross-references.\nGenerating tables dynamically from executable code cells.\n\nThis post provides an overview of these capabilities in Quarto. For more detail about all the features Quarto for authoring tables, see Tables."
  }
]