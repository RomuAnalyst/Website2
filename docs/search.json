[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RomuAnalyst",
    "section": "",
    "text": "Cours d’introduction à  et Posit (ex-Rstudio)\n\n\nCours\n\n\n\n\n\n\n\n\nVous voulez en savoir plus sur moi? Voici un petit résumé\n\n\nBIO\n\n\n\n\n\n\n\n\nVous voulez en savoir plus sur moi? Voici un petit résumé\n\n\nBio\n\n\n\n\n\n\n\n\n2 derniers articles :\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitre\n\n\nDescription\n\n\n\n\n\n\n01/01/23\n\n\n et Posit\n\n\n\n\n\n\n\n01/01/23\n\n\n et Posit\n\n\n\n\n\n\n\n\nAucun article correspondant"
  },
  {
    "objectID": "R et Posit.html",
    "href": "R et Posit.html",
    "title": "R et son environnement",
    "section": "",
    "text": "Le logiciel R est un langage dédié à la statistique. Il a été développé à partir des années 90 à l’University of Auckland, Nouvelle-Zélande. Son implémentation principale est en open source (gratuit et modifiable) R : cran.r-project.org.\nR est un langage interprété (comme Python) et non compilé, c’est-à-dire que les commandes tapées au clavier sont directement exécutées sans avoir besoin de construire un programme complet. On dit également qu’il est “exécuté à la volée”. Par exemple, on peut à partir d’une ligne de commande écrire :\n\n\nprint('Hello world!')\n\n[1] \"Hello world!\"\n\nPour simplifier son utilisation, il est possible d’écrire des scripts c’est à dire une suite de commandes qui se trouvent dans un fichier dont l’extension est .R mais on pourrait tout aussi bien les écrire dans un .txt.\nPour simplifier l’utilisation de R, il est nécessaire d’avoir une interface graphique (appelée aussi GUI pour Graphic User Interfaces). Celle offerte par R est très simpliste et beaucoup préfèrent utiliser RStudio (www.rstudio.com) à juste titre. Cet outil permet de réellement fluidifier le travail avec ce langage.\n\n\n\nLa fenêtre de RStudio se divise généralement en quatre sous-fenêtres. En partant de haut à gauche et en les parcourant dans le sens horaire on trouve :\n\nun éditeur de texte pour les scripts\nl’espace de travail ou d’historique de commandes\nle navigateur de fichiers, graphiques, packages, documentations\nla console R, c’est à dire la ligne de commande ainsi que les résultats des exécutions du code.\n\n\nTypiquement, on tape le code dans l’éditeur (1) puis on l’exécute. il se retrouve alors dans console. Pour cela on place le curseur dans la ligne qu’on veut exécuter et on envoie la commande à la console à l’aide de la combinaison ⌘ + ⏎ dans IOS et Ctrl + ⏎ sous Windows ou tout simplement à l’aide de la commande Run.\n\n\n\nR dispose d’une documentation très complète et l’aide en ligne peut être très utile pour l’utilisation de fonctions, librairies et jeux de données. On peut accéder directement à l’aide en tapant ? suivi par la fonction (ou autre instruction, jeu de données,…) sur laquelle on souhaite se renseigner :\n?mean\naffichera par exemple la page d’aide pour la fonction mean(). La commande\nhelp(mean)\naura le même effet.\nOn peut aussi trouver énormément d’informations sur le web : par exemple en cherchant à l’aide d’un moteur de recherche un problème lié à une tâche R on trouve presque toujours une réponse (souvent dans des forum ouverts sur le site Cross Validated).\nLe but de cette introduction tutorielle est de vous apprendre l’utilisation élémentaire de R. Bien que les objets et commandes de bases y soient introduits, cette introduction n’est pas une référence complète au langage R (loin de là!), vous serez donc amenés à utiliser l’aide et à chercher des informations sur le web. A chaque étape, vous êtes encouragés à taper les commandes et à en comprendre le résultat : la meilleur façon d’apprendre un langage est d’écrire et débugger beaucoup de lignes de code!\n\n\n\nL’une des premières utilisation est la création d’objets1, qui seront mis en mémoire pour l’utilisation dans de futur fonctions ou codes. Un objet peut être créé en utilisant “l’assignation”. Il s’agit d’assigner à un objet (lettre, mot, …) une valeur à l’aide d’une flèche (&lt;-) ou avec le signe =. Je préconise cependant d’utiliser l’assigantion par la “flèche”, cela permet d’avoir un code plus propre et de pouvoir différencier l’assignation et le code en lui même. Une fois l’objet créé nous pouvons afficher son contenu en tapant le nom de l’objet.1 Les objets sont en général des vecteurs, matrices, listes …, auxquels nous appliqueront des fonctions\nExemple :\n\n\nn &lt;- (20 + 10)/5       # création de n et assignation du résultat de l'opération\n\nn                      # appel de l'objet n pour affichage de sa valeur\n\n[1] 6\n\n\n\n\n\n\n\nAstuce\n\n\n\nLe chiffre 1 entre crochets indique qu’il s’agit du premier élément d’une série de n valeurs. Dans l’exemple précedent, la série comprend 1 valeur.\n\n\nLe nom d’un objet doit obligatoirement commencer par une lettre. Il peut être suivi de chiffres, de points, d’espace soulignés (_). De plus, le langage R fait la distinction entre les majuscules et les minuscules : n et N pourront servir à nommer/créer 2 objets distincts.\n\n\n\n\n\n\nImportant\n\n\n\nSi l’objet existe déja, sa valeur précédente est éffacée. C’est un annule et remplace.\n\n\n\n\n\nLes deux grands avantages de R est d’être gratuit et open source. De ce fait il jouit d’une communauté d’utilisateurs très active dans le monde scientifique (statistiques, science des données, bioinformatique, sciences sociales,…). Il est de plus très utilisé par la communauté scientifique et de plus en plus dans les entreprises.\nToute nouvelle méthode statistique a très rapidement une implémentation dans ce langage, ce qui n’est pas toujours le cas pour d’autres langages. Cela enrichi considérablement le logiciel et se fait à l’aide de ce qu’on appelle des paquets (ou packages ou library) Ces derniers sont développés par les utilisateurs et les développeurs. On peut les installer pour augmenter les capacités et possibilités du logiciel dans des domaines très variés de la statistique mais pas seulement en statistique. Il en existe un très grand nombre sur le site du CRAN : cran.r-project.org.\nPour installer un package:\ninstall.packages(\"dplyr\") # avec guillemets!\nUne fois un package installé, il faudra le charger en mémoire à chaque fois qu’une nouvelle session est ouverte:\nlibrary(dplyr) # sans guillemets!\nrequire(dplyr) # fonction équivalente\n\n\n\n\n\n\nAstuce\n\n\n\nLe # sert à commenter les instructions. Le texte/code situé après # (sur la même ligne) ne sera pas éxécuté, ce sera juste un commentaire.\n\n\nAsides allow you to place content objet from the content it is placed in. Asides look like footnotes, but do not include the footnote mark (the superscript number). This is a span that has the class objet which places it in the margin without a footnote number."
  },
  {
    "objectID": "R et Posit.html#quest-ce-que",
    "href": "R et Posit.html#quest-ce-que",
    "title": "R et son environnement",
    "section": "",
    "text": "Le logiciel R est un langage dédié à la statistique. Il a été développé à partir des années 90 à l’University of Auckland, Nouvelle-Zélande. Son implémentation principale est en open source (gratuit et modifiable) R : cran.r-project.org.\nR est un langage interprété (comme Python) et non compilé, c’est-à-dire que les commandes tapées au clavier sont directement exécutées sans avoir besoin de construire un programme complet. On dit également qu’il est “exécuté à la volée”. Par exemple, on peut à partir d’une ligne de commande écrire :\n\n\nprint('Hello world!')\n\n[1] \"Hello world!\"\n\nPour simplifier son utilisation, il est possible d’écrire des scripts c’est à dire une suite de commandes qui se trouvent dans un fichier dont l’extension est .R mais on pourrait tout aussi bien les écrire dans un .txt.\nPour simplifier l’utilisation de R, il est nécessaire d’avoir une interface graphique (appelée aussi GUI pour Graphic User Interfaces). Celle offerte par R est très simpliste et beaucoup préfèrent utiliser RStudio (www.rstudio.com) à juste titre. Cet outil permet de réellement fluidifier le travail avec ce langage."
  },
  {
    "objectID": "R et Posit.html#prise-en-main-de-rstudio",
    "href": "R et Posit.html#prise-en-main-de-rstudio",
    "title": "R et son environnement",
    "section": "",
    "text": "La fenêtre de RStudio se divise généralement en quatre sous-fenêtres. En partant de haut à gauche et en les parcourant dans le sens horaire on trouve :\n\nun éditeur de texte pour les scripts\nl’espace de travail ou d’historique de commandes\nle navigateur de fichiers, graphiques, packages, documentations\nla console R, c’est à dire la ligne de commande ainsi que les résultats des exécutions du code.\n\n\nTypiquement, on tape le code dans l’éditeur (1) puis on l’exécute. il se retrouve alors dans console. Pour cela on place le curseur dans la ligne qu’on veut exécuter et on envoie la commande à la console à l’aide de la combinaison ⌘ + ⏎ dans IOS et Ctrl + ⏎ sous Windows ou tout simplement à l’aide de la commande Run."
  },
  {
    "objectID": "R et Posit.html#laide-en-ligne",
    "href": "R et Posit.html#laide-en-ligne",
    "title": "R et son environnement",
    "section": "",
    "text": "R dispose d’une documentation très complète et l’aide en ligne peut être très utile pour l’utilisation de fonctions, librairies et jeux de données. On peut accéder directement à l’aide en tapant ? suivi par la fonction (ou autre instruction, jeu de données,…) sur laquelle on souhaite se renseigner :\n?mean\naffichera par exemple la page d’aide pour la fonction mean(). La commande\nhelp(mean)\naura le même effet.\nOn peut aussi trouver énormément d’informations sur le web : par exemple en cherchant à l’aide d’un moteur de recherche un problème lié à une tâche R on trouve presque toujours une réponse (souvent dans des forum ouverts sur le site Cross Validated).\nLe but de cette introduction tutorielle est de vous apprendre l’utilisation élémentaire de R. Bien que les objets et commandes de bases y soient introduits, cette introduction n’est pas une référence complète au langage R (loin de là!), vous serez donc amenés à utiliser l’aide et à chercher des informations sur le web. A chaque étape, vous êtes encouragés à taper les commandes et à en comprendre le résultat : la meilleur façon d’apprendre un langage est d’écrire et débugger beaucoup de lignes de code!"
  },
  {
    "objectID": "R et Posit.html#utilisation-de-rrstudio",
    "href": "R et Posit.html#utilisation-de-rrstudio",
    "title": "R et son environnement",
    "section": "",
    "text": "L’une des premières utilisation est la création d’objets1, qui seront mis en mémoire pour l’utilisation dans de futur fonctions ou codes. Un objet peut être créé en utilisant “l’assignation”. Il s’agit d’assigner à un objet (lettre, mot, …) une valeur à l’aide d’une flèche (&lt;-) ou avec le signe =. Je préconise cependant d’utiliser l’assigantion par la “flèche”, cela permet d’avoir un code plus propre et de pouvoir différencier l’assignation et le code en lui même. Une fois l’objet créé nous pouvons afficher son contenu en tapant le nom de l’objet.1 Les objets sont en général des vecteurs, matrices, listes …, auxquels nous appliqueront des fonctions\nExemple :\n\n\nn &lt;- (20 + 10)/5       # création de n et assignation du résultat de l'opération\n\nn                      # appel de l'objet n pour affichage de sa valeur\n\n[1] 6\n\n\n\n\n\n\n\nAstuce\n\n\n\nLe chiffre 1 entre crochets indique qu’il s’agit du premier élément d’une série de n valeurs. Dans l’exemple précedent, la série comprend 1 valeur.\n\n\nLe nom d’un objet doit obligatoirement commencer par une lettre. Il peut être suivi de chiffres, de points, d’espace soulignés (_). De plus, le langage R fait la distinction entre les majuscules et les minuscules : n et N pourront servir à nommer/créer 2 objets distincts.\n\n\n\n\n\n\nImportant\n\n\n\nSi l’objet existe déja, sa valeur précédente est éffacée. C’est un annule et remplace."
  },
  {
    "objectID": "R et Posit.html#les-packages",
    "href": "R et Posit.html#les-packages",
    "title": "R et son environnement",
    "section": "",
    "text": "Les deux grands avantages de R est d’être gratuit et open source. De ce fait il jouit d’une communauté d’utilisateurs très active dans le monde scientifique (statistiques, science des données, bioinformatique, sciences sociales,…). Il est de plus très utilisé par la communauté scientifique et de plus en plus dans les entreprises.\nToute nouvelle méthode statistique a très rapidement une implémentation dans ce langage, ce qui n’est pas toujours le cas pour d’autres langages. Cela enrichi considérablement le logiciel et se fait à l’aide de ce qu’on appelle des paquets (ou packages ou library) Ces derniers sont développés par les utilisateurs et les développeurs. On peut les installer pour augmenter les capacités et possibilités du logiciel dans des domaines très variés de la statistique mais pas seulement en statistique. Il en existe un très grand nombre sur le site du CRAN : cran.r-project.org.\nPour installer un package:\ninstall.packages(\"dplyr\") # avec guillemets!\nUne fois un package installé, il faudra le charger en mémoire à chaque fois qu’une nouvelle session est ouverte:\nlibrary(dplyr) # sans guillemets!\nrequire(dplyr) # fonction équivalente\n\n\n\n\n\n\nAstuce\n\n\n\nLe # sert à commenter les instructions. Le texte/code situé après # (sur la même ligne) ne sera pas éxécuté, ce sera juste un commentaire.\n\n\nAsides allow you to place content objet from the content it is placed in. Asides look like footnotes, but do not include the footnote mark (the superscript number). This is a span that has the class objet which places it in the margin without a footnote number."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": " et Posit",
    "section": "",
    "text": "Présentation, prise en main, en passant par le processus d’installation."
  },
  {
    "objectID": "blog.html#tous-les-documents",
    "href": "blog.html#tous-les-documents",
    "title": " et Posit",
    "section": "Tous les documents :",
    "text": "Tous les documents :"
  },
  {
    "objectID": "test2.html",
    "href": "test2.html",
    "title": "ggplot2, créer et superposer des graphiques",
    "section": "",
    "text": "ggplot2, créer et superposer des graphiques\n\n\n\n\n\n\n\n\nShortcode\nIcon\n\n\n\n\n{{&lt; fa thumbs-up &gt;}}\n\n\n\n{{&lt; fa folder &gt;}}\n\n\n\n{{&lt; fa chess-pawn &gt;}}\n\n\n\n{{&lt; fa brands bluetooth &gt;}}\n\n\n\n{{&lt; fa brands twitter size=2xl &gt;}} (HTML only)\n\n\n\n{{&lt; fa brands github size=5x &gt;}} (HTML only)\n\n\n\n{{&lt; fa battery-half size=Huge &gt;}}\n\n\n\n{{&lt; fa envelope title=\"An envelope\" &gt;}}\n\n\n\n\nLe but de la visualisation de données étant de représenter graphiquement des données brutes (ou quasi-brutes), il est souvent nécessaire de prendre en compte plusieurs variables. Nous devons donc aller plus loin que les graphiques de base (nuage de points, droite de regression, boite à moustache, diagramme en barres ou circulaires, …), pour les combiner par exemple.\nAvec le langage de base (package graphics notamment), il est possible de faire des graphiques évolués, mais avec beaucoup de paramétrages à la main. Pour cela on va commencer par s’intéresser au jeu de données mtcars.\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\n# ?mtcars ou help(mtcars)\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\nplot(mtcars$hp,mtcars$mpg)\n\n\n\n\nEssayons d’améliorer ce graphique… Ci dessous, un exemple de graphique avancé, représentant 4 variables (trois quantitatives et une qualitative), ainsi qu’une explication succincte des différentes fonctions utilisées, et quelques paramètres de celles-ci.\npar(family = \"serif\", mar = c(5, 4, 2, 0)+.1)\ncouleurs_am = brewer.pal(3, \"Dark2\")\nplot(mpg ~ hp, \n     data = mtcars,\n     pch = 19,\n     cex = wt/3,\n     col = couleurs_am[mtcars$am+1],\n     main = \"Consommation en fonction de la Puissance\",\n     sub = \"Source : 1974 Motor Trend US magazine\", font.sub = 3, cex.sub = .8,\n     xlab = \"Puissance (en ch)\",\n     ylab = \"Consommation en Miles/Galon\",\n     bty = \"n\", axes = FALSE)\naxis(1, lwd = 0, lwd.ticks = .5)\nat.y = axis(2, lwd = 0, lwd.ticks = .5, labels = FALSE)\ntext(y = at.y, x = 35, labels = at.y, srt = 0, pos = 2, xpd = TRUE)\nl1 = legend(\"topright\", legend = c(\"Automatique\", \"Manuelle\"), \n       col = couleurs_am, bty = \"n\", cex = .8, pch = 19,\n       text.width = 50, text.col = couleurs_am, \n       title = \"Boite de vitesse\", title.col = \"black\")\nlegend(l1$rect$left, l1$rect$top-l1$rect$h-1, \n       legend = range(mtcars$wt), title = \"Poids  (1000 lbs)\",\n       pch = 19, pt.cex = range(mtcars$wt)/3, bty = \"n\", cex = .8, col = gray(.5),\n       text.width = 50, adj = -.25)\noutliers_hp = subset(mtcars, subset = hp &gt; 250)\ntext(outliers_hp$hp, outliers_hp$mpg, row.names(outliers_hp), pos = c(3, 2), cex = .8, font = 4)\noutliers_mpg = subset(mtcars, subset = mpg &gt; 30)\ntext(outliers_mpg$hp, outliers_mpg$mpg, row.names(outliers_mpg), pos = 4, cex = .8, font = 4)\n\n\n\n\n\nLa fonction par() permet de modifier les paramètres graphiques, tel que :\n\nmar pour les marges (un vecteur numérique de taille 4 qui permet de définir les tailles des marges dans l’ordre suivant : bas, gauche, haut, droite. Par défaut il vaut c(5.1, 4.1, 4.1, 2.1) )\nfamily pour la famille de police d’écriture\ncertains paramètres ci-après sont définissables globalement dans la fonction par(), ou localement dans les fonctions suivantes\n\nLes paramètres de la fonction plot()\n\npch : symbole utilisé pour chaque point (ici 19 indique un rond plein)\ncex : taille du point (ici en fonction de la variable wt)\ncol : couleur des points (ici en fonction de la variable am)\nmain, sub, xlab, ylab : resp. titre, sous-titre, intitulé en abscisse et intitulé en ordonnée\n*.sub : indication spécifique pour le sous-titre\nbty : type de la boite (ici n veut dire rien autour du graphique)\naxes : présence ou non des axes (non ici)\n\nLa fonction axis() qui permet d’ajouter un axe (1 : en abscisse, et 2 : en ordonnée)\n\nsi rien d’indiqué pour at, utilisation des ticks par défaut\nlwd : largeur de la ligne (ici non-présente)\nlwd.ticks : largeur des ticks (assez fine ici)\nrenvoie les valeurs des ticks\n\nLa fonction text() permet d’écrire du texte sur le graphique\n\nle x = 35 est choisi par expérience\nsrt : angle du texte\npos : ajustement du texte par rapport aux coordonnées indiquées\nxpd : permet d’écrire en dehors du graphique (dans les marges donc)\n\nLa fonction legend() permet d’ajouter une légende\n\nposition : soit \\((x,y)\\), soit chaine spécifique\nlegend : texte des items\ncol, bty, cex, pch : identique à précédemment\ntext.width et text.col : largeur du texte des items et couleur(s)\ntitle et title.col : titre de la légende (et couleur du titre)\nrenvoie une liste avec deux objets (rect qui contient des infos sur le rectangle occupé par la légende dans le graphique et text qui contient les coordonnées du texte des items)\npt.cex : taille des symboles\nadj: ajustement du texte\n\n\nL’utilisateur souhaite réaliser des graphiques (nuages de points, histogrammes, densité…) et les personnaliser (légendes, titres, échelles…).\nIl est recommandé d’utiliser le package ggplot2 qui permet de réaliser et de personnaliser un grand nombre de représentations graphiques; Il est conseillé aux utilisateurs débutants d’utiliser l’add-in esquisse pour se familiariser avec ggplot2.\nVous pouvez également accéder à esquisse en exécutant le code suivant:\nlibrary(esquisse)\nesquisser()\nL’objectif du package ggplot2 est de fournir une approche unique pour produire quasiment toute représentation graphique de données. Ce package propose un grand nombre de fonctions permettant de personnaliser finement les représentations graphiques. Cette fiche n’est donc qu’une introduction succincte à ggplot2. Pour des formations plus détaillées, se référer à {#ggplot2Ressources}.\n\nIntroduction\nLa fonction essentielle de ggplot2 est ggplot(). Il faut définir quatre éléments pour construire un graphique avec ggplot():\n\nla table de données ;\nle mapping : on définit dans l’aesthetic (ou aes) le lien entre les variables des données et ce que l’on veut représenter sur le graphique (quelle variable sur l’axe x, sur l’axe y, quelle variable pour définir une graduation de couleurs…) ;\nla forme géométrique ou geometry  : on définit la représentation graphique qu’on souhaite utiliser. Les géométries ont toutes un nom qui commence par geom_; par exemple, il faut utiliser la géométrie geom_point() pour réaliser un nuage de points;\nles paramètres : on définit les autres paramètres qui dépendent de constantes (par exemple : je veux que toutes mes lignes soient rouges ou de taille 2 pixels).\n\nLa construction d’un graphique repose sur le principe de couches successives. Les différentes couches graphiques se superposent et s’enchaînent grâce à l’opérateur +, comme un pipe. Il est possible d’aller à la ligne dans une instruction ggplot(), il suffit que l’opérateur + figure à la fin de la ligne.\nVoici un exemple de code qui crée un nuage de points (géométrie geom_point()) à partir des données mes_donnees, avec les variables variable1 en abscisse et variable2 en ordonnée:\n\n\nSe mettre d’accord sur la trame qui sera le squelette du rapport\n\nlibrary(ggplot2)\nggplot(data = iris) + \n  geom_point(mapping = aes(x = iris$Sepal.Length, y = iris$Sepal.Width))\n## Warning: Use of `iris$Sepal.Length` is discouraged. Use `Sepal.Length` instead.\n## Warning: Use of `iris$Sepal.Width` is discouraged. Use `Sepal.Width` instead.\n\n\nlibrary(ggplot2)\nggplot(data = iris) + \n  geom_point(mapping = aes(x = iris$Sepal.Length, y = iris$Sepal.Width))\n\n\nLe mapping et l’utilisation d’aes()\nLe mapping désigne dans ggplot2 la relation entre un attribut graphique de la geometry (abscisse, ordonnée, couleur…) et une variable présente dans la table de données. On déclare le mapping grâce à la fonction aes() (pour aesthetic), qui sert donc à identifier les variables que l’on souhaite représenter sur le graphique.\nLes arguments fondamentaux de aes() sont les variables représentées sur l’axe des abscisses et l’axe des ordonnées (x et y). Par exemple, on écrit aes(x = niveau_vie_median, y = taux_chomage) si l’on souhaite représenter pour chaque iris le taux de chômage (sur l’axe y) en fonction du niveau de vie médian (sur l’axe x).\nPar ailleurs, la fonction aes() admet d’autres arguments qui permettent de modifier l’apparence des attributs graphiques selon une troisième variable du jeu de données. Voici les arguments supplémentaires les plus courants:\n\n\n\nAttribut\nDescription\n\n\n\n\ncolor\nCouleur des lignes ou des points\n\n\nshape\nForme des points\n\n\nsize\nTaille des points\n\n\nalpha\nTransparence des points\n\n\nfill\nCouleur des surfaces\n\n\nlinetype\nType de ligne (continue, pointillée, …)\n\n\n\nDans l’exemple qui suit, on représente pour chaque iris le taux de chômage (sur l’axe y) en fonction du niveau de vie médian (sur l’axe x), en colorant les points en fonction de la part des cadres et professions intellectuelles supérieures parmi les actifs de l’iris (color = part_cadres).\nIl est également possible d’utiliser ces mêmes arguments pour modifier un attribut graphique sans le lier à une variable. En ce cas, on définit l’attribut à l’extérieur de l’aesthetic (donc à l’extérieur de aes()). Voici l’exemple précédent, modifié pour que tous les points soient (rouge), et non en fonction d’une variable. L’argument color est donc à l’extérieur de aes().\n\nLa notion de mapping et la définition des attributs graphiques à l’intérieur et à l’extérieur d’aes() sont une des principales difficultés de ggplot2. Il est normal de tâtonner lorsqu’on commence à les utiliser. Pour s’y retrouver, il suffit de suivre la règle suivante. Si on établit un lien entre les valeurs d’une variable et un attribut graphique, il s’agit d’un mapping qui doit être défini à l’intérieur de la fonction aes(). Dans le cas contraire, il s’agit d’un simple paramètre du graphique, qui doit être défini à l’extérieur de la fonction aes().\n\n\n\nLes formes géométriques\nLa forme géométrique ou geometry désigne le type de représentation graphique utilisée (nuage de points, histogrammes…). On spécifie le type de représentation que l’on souhait en utilisant une fonction dont le nom commence par geom_. Le tableau ci-dessous présente quelques représentations graphiques classiques.\n\n\n\n\n\n\n\n\ngeometry\nDescription\nArguments\n\n\n\n\ngeom_point()\nNuage de points\nx, y, shape, fill, size\n\n\ngeom_line()\nLigne\nx, y, linetype\n\n\ngeom_bar()\nDiagramme en barres\nx, fill, linetype, weight\n\n\ngeom_histogram()\nHistogramme\nx, fill, linetype, weight\n\n\ngeom_boxplot()\nBoîte à moustaches\nx, y, fill, weight\n\n\ngeom_density()\nCourbe de densité\nx, y, fill, color, linetype\n\n\n\nVoici deux exemples d’utilisation.\n\nIl existe un grand nombre de géométries dans ggplot2. Vous pouvez en afficher la liste en exécutant la commande help.search(\"^geom_\", package = \"ggplot2\").\nPar ailleurs, de très nombreux packages proposent encore d’autres géométries pour réaliser des représentations graphiques particulières (cartes avec ggmap, arbres généalogiques avec ggtree et ggenealogy, résultats d’élections avec ggparliament…)."
  },
  {
    "objectID": "test2.html#quest-ce-que",
    "href": "test2.html#quest-ce-que",
    "title": "Présentation de R et de son environnement",
    "section": "",
    "text": "Le logiciel R est un langage dédié à la statistique. Il a été développé à partir des années 90 à l’University of Auckland, Nouvelle-Zélande. Son implémentation principale est en open source (gratuit et modifiable) R : cran.r-project.org.\nR est un langage interprété (comme Python) et non compilé, c’est-à-dire que les commandes tapées au clavier sont directement exécutées sans qu’il soit besoin de construire un programme complet. On dit également qu’il est “exécuté à la volée”. Par exemple on peut à partir d’une ligne de commande écrire :\nprint('Hello world!')\n## [1] \"Hello world!\"\nPour simplifier son utilisation, il est possible d’écrire des scripts c’est à dire une suite de commandes qui se trouvent dans un fichier dont l’extension est .R mais on pourrait tout aussi bien les écrire dans un .txt.\nPour simplifier l’utilisation de R, il est nécessaire d’avoir une interface graphique (appelée aussi GUI pour Graphic User Interfaces). Celle offerte par R est très simpliste et beaucoup préfèrent utiliser RStudio (www.rstudio.com) à juste titre. Cet outil permet de réellement fluidifier le travail avec ce langage."
  },
  {
    "objectID": "test2.html#prise-en-main-de-r-studio",
    "href": "test2.html#prise-en-main-de-r-studio",
    "title": "Présentation de R et de son environnement",
    "section": "",
    "text": "La fenêtre de RStudio se divise généralement en quatre sous-fenêtres: en partant de haut à gauche et en les parcourant dans le sens horaire on trouve :\n\nun éditeur de texte pour les scripts\nl’espace de travail ou d’historique de commandes\nle navigateur de fichiers, graphiques, packages, documentations\nla console R, c’est à dire la ligne de commande ainsi que les résultats des exécutions du code.\n\nTypiquement on tape le code dans l’éditeur et on l’exécute ensuite dans la console. Pour cela on place le curseur dans la ligne qu’on veut exécuter et on envoie la commande à la console à l’aide de la combinaison cmd Retour dans IOS et ctrl Retour sous Windows ou tout simplement à l’aide de la commande Run."
  },
  {
    "objectID": "test2.html#laide-en-ligne",
    "href": "test2.html#laide-en-ligne",
    "title": "Présentation de R et de son environnement",
    "section": "",
    "text": "R dispose d’une documentation très complète et l’aide en ligne peut être très utile pour l’utilisation de fonctions, librairies et jeux de données. On peut accéder directement à l’aide en tapant ? suivi par la fonction (ou autre instruction, jeu de données,…) sur laquelle on souhaite se renseigner :\n?mean\naffichera par exemple la page d’aide pour la fonction mean(). La commande\nhelp(mean)\naura le même effet.\nOn peut aussi trouver énormément d’informations sur le web : par exemple en cherchant à l’aide d’un moteur de recherche un problème lié à une tâche R on trouve presque toujours une réponse (souvent dans des forum ouverts sur le site Cross Validated).\nLe but de cette introduction tutorielle est de vous apprendre l’utilisation élémentaire de R. Bien que les objets et commandes de bases y soient introduits, cette introduction n’est pas une référence complète au langage R (loin de là!), vous serez donc amenés à utiliser l’aide et à chercher des informations sur le web. A chaque étape, vous êtes encouragés à taper les commandes et à en comprendre le résultat : la meilleur façon d’apprendre un langage est d’écrire et débugger beaucoup de lignes de code!"
  },
  {
    "objectID": "test2.html#packages",
    "href": "test2.html#packages",
    "title": "Présentation de R et de son environnement",
    "section": "",
    "text": "Les deux grands avantages de R est d’être gratuit et open source. De ce fait il jouit d’une communauté d’utilisateurs très active dans le monde scientifique (statistiques, science des données, bioinformatique, sciences sociales,…). Il est de plus très utilisé par la communauté scientifique et de plus en plus dans les entreprises.\nToute nouvelle méthode statistique a très rapidement une implémentation dans ce langage, ce qui n’est pas toujours le cas pour d’autres langages. Cela enrichi considérablement le logiciel et se fait à l’aide de ce qu’on appelle des paquets (ou packages ou library) Ces derniers sont développés par les utilisateurs et les développeurs. On peut les installer pour augmenter les capacités et possibilités du logiciel dans des domaines très variés de la statistique mais pas seulement en statistique. Il en existe un très grand nombre sur le site du CRAN : cran.r-project.org.\nPour installer un package:\ninstall.packages(\"dplyr\") \n# On telecharge et installe le package dplyr utilisé dans la manipulation de données\nUne fois un package installé, il faudra le charger en mémoire à chaque fois qu’une nouvelle session est ouverte:\nlibrary(dplyr) # sans guillemets!\nrequire(dplyr) # fonction équivalente\nImportant : il est à noter que # sert à commenter les instructions."
  },
  {
    "objectID": "R et Posit.html#quest-ce-que-fa-brands-r-project",
    "href": "R et Posit.html#quest-ce-que-fa-brands-r-project",
    "title": "R et son environnement",
    "section": "",
    "text": "Le logiciel R est un langage dédié à la statistique. Il a été développé à partir des années 90 à l’University of Auckland, Nouvelle-Zélande. Son implémentation principale est en open source (gratuit et modifiable) R : cran.r-project.org.\nR est un langage interprété (comme Python) et non compilé, c’est-à-dire que les commandes tapées au clavier sont directement exécutées sans avoir besoin de construire un programme complet. On dit également qu’il est “exécuté à la volée”. Par exemple, on peut à partir d’une ligne de commande écrire :\n\n\nprint('Hello world!')\n\n[1] \"Hello world!\"\n\nPour simplifier son utilisation, il est possible d’écrire des scripts c’est à dire une suite de commandes qui se trouvent dans un fichier dont l’extension est .R mais on pourrait tout aussi bien les écrire dans un .txt.\nPour simplifier l’utilisation de R, il est nécessaire d’avoir une interface graphique (appelée aussi GUI pour Graphic User Interfaces). Celle offerte par R est très simpliste et beaucoup préfèrent utiliser RStudio (www.rstudio.com) à juste titre. Cet outil permet de réellement fluidifier le travail avec ce langage."
  },
  {
    "objectID": "About.html",
    "href": "About.html",
    "title": "Romuald ZAMI",
    "section": "",
    "text": "Pour obtenir des informations plus détaillées, je vous invite à me contacter en utilisant les liens fournis ci-dessus."
  },
  {
    "objectID": "About.html#derniers-diplômes",
    "href": "About.html#derniers-diplômes",
    "title": "Romuald ZAMI",
    "section": "Derniers diplômes :",
    "text": "Derniers diplômes :\nDU1 Dataviz | IUT2 Paris Rives-de-Seine | 2022\nLicence Data Mining | IUT Paris Rives-de-Seine | 2022\nDUT3 STID4 | IUT Paris Rives-de-Seine | 2022"
  },
  {
    "objectID": "About.html#experiences-actuelles",
    "href": "About.html#experiences-actuelles",
    "title": "Romuald ZAMI",
    "section": "Experiences actuelles :",
    "text": "Experiences actuelles :\nChargé d’analyse de données de pilotage  Direction générale de Pôle emploi | depuis janvier 2019\nIntervenant sur les cours de programmation R  IUT Paris Rives-de-Seine | depuis septembre 2022"
  },
  {
    "objectID": "About.html#footnotes",
    "href": "About.html#footnotes",
    "title": "Romuald ZAMI",
    "section": "Notes de bas de page",
    "text": "Notes de bas de page\n\n\nDiplôme Universitaire↩︎\nInstitut Universitaire et Technologique↩︎\nDiplôme Universitaire et Technologique↩︎\nStatistique et Traitement Informatique des Données↩︎"
  },
  {
    "objectID": "About.html#fa-regular-diploma-derniers-diplômes",
    "href": "About.html#fa-regular-diploma-derniers-diplômes",
    "title": "Romuald ZAMI",
    "section": "",
    "text": "DU1 Dataviz | IUT2 Paris Rives-de-Seine | 2022\nLicence Data Mining | IUT Paris Rives-de-Seine | 2022\nDUT3 STID4 | IUT Paris Rives-de-Seine | 2022"
  },
  {
    "objectID": "ia.html#syntaxe-des-fonctions",
    "href": "ia.html#syntaxe-des-fonctions",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Syntaxe des fonctions",
    "text": "Syntaxe des fonctions\nLa syntaxe générale d’une fonction en R est la suivante :\n\nnom_de_la_fonction &lt;- function(paramètres) {\n  # Corps de la fonction\n  # Instructions à exécuter\n  # ...\n  # Retourner une valeur si nécessaire\n  return(valeur)\n}\n\nUne fonction commence par le mot-clé function suivi du nom de la fonction, puis des paramètres entre parenthèses. Le corps de la fonction est entouré par des accolades {} et contient les instructions à exécuter. Une fonction peut également retourner une valeur à l’aide du mot-clé return."
  },
  {
    "objectID": "ia.html#utilisation-des-fonctions",
    "href": "ia.html#utilisation-des-fonctions",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Utilisation des fonctions",
    "text": "Utilisation des fonctions\nPour utiliser une fonction, vous devez l’appeler en utilisant son nom suivi des arguments entre parenthèses. Les arguments sont les valeurs que vous fournissez à la fonction pour qu’elle effectue ses opérations. Voici un exemple d’utilisation d’une fonction intégrée à R :\n\n# Utilisation de la fonction mean() pour calculer la moyenne\nvaleurs &lt;- c(5, 10, 15, 20)\nmoyenne &lt;- mean(valeurs)\nprint(moyenne)\n\n[1] 12.5\n\n\nDans cet exemple, nous utilisons la fonction mean() pour calculer la moyenne des valeurs stockées dans le vecteur valeurs. Le résultat est stocké dans la variable moyenne et ensuite affiché à l’aide de la fonction print()."
  },
  {
    "objectID": "ia.html#paramètres-des-fonctions",
    "href": "ia.html#paramètres-des-fonctions",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Paramètres des fonctions",
    "text": "Paramètres des fonctions\nLes fonctions peuvent accepter des paramètres, également appelés arguments, qui sont des valeurs fournies à la fonction lors de son appel. Les paramètres permettent de personnaliser le comportement d’une fonction en lui fournissant des données spécifiques à traiter. Par exemple, la fonction mean() accepte un paramètre na.rm qui spécifie si les valeurs manquantes doivent être ignorées lors du calcul de la moyenne. Voici un exemple d’utilisation de ce paramètre :\n\nvaleurs &lt;- c(5, 10, NA, 20)\nmoyenne &lt;- mean(valeurs, na.rm = TRUE)\nprint(moyenne)\n\n[1] 11.66667\n\n\nDans cet exemple, la valeur NA représente une valeur manquante. En spécifiant na.rm = TRUE, nous demandons à la fonction mean() d’ignorer les valeurs manquantes lors du calcul de la moyenne."
  },
  {
    "objectID": "ia.html#retour-de-valeurs-des-fonctions",
    "href": "ia.html#retour-de-valeurs-des-fonctions",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Retour de valeurs des fonctions",
    "text": "Retour de valeurs des fonctions\nLes fonctions peuvent également retourner des valeurs qui peuvent être utilisées plus tard dans le code. Pour cela, nous utilisons le mot-clé return suivi de la valeur que nous souhaitons renvoyer. Voici un exemple :\n\n# Fonction pour calculer le carré d'un nombre\ncarre &lt;- function(x) {\n  resultat &lt;- x^2\n  return(resultat)\n}\n\n# Utilisation de la fonction carre()\nnombre &lt;- 5\nres &lt;- carre(nombre)\nprint(res)\n\n[1] 25\n\n\nDans cet exemple, nous avons défini une fonction carre() qui prend un argument x et calcule le carré de ce nombre. La valeur carrée est stockée dans la variable resultat, puis renvoyée à l’aide de return(). Lorsque nous appelons la fonction carre() avec le nombre 5, le résultat est stocké dans la variable res et ensuite affiché à l’aide de print()."
  },
  {
    "objectID": "ia.html#exemples-dutilisation-de-fonctions-avec-des-datasets-intégrés-à-r",
    "href": "ia.html#exemples-dutilisation-de-fonctions-avec-des-datasets-intégrés-à-r",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Exemples d’utilisation de fonctions avec des datasets intégrés à R",
    "text": "Exemples d’utilisation de fonctions avec des datasets intégrés à R\nMaintenant, explorons des exemples concrets d’utilisation de fonctions avec des datasets intégrés à R pour illustrer leur utilité dans l’analyse de données.\n\nExemple 1 : Analyse du dataset iris\nLe dataset “iris” contient des informations sur les mesures des sépales et des pétales de différentes espèces de fleurs. Supposons que nous voulons calculer la moyenne des longueurs des pétales pour chaque espèce de fleur. Voici comment nous pouvons le faire en utilisant une fonction :\n\n# Chargement du dataset iris\ndata(iris)\n\n# Définition de la fonction pour calculer la moyenne des longueurs de pétales par espèce\ncalculer_moyenne_petales &lt;- function(espece) {\n  donnees_espece &lt;- subset(iris, Species == espece)\n  moyenne &lt;- mean(donnees_espece$Petal.Length)\n  return(moyenne)\n}\n\n# Utilisation de la fonction pour calculer la moyenne des longueurs de pétales pour chaque espèce\nespeces &lt;- unique(iris$Species)\nfor (espece in especes) {\n  moyenne &lt;- calculer_moyenne_petales(espece)\n  print(paste(\"Moyenne des longueurs de pétales pour\", espece, \":\", round(moyenne,2)))\n}\n\n[1] \"Moyenne des longueurs de pétales pour setosa : 1.46\"\n[1] \"Moyenne des longueurs de pétales pour versicolor : 4.26\"\n[1] \"Moyenne des longueurs de pétales pour virginica : 5.55\"\n\n\nDans cet exemple, nous avons défini une fonction calculer_moyenne_petales() qui prend le nom d’une espèce de fleur comme argument. La fonction filtre les données pour cette espèce, calcule la moyenne des longueurs de pétales et la renvoie. Ensuite, nous utilisons une boucle for pour itérer sur les différentes espèces du dataset “iris” et calculer la moyenne des longueurs de pétales pour chaque espèce.\n\n\nExemple 2 : Analyse du dataset mtcars\nLe dataset “mtcars” contient des informations sur différentes voitures. Supposons que nous voulons déterminer la consommation d’essence moyenne pour les voitures avec une puissance supérieure à 150 chevaux. Voici comment nous pouvons le faire en utilisant une fonction :\n\n# Chargement du dataset mtcars\ndata(mtcars)\n\n# Définition de la fonction pour calculer la consommation d'essence moyenne pour les voitures avec une puissance supérieure à 150 chevaux\ncalculer_consommation_moyenne &lt;- function(puissance_min) {\n  donnees_filtree &lt;- subset(mtcars, hp &gt; puissance_min)\n  consommation_moyenne &lt;- mean(donnees_filtree$mpg)\n  return(consommation_moyenne)\n}\n\n# Utilisation de la fonction pour calculer la consommation d'essence moyenne pour les voitures avec une puissance supérieure à 150 chevaux\npuissance_min &lt;- 150\nconsommation &lt;- calculer_consommation_moyenne(puissance_min)\nprint(paste(\"Consommation d'essence moyenne pour les voitures avec une puissance supérieure à\", puissance_min, \"chevaux :\", round(consommation,2)))\n\n[1] \"Consommation d'essence moyenne pour les voitures avec une puissance supérieure à 150 chevaux : 15.42\"\n\n\nDans cet exemple, nous avons défini une fonction calculer_consommation_moyenne() qui prend une puissance minimale en argument. La fonction filtre les données pour ne conserver que les voitures avec une puissance supérieure à la valeur donnée, calcule la consommation d’essence moyenne et la renvoie. Ensuite, nous utilisons la fonction print() pour afficher le résultat."
  },
  {
    "objectID": "ia.html",
    "href": "ia.html",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "",
    "text": "Les fonctions sont l’un des éléments fondamentaux du langage de programmation R. Elles jouent un rôle clé dans l’organisation et la réutilisation du code, permettant aux programmeurs d’écrire des blocs de code autonomes qui peuvent être appelés et exécutés à plusieurs reprises. Dans cet article, nous explorerons les bases des fonctions dans R, leur syntaxe, leurs paramètres et leurs retours de valeur, ainsi que leur utilisation pratique avec des exemples concrets utilisant les datasets intégrés à R. Les fonctions sont un élément essentiel de R et permettent d’organiser et de réutiliser le code de manière efficace. Elles offrent une grande flexibilité et peuvent être adaptées à différents scénarios d’analyse de données. En comprenant les bases des fonctions, leur syntaxe, leurs paramètres et leurs retours de valeur, vous pourrez tirer pleinement parti de la puissance de R dans vos projets d’analyse de données."
  },
  {
    "objectID": "ia.html#arguments-par-défaut",
    "href": "ia.html#arguments-par-défaut",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Arguments par défaut",
    "text": "Arguments par défaut\nLes fonctions en R peuvent avoir des arguments par défaut, ce qui signifie que si vous ne fournissez pas de valeur pour un argument donné lors de l’appel de la fonction, elle utilisera sa valeur par défaut prédéfinie. Voici un exemple :\n\n# Définition de la fonction avec un argument par défaut\ndire_bonjour &lt;- function(nom = \"Anonyme\") {\n  message(paste(\"Bonjour\", nom, \"!\"))\n}\n\n# Appels de la fonction avec et sans spécification de l'argument\ndire_bonjour()\ndire_bonjour(\"Alice\")\n\nDans cet exemple, la fonction dire_bonjour() est définie avec un argument nom qui a une valeur par défaut de “Anonyme”. Lorsque nous appelons la fonction sans spécifier d’argument, elle utilise la valeur par défaut et affiche “Bonjour Anonyme !”. Lorsque nous l’appelons avec l’argument “Alice”, la fonction utilise cette valeur spécifique et affiche “Bonjour Alice !”."
  },
  {
    "objectID": "ia.html#fonctions-anonymes-lambda",
    "href": "ia.html#fonctions-anonymes-lambda",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Fonctions anonymes (lambda)",
    "text": "Fonctions anonymes (lambda)\nEn plus des fonctions nommées, R prend également en charge les fonctions anonymes, également appelées fonctions lambda. Les fonctions anonymes sont des fonctions sans nom qui peuvent être utilisées de manière concise dans certaines situations. Voici un exemple d’utilisation d’une fonction anonyme avec la fonction sapply() :\n\n# Utilisation d'une fonction anonyme avec sapply()\nvaleurs &lt;- c(1, 2, 3, 4, 5)\nresultats &lt;- sapply(valeurs, function(x) x^2)\nprint(resultats)\n\n[1]  1  4  9 16 25\n\n\nDans cet exemple, nous utilisons la fonction sapply() pour appliquer une fonction anonyme à chaque élément du vecteur valeurs. La fonction anonyme calcule le carré de chaque valeur, et sapply() renvoie un vecteur contenant les carrés correspondants."
  },
  {
    "objectID": "ia.html#portée-des-variables",
    "href": "ia.html#portée-des-variables",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Portée des variables",
    "text": "Portée des variables\nLorsque vous travaillez avec des fonctions en R, il est important de comprendre la portée des variables. Les variables définies à l’intérieur d’une fonction sont généralement locales à cette fonction, ce qui signifie qu’elles ne sont pas accessibles en dehors de la fonction. Cependant, vous pouvez également accéder aux variables définies à l’extérieur d’une fonction à l’intérieur de celle-ci. Voici un exemple :\n\n# Variable globale\nnom &lt;- \"Alice\"\n\n# Fonction utilisant une variable globale et une variable locale\ndire_bonjour &lt;- function() {\n  # Variable locale\n  age &lt;- 30\n  message(paste(\"Bonjour\", nom, \"! Tu as\", age, \"ans.\"))\n}\n\n# Appel de la fonction\ndire_bonjour()\n\nDans cet exemple, nous avons une variable globale nom définie en dehors de la fonction dire_bonjour(), et une variable locale age définie à l’intérieur de la fonction. La fonction utilise à la fois la variable globale nom et la variable locale age pour afficher un message personnalisé."
  },
  {
    "objectID": "ia.html#fonctions-récursives",
    "href": "ia.html#fonctions-récursives",
    "title": "Les fonctions dans R : Comprendre et utiliser la puissance des fonctions",
    "section": "Fonctions récursives",
    "text": "Fonctions récursives\nLes fonctions récursives sont des fonctions qui s’appellent elles-mêmes à l’intérieur de leur corps. Elles sont utiles lorsque vous avez besoin de résoudre des problèmes qui peuvent être décomposés en problèmes plus petits du même type. Voici un exemple de fonction récursive pour calculer le factoriel d’un nombre :\n\n# Fonction récursive pour calculer le factoriel\ncalculer_factoriel &lt;- function(n) {\n  if (n == 0 || n == 1) {\n    return(1)\n  } else {\n    return(n * calculer_factoriel(n - 1))\n  }\n}\n\n# Appel de la fonction pour calculer le factoriel de 5\nresultat &lt;- calculer_factoriel(5)\nprint(resultat)\n\n[1] 120\n\n\nDans cet exemple, la fonction calculer_factoriel() vérifie si le nombre n est égal à 0 ou 1. Si c’est le cas, elle renvoie 1. Sinon, elle appelle récursivement la fonction elle-même avec n - 1 et multiplie le résultat par n. Ainsi, elle calcule le factoriel du nombre donné.\nLes fonctions en R offrent une flexibilité et une puissance considérables pour organiser, réutiliser et automatiser le code. En comprenant les différents aspects des fonctions, vous pouvez créer des codes plus modulaires et plus efficaces."
  },
  {
    "objectID": "ia2.html",
    "href": "ia2.html",
    "title": "Les boucles dans R : Comprendre et utiliser la puissance des boucles",
    "section": "",
    "text": "Il existe principalement deux types de boucles en R : la boucle “for” et la boucle “while”. Explorons-les plus en détail."
  },
  {
    "objectID": "ia2.html#boucle-for",
    "href": "ia2.html#boucle-for",
    "title": "Les boucles dans R : Comprendre et utiliser la puissance des boucles",
    "section": "Boucle “for”",
    "text": "Boucle “for”\nLa boucle “for” est utilisée lorsque vous connaissez à l’avance le nombre de répétitions que vous souhaitez effectuer. La syntaxe générale de la boucle “for” en R est la suivante :\nfor (variable in sequence) {\n  # Instructions à exécuter\n}\nExplorons cela avec un exemple simple. Supposons que nous voulions afficher les nombres de 1 à 5 à l’aide d’une boucle “for”. Voici comment nous pouvons le faire en R :\n\nfor (i in 1:5) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\nDans cette boucle, nous utilisons la variable “i” pour parcourir la séquence de nombres de 1 à 5 à l’aide de l’expression “1:5”. À chaque itération de la boucle, la valeur de “i” est mise à jour pour correspondre au nombre actuel de la séquence. À l’intérieur du bloc de la boucle, nous utilisons la fonction “print()” pour afficher la valeur de “i”. Ainsi, les nombres de 1 à 5 seront affichés à l’écran.\nVous pouvez également utiliser la fonction “seq()” pour créer une séquence personnalisée à utiliser dans une boucle “for”. Par exemple, si vous souhaitez afficher les nombres de 0 à 10 avec un pas de 2, vous pouvez utiliser la syntaxe suivante :\n\nfor (i in seq(0, 10, 2)) {\n  print(i)\n}\n\n[1] 0\n[1] 2\n[1] 4\n[1] 6\n[1] 8\n[1] 10\n\n\nDans cet exemple, la fonction “seq(0, 10, 2)” génère une séquence de nombres commençant par 0, se terminant par 10, et avec un pas de 2. Les nombres 0, 2, 4, 6, 8 et 10 seront affichés à l’écran."
  },
  {
    "objectID": "ia2.html#boucle-while",
    "href": "ia2.html#boucle-while",
    "title": "Les boucles dans R : Comprendre et utiliser la puissance des boucles",
    "section": "Boucle “while”",
    "text": "Boucle “while”\nLa boucle “while” est utilisée lorsque vous ne connaissez pas à l’avance le nombre de répétitions que vous souhaitez effectuer. La boucle continuera à s’exécuter tant que la condition spécifiée est vraie. La syntaxe générale de la boucle “while” en R est la suivante :\nwhile (condition) {\n  # Instructions à exécuter\n}\nExplorons cela avec un exemple simple. Supposons que nous voulions afficher les nombres de 1 à 5 à l’aide d’une boucle “while”. Voici comment nous pouvons le faire en R :\n\ni &lt;- 1\nwhile (i &lt;= 5) {\n  print(i)\n  i &lt;- i + 1\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\nDans cette boucle, nous utilisons une variable “i” pour garder une trace du nombre actuel que nous souhaitons afficher. La boucle continue à s’exécuter tant que “i” est inférieur ou égal à 5. À chaque itération, nous affichons la valeur de “i” à l’aide de la fonction “print()”, puis nous augmentons la valeur de “i” de 1 à l’aide de l’expression “i &lt;- i + 1”. Ainsi, les nombres de 1 à 5 seront affichés à l’écran.\nIl est important de s’assurer que la condition dans une boucle “while” finira par devenir fausse à un moment donné, sinon la boucle s’exécutera indéfiniment, entraînant une boucle infinie."
  },
  {
    "objectID": "ia2.html#contrôle-de-boucle",
    "href": "ia2.html#contrôle-de-boucle",
    "title": "Les boucles dans R : Comprendre et utiliser la puissance des boucles",
    "section": "Contrôle de boucle",
    "text": "Contrôle de boucle\nDans les boucles en R, vous pouvez utiliser des instructions spéciales pour contrôler le flux d’exécution à l’intérieur de la boucle. Voici quelques-unes des instructions couramment utilisées :\n\nL’instruction “break” est utilisée pour arrêter immédiatement l’exécution de la boucle et sortir de celle-ci.\nL’instruction “next” est utilisée pour passer à l’itération suivante de la boucle, en ignorant les instructions restantes dans le bloc de la boucle pour cette itération spécifique.\nL’instruction “return” est utilisée pour renvoyer une valeur et sortir de la fonction si la boucle est utilisée à l’intérieur d’une fonction.\n\nCes instructions vous permettent d’ajuster le comportement de votre boucle en fonction de conditions ou de critères spécifiques."
  },
  {
    "objectID": "ia2.html#conclusion",
    "href": "ia2.html#conclusion",
    "title": "Les boucles dans R : Comprendre et utiliser la puissance des boucles",
    "section": "Conclusion",
    "text": "Conclusion\nLes boucles sont des outils puissants en langage R qui permettent de répéter un bloc de code plusieurs fois. Les boucles “for” sont utilisées lorsque vous connaissez le nombre de répétitions à l’avance, tandis que les boucles “while” sont utilisées lorsque vous ne le connaissez pas à l’avance. Assurez-vous de bien contrôler vos boucles en utilisant les instructions “break”, “next” et “return” si nécessaire. Les boucles sont essentielles pour automatiser des tâches répétitives et rendre votre code plus efficace."
  }
]