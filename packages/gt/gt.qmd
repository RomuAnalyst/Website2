---
title: "**<u>gt</u>**"
subtitle: Personnalisation des tableaux de donn√©es
categories:
  - manipulation de donn√©es
  - table
  - personnalisation
image: gt.svg
lang: fr
page-layout: full
---

----------------

::: {.grid}

::: {.g-col-2}
<div style="margin-top: auto;"><a href="gt.qmd">![](gt.svg)</a></div>
:::

::: {.g-col-10}
<div style="margin-top: auto;"><p class="card-text">Le package **gt** est une biblioth√®que de R qui permet de cr√©er et de `personnaliser des tableaux` de donn√©es de mani√®re simple et √©l√©gante. Il a √©t√© d√©velopp√© pour simplifier la cr√©ation de tableaux dans R en offrant des fonctionnalit√©s de personnalisation avanc√©es tout en √©tant convivial pour les utilisateurs. Nous verrons comment utiliser **gt** pour cr√©er un tableau, personnaliser l'apparence, modifier les en-t√™tes, les couleurs, les polices, et bien plus encore.</p>  

```r
# Installation et chargement du package depuis le d√©p√¥t CRAN (Comprehensive R Archive Network)
install.packages("gt")
library(gt)
```
</p>
</div>
:::

:::

Le package gt permet de cr√©er des tableaux de donn√©es √† partir de diff√©rents types de donn√©es, notamment des dataframes, les tibbles et les data tables, des matrices et des listes. Il est √©galement possible de cr√©er des tableaux √† partir de donn√©es externes, telles que des fichiers CSV ou des bases de donn√©es.  
Ici, nous allons nous concentrer sur la cr√©ation de tableaux √† partir de donn√©es saisies dans R.

:::{.callout-tip}
## Pourquoi utiliser gt ? 

Les avantages de l'utilisation du package gt par rapport √† d'autres packages de cr√©ation de tableaux sont les suivants :

**1. Syntaxe simple et intuitive** :
Le package gt offre une syntaxe simple et lisible pour cr√©er des tableaux, ce qui le rend id√©al pour les d√©butants. Vous pouvez cr√©er des tableaux de donn√©es sans avoir besoin d'apprendre des commandes complexes.  
**2. Personnalisation avanc√©e** :
Vous pouvez personnaliser facilement l'apparence de votre tableau en modifiant les en-t√™tes, les couleurs, les polices, et bien plus encore. Cela permet de cr√©er des tableaux visuellement attrayants.  
**3. Compatibilit√© avec les donn√©es R** :
Le package gt est con√ßu pour fonctionner en harmonie avec les donn√©es R. Vous pouvez charger des donn√©es directement √† partir de votre environnement R et les afficher sous forme de tableau.  
**4. Int√©gration avec d'autres packages** :
gt s'int√®gre parfaitement avec d'autres packages populaires tels que [**dplyr**](/packages/dplyr/dplyr.qmd) et [**ggplot2**](/packages/ggplot2/ggplot2.qmd). Vous pouvez manipuler vos donn√©es avec dplyr, puis les afficher dans un tableau gt.  
**5. Exportation facile** :
Vous pouvez exporter vos tableaux gt vers diff√©rents formats, notamment HTML, ce qui facilite le partage de vos r√©sultats avec d'autres.
:::

## Cr√©ation d'un tableau simple

::: {.grid}

::: {.g-col-10}
```r
library(gt)

# cr√©ation du dataframe "joueur"
joueur <- data.frame( 
  Nom = c("Curry", "James", "Harden", "Durant","Wemby", "Tatum", "Brown"),
  Taille = paste(c(1.88, 2.06, 1.96, 2.08, 2.24, 2.03, 1.98), "m")
)

# cr√©ation du tableau de base gt
tableau <- joueur %>%
  gt() 
```
:::

::: {.g-col-2}
```{r echo=FALSE}
library(gt)

joueur <- data.frame( 
  Nom = c("Curry", "James", "Harden", "Durant","Wemby", "Tatum", "Brown"),
  Taille = paste(c(1.88, 2.06, 1.96, 2.08, 2.24, 2.03, 1.98), "m")
)

tableau <- joueur %>%
  gt() 
tableau

```

:::

:::

Travail effectu√© : chargement du package gt, puis cr√©ation d'un tableau de base √† partir d'un dataframe en utilisant la fonction gt(). Le tableau est ensuite stock√© dans la variable tableau et affich√© dans la console.




Voici un exemple montrant comment personnaliser un tableau gt avec des couleurs et des en-t√™tes de colonnes :  

::: {.grid}

::: {.g-col-10}
```{r}
# Petit rappel du dataframe "joueur"
joueur <- data.frame(
  Nom = c("Curry", "James", "Harden", "Durant", "Wemby", "Tatum", "Brown"),
  Taille = paste(c(1.88, 2.06, 1.96, 2.08, 2.24, 2.03, 1.98), "m")
)

# Ajout d'une palette de couleurs, de nouvelles etiquettes de colonne, d'un titre et des sous-titres
tableau <- joueur %>%
  gt() %>%
  data_color(columns = Taille,
             palette = "viridis",
             reverse = TRUE) %>%
  cols_label(Nom = "Joueur",
             Taille = "Taille (m)") %>%
  tab_header(title = "Joueurs NBA",
             subtitle = "Taille en m√®tres...üôÇ")
```
:::

::: {.g-col-2}
```{r echo=FALSE}
tableau
```
:::

:::


Travail effectu√© : utilisation de **data_color** pour ajouter des couleurs aux donn√©es de la colonne "Taille" , **tab_header** pour personnaliser le titre et le sous-titre du tableau et **cols_label** pour modifier les √©tiquettes de colonnes.

Cette petite introduction n'est qu'un tr√®s petit aper√ßu des possibilit√©s de ce package. Nous tacherons d'aller un peu plus loin dans les prochaines lignes.



## Agr√©gation

Agr√©gation de donn√©es
Le package gt vous permet √©galement d'agr√©gation de donn√©es pour r√©sumer les informations dans le tableau. Voici comment vous pouvez agr√©ger des donn√©es dans un tableau gt :

::: {.grid}

::: {.g-col-8}
```{r}
# Cr√©ation d'un tableau de base
data <- data.frame(
  Cat√©gorie = c("Fruits", "L√©gumes", "Fruits", "L√©gumes"),
  Produit = c("Pommes", "Carottes", "Bananes", "Brocolis"),
  Quantit√© = c(10, 15, 8, 12)
)

tableau <- data %>%
  gt()

# Agr√©gation de donn√©es
tableau_agr√©g√© <- tableau %>%
  grand_summary_rows(
    columns = Quantit√©,
    fns = list(Total = "sum")
  )
```
:::

::: {.g-col-4}
```{r echo=FALSE}
tableau_agr√©g√©
```
:::

:::

Dans cet exemple, nous avons utilis√© **grand_summary_rows** pour agr√©ger les donn√©es dans la colonne "Quantit√©" en calculant la somme totale. Cela ajoute une ligne de r√©sum√© au tableau.

Le *groupement* et *l'agr√©gation* de donn√©es dans le package *gt* sont utiles pour organiser et r√©sumer des informations complexes dans vos tableaux, en permettant une visualisation plus claire des donn√©es.





## Sauvegarde du tableau
Sauvegarde en HTML
Vos tableaux au format HTML, vous permettent de partager vos r√©sultats de mani√®re conviviale sur le web. Voici comment vous pouvez sauvegarder un tableau gt en HTML :

```{r}
# Cr√©ation du tableau √† partir du dataset mtcars
df_mtcars <- mtcars %>% head(10) %>% gt()

# Sauvegarder le tableau en format HTML
gtsave(df_mtcars, file = "tableau_cars.html")
```

Dans cet exemple, nous avons cr√©√© un tableau de base avec le package gt, puis utilis√© la fonction **gtsave** pour sauvegarder le tableau. Vous pouvez sp√©cifier le nom du fichier HTML dans l'argument file.

Exportation en d'autres formats
Le package gt vous permet √©galement d'exporter vos tableaux dans d'autres formats, tels que PDF et Excel. 
Il est important de noter que pour exporter en PDF et Excel, vous devrez peut-√™tre installer et charger d'autres packages R sp√©cifiques √† ces formats.. Assurez-vous d'installer et de charger les packages n√©cessaires avant d'effectuer l'exportation vers ces formats.

L'exportation vers diff√©rents formats permet de partager vos tableaux avec d'autres de mani√®re flexible, en fonction de leurs besoins.


## Exemple : Analyse des ventes de pizzas

Ici nous allons reprendre un code de la documentation {{< fa brands r-project >}} du package gt et l'adapter √† notre cas d'√©tude. Nous utiliserons le dataset *pizzaplace* qui contient les donn√©es de vente d'une pizzeria.


Vous trouverez dans le code suivant de nombreuses fonctions du package *gt* qui permettent de personnaliser le tableau. Les commentaires dans le code vous permettront de comprendre le r√¥le de chaque fonction.

```{r}
final <- pizzaplace |>
  dplyr::group_by(type, size) |>  # regroupement par type et taille de pizza
  dplyr::summarize(  # donn√©es aggr√©g√©es : nombre de pizza vendues et gain (somme des prix)
    nb_vendu= dplyr::n(),
    gain = sum(price),
    .groups = "drop_last"
  ) |>
  dplyr::group_by(type) |>  # regroupement par type de pizza
  dplyr::mutate(part_vendu = nb_vendu / sum(nb_vendu)) |>  # part des ventes pour chaque type de pizza en divisant le nombre de ventes par le total des ventes pour chaque type
  dplyr::mutate(size = factor(  # conversion de la taille de pizza en facteur pour pouvoir la trier
    size, levels = c("S", "M", "L", "XL", "XXL"))
  ) |>
  dplyr::arrange(type, size) |>  # tri par type de pizza (type) et taille de pizza (size).
  gt(  # conversion en tableau gt
    rowname_col = "size",
    groupname_col = "type"
  ) |> tab_header(title = "Ventes de pizzas et gains - 2015",
                  subtitle = "Donn√©es de la pizzeria Pizzaplace") |>
  cols_label(  # renommage des colonnes
    nb_vendu = "Nombre de ventes",
    gain = "Gains",
    part_vendu = "Part des ventes"
  ) |>
  fmt_integer(columns = nb_vendu) |>  # formatage des nombres de ventes en entiers
  fmt_currency(columns = gain,  # formatage des gains en euros
               currency = "euro",
               placement = "right",
               incl_space = TRUE) |>
  fmt_percent(  # formatage des pourcentages avec une d√©cimale
    columns = part_vendu,
    decimals = 1
  ) |>
  cols_merge(  # fusion des colonnes "size" et "part_vendu" pour afficher la taille et la part de vente de cette pizza dans la m√™me cellule
    columns = c(size, part_vendu),
    pattern = "{1} ({2})"
  ) |>
  cols_align(align = "left", columns = stub()) |> # alignement √† gauche des colonnes
  data_color(  # coloration des donn√©es en fonction de leur valeur
    method = "numeric",
    palette = "ggsci::purple_material"
  )

```

Le tableau final reprend les donn√©es de ventes de pizzas et les agr√®ge par type de pizza. Les donn√©es sont ensuite tri√©es par type de pizza et taille de pizza.

<center>**Ci-dessous, les 3 stades de la cr√©ation du tableau :**</center>.

::: {.grid}

::: {.g-col-4}
```r
20 lignes al√©atoires du dataset pizzaplace
```
```{r echo=FALSE}
data.frame(pizzaplace[sample(1:nrow(pizzaplace),20, replace = TRUE), ])
```
:::

::: {.g-col-4}
```r
Regroupement type et taille de pizza  
(nombre de pizzas, somme des prix et part des ventes)
```
```{r echo=FALSE}
```
```{r echo=FALSE}
type <- pizzaplace |>
  dplyr::group_by(type, size) |>
  dplyr::summarize(
    nb_vendu= dplyr::n(),
    gain = sum(price),
    .groups = "drop_last"
  ) |>
  dplyr::group_by(type) |>
  dplyr::mutate(part_vendu = nb_vendu / sum(nb_vendu)) |>
  dplyr::mutate(size = factor(
    size, levels = c("S", "M", "L", "XL", "XXL"))
  ) |>
  dplyr::arrange(type, size)


data.frame(type)
```
:::

::: {.g-col-4}
```r
Tableau final des donn√©es de ventes
```
```{r echo=FALSE}
final
```
:::

:::


