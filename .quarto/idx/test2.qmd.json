{"title":"`ggplot2`, créer et superposer des graphiques{#ggplo2}","markdown":{"yaml":{"page-layout":"full","title-block-banner":false,"execute":{"message":false,"warning":false,"output":true},"editor_options":{"chunk_output_type":"console"},"toc":true,"toc-title":"Table des matières"},"headingText":"`ggplot2`, créer et superposer des graphiques{#ggplo2}","containsRefs":false,"markdown":"\n\n\n\n\n<style type=\"text/css\">\n.red {\n  color: red;\n}\n</style>\n\n| Shortcode                                          | Icon                                      |\n| -------------------------------------------------- | ----------------------------------------- |\n| `{{{< fa thumbs-up >}}}`                           | {{< fa thumbs-up >}}                      |\n| `{{{< fa folder >}}}`                              | {{< fa folder >}}                         |\n| `{{{< fa chess-pawn >}}}`                          | {{< fa chess-pawn >}}                     |\n| `{{{< fa brands bluetooth >}}}`                    | {{< fa brands bluetooth >}}               |\n| `{{{< fa brands twitter size=2xl >}}}` (HTML only) | {{< fa brands twitter size=2xl >}}        |\n| `{{{< fa brands github size=5x >}}}` (HTML only)   | {{< fa brands github size=5x >}}          |\n| `{{{< fa battery-half size=Huge >}}}`              | {{< fa battery-half size=Huge >}}         |\n| `{{{< fa envelope title=\"An envelope\" >}}}`        | {{< fa envelope title=\"An envelope\" >}}   |\n\n\n\nLe but de la visualisation de données étant de représenter graphiquement des données brutes (ou quasi-brutes), il est souvent nécessaire de prendre en compte plusieurs variables. Nous devons donc aller plus loin que les graphiques de base (nuage de points, droite de regression, boite à moustache, diagramme en barres ou circulaires, ...), pour les combiner par exemple.\n\nAvec le langage de base (package `graphics` notamment), il est possible de faire des graphiques évolués, mais avec beaucoup de paramétrages *à la main*. Pour cela on va commencer par s'intéresser au jeu de données `mtcars`.\n\n\n```{r}\nhead(iris)\n```\n\n\n```{r}\n# ?mtcars ou help(mtcars)\nstr(mtcars)\n```\n\n```r\nplot(mtcars$hp,mtcars$mpg)\n```\n\n<center>![ ](img/mtcars_plot.png)</center>  \n<br>\n\nEssayons d'améliorer ce graphique...\nCi dessous, un exemple de graphique avancé, représentant 4 variables (trois quantitatives et une qualitative), ainsi qu'une explication succincte des différentes fonctions utilisées, et quelques paramètres de celles-ci.  \n\n\n\n```r\npar(family = \"serif\", mar = c(5, 4, 2, 0)+.1)\ncouleurs_am = brewer.pal(3, \"Dark2\")\nplot(mpg ~ hp, \n     data = mtcars,\n     pch = 19,\n     cex = wt/3,\n     col = couleurs_am[mtcars$am+1],\n     main = \"Consommation en fonction de la Puissance\",\n     sub = \"Source : 1974 Motor Trend US magazine\", font.sub = 3, cex.sub = .8,\n     xlab = \"Puissance (en ch)\",\n     ylab = \"Consommation en Miles/Galon\",\n     bty = \"n\", axes = FALSE)\naxis(1, lwd = 0, lwd.ticks = .5)\nat.y = axis(2, lwd = 0, lwd.ticks = .5, labels = FALSE)\ntext(y = at.y, x = 35, labels = at.y, srt = 0, pos = 2, xpd = TRUE)\nl1 = legend(\"topright\", legend = c(\"Automatique\", \"Manuelle\"), \n       col = couleurs_am, bty = \"n\", cex = .8, pch = 19,\n       text.width = 50, text.col = couleurs_am, \n       title = \"Boite de vitesse\", title.col = \"black\")\nlegend(l1$rect$left, l1$rect$top-l1$rect$h-1, \n       legend = range(mtcars$wt), title = \"Poids  (1000 lbs)\",\n       pch = 19, pt.cex = range(mtcars$wt)/3, bty = \"n\", cex = .8, col = gray(.5),\n       text.width = 50, adj = -.25)\noutliers_hp = subset(mtcars, subset = hp > 250)\ntext(outliers_hp$hp, outliers_hp$mpg, row.names(outliers_hp), pos = c(3, 2), cex = .8, font = 4)\noutliers_mpg = subset(mtcars, subset = mpg > 30)\ntext(outliers_mpg$hp, outliers_mpg$mpg, row.names(outliers_mpg), pos = 4, cex = .8, font = 4)\n```\n  \n<center>![ ](pics/images/Consommation en fonction de la puissance.png)</center>  \n<br>\n\n\n- La fonction `par()` permet de modifier les paramètres graphiques, tel que :\n    - `mar` pour les marges (un vecteur numérique de taille 4 qui permet de définir les tailles des marges dans l'ordre suivant : bas, gauche, haut, droite. Par défaut il vaut c(5.1, 4.1, 4.1, 2.1) )\n    - `family` pour la famille de police d'écriture\n    - certains paramètres ci-après sont définissables globalement dans la fonction `par()`, ou localement dans les fonctions suivantes\n- Les paramètres de la fonction `plot()`\n    - `pch` : symbole utilisé pour chaque point (ici `19` indique un rond plein)\n    - `cex` : taille du point (ici en fonction de la variable `wt`)\n    - `col` : couleur des points (ici en fonction de la variable  `am`)\n    - `main`, `sub`, `xlab`, `ylab` : resp. titre, sous-titre, intitulé en abscisse et intitulé en ordonnée\n    - `*.sub` : indication spécifique pour le sous-titre \n    - `bty` : type de la boite (ici `n` veut dire rien autour du graphique)\n    - `axes` : présence ou non des axes (non ici)\n- La fonction `axis()` qui permet d'ajouter un axe (`1` : en abscisse, et `2` : en ordonnée)\n    - si rien d'indiqué pour `at`, utilisation des `ticks` par défaut\n    - `lwd` : largeur de la ligne (ici non-présente)\n    - `lwd.ticks` : largeur des ticks (assez fine ici)\n    - renvoie les valeurs des ticks\n- La fonction `text()` permet d'écrire du texte sur le graphique\n    - le `x = 35` est choisi par expérience\n    - `srt` : angle du texte\n    - `pos` : ajustement du texte par rapport aux coordonnées indiquées\n    - `xpd` : permet d'écrire en dehors du graphique (dans les marges donc)\n- La fonction `legend()` permet d'ajouter une légende\n    - position : soit $(x,y)$, soit chaine spécifique\n    - `legend` : texte des items\n    - `col`, `bty`, `cex`, `pch` : identique à précédemment\n    - `text.width` et `text.col` : largeur du texte des items et couleur(s)\n    - `title` et `title.col` : titre de la légende (et couleur du titre)\n    - renvoie une liste avec deux objets (`rect` qui contient des infos sur le rectangle occupé par la légende dans le graphique et `text` qui contient les coordonnées du texte des items)\n    - `pt.cex` : taille des symboles\n    - `adj`: ajustement du texte\n    \n\n\n\n\n\n\nL'utilisateur souhaite réaliser des graphiques (nuages de points, histogrammes, densité...) et les personnaliser (légendes, titres, échelles...).\n\nIl est recommandé d'utiliser le package ggplot2 qui permet de réaliser et de personnaliser un grand nombre de représentations graphiques;\nIl est conseillé aux utilisateurs débutants d'utiliser l'add-in esquisse pour se familiariser avec ggplot2.\n\nVous pouvez également accéder à `esquisse` en exécutant le code suivant:\n\n\n```r\nlibrary(esquisse)\nesquisser()\n```\n\n\nL'objectif du *package* `ggplot2` est de fournir une approche unique pour produire quasiment toute représentation graphique de données. Ce _package_ propose un grand nombre de fonctions permettant de personnaliser finement les représentations graphiques. Cette fiche n'est donc qu'une introduction succincte à `ggplot2`. Pour des formations plus détaillées, se référer à {#ggplot2Ressources}.\n\n\n\n### Introduction\n\n**La fonction essentielle de `ggplot2` est `ggplot()`.** Il faut définir quatre éléments pour construire un graphique avec `ggplot()`: \n\n- la **table de données** ;\n- le ***mapping*** : on définit dans l'_aesthetic_ (ou `aes`) le lien entre les variables des données et ce que l'on veut représenter sur le graphique (quelle variable sur l'axe `x`, sur l'axe `y`, quelle variable pour définir une graduation de couleurs...) ;\n- la **forme géométrique ou _geometry_ ** : on définit la représentation graphique qu'on souhaite utiliser. Les géométries ont toutes un nom qui commence par `geom_`; par exemple, il faut utiliser la géométrie `geom_point()` pour réaliser un nuage de points;\n- les **paramètres** : on définit les autres paramètres qui dépendent de constantes (par exemple : je veux que toutes mes lignes soient rouges ou de taille 2 pixels).\n\n**La construction d'un graphique repose sur le principe de couches successives.** Les différentes couches graphiques se superposent et s'enchaînent grâce à l'**opérateur `+`**, comme un pipe. Il est possible d'aller à la ligne dans une instruction `ggplot()`, il suffit que l'opérateur `+` figure à la fin de la ligne.\n\nVoici un exemple de code qui crée un nuage de points (géométrie `geom_point()`) à partir des données `mes_donnees`, avec les variables `variable1` en abscisse et `variable2` en ordonnée:\n\n<details>\n  <summary>**Se mettre d'accord sur la trame qui sera le squelette du rapport**</summary>\n\n```r\nlibrary(ggplot2)\nggplot(data = iris) + \n  geom_point(mapping = aes(x = iris$Sepal.Length, y = iris$Sepal.Width))\n```\n\n```\n## Warning: Use of `iris$Sepal.Length` is discouraged. Use `Sepal.Length` instead.\n```\n\n```\n## Warning: Use of `iris$Sepal.Width` is discouraged. Use `Sepal.Width` instead.\n```\n\n<img src=\"02-ggplo2Rmd_files/figure-html/unnamed-chunk-3-1.png\" width=\"672\" />\n</details> \n\n\n\n\n\n\n```r\nlibrary(ggplot2)\nggplot(data = iris) + \n  geom_point(mapping = aes(x = iris$Sepal.Length, y = iris$Sepal.Width))\n```\n\n### Le *mapping* et l'utilisation d'`aes()` {#mapping}\n\nLe *mapping* désigne dans `ggplot2` la relation entre un **attribut graphique** de la `geometry` (abscisse, ordonnée, couleur...) et **une variable** présente dans la table de données. On déclare le *mapping* grâce à la fonction `aes()` (pour _aesthetic_), qui sert donc à identifier les variables que l'on souhaite représenter sur le graphique. \n\n**Les arguments fondamentaux de `aes()` sont les variables représentées sur l'axe des abscisses et l'axe des ordonnées (`x` et `y`).** Par exemple, on écrit `aes(x = niveau_vie_median, y = taux_chomage)` si l'on souhaite représenter pour chaque iris le taux de chômage (sur l'axe `y`) en fonction du niveau de vie médian (sur l'axe `x`).\n\n\nPar ailleurs, la fonction `aes()` admet d'autres arguments qui permettent de modifier l'apparence des attributs graphiques selon une troisième variable du jeu de données. Voici les arguments supplémentaires les plus courants:\n\nAttribut   |Description\n-----------------|------------------------------------\n*`color`*| *Couleur des lignes ou des points*\n*`shape`*| *Forme des points*\n*`size`*| *Taille des points*\n*`alpha`*| *Transparence des points*\n*`fill`*| *Couleur des surfaces*\n*`linetype`*| *Type de ligne (continue, pointillée, ...)*\n\n\nDans l'exemple qui suit, on représente pour chaque iris le taux de chômage (sur l'axe `y`) en fonction du niveau de vie médian (sur l'axe `x`), en colorant les points en fonction de la part des cadres et professions intellectuelles supérieures parmi les actifs de l'iris (`color = part_cadres`).\n\n\n\nIl est également possible d'utiliser ces mêmes arguments pour modifier un attribut graphique sans le lier à une variable. En ce cas, on définit l'attribut **à l'extérieur de l'_aesthetic_** (donc à l'extérieur de `aes()`). Voici l'exemple précédent, modifié pour que tous les points soient (rouge), et non en fonction d'une variable. L'argument `color` est donc à l'extérieur de `aes()`.\n\n\n\n::: {.remarque data-latex=\"\"}\nLa notion de *mapping* et la définition des attributs graphiques à l'intérieur et à l'extérieur d'`aes()` sont une des principales difficultés de `ggplot2`. Il est normal de tâtonner lorsqu'on commence à les utiliser. Pour s'y retrouver, il suffit de suivre la règle suivante. **Si on établit un lien entre les valeurs d’une variable et un attribut graphique, il s'agit d'un _mapping_ qui doit être défini à _l'intérieur_ de la fonction `aes()`. Dans le cas contraire, il s'agit d'un simple paramètre du graphique, qui doit être défini à _l'extérieur_ de la fonction `aes()`.**\n:::\n\n### Les formes géométriques\n\nLa forme géométrique ou _geometry_ désigne le type de représentation graphique utilisée (nuage de points, histogrammes...). On spécifie le type de représentation que l'on souhait en utilisant une fonction dont le nom commence par **`geom_`**. Le tableau ci-dessous présente quelques représentations graphiques classiques. \n\n_geometry_         | Description              | Arguments \n-------------------|--------------------------|------------------------------------\n`geom_point()`     |\tNuage de points \t      | `x`, `y`, `shape`, `fill`, `size`\n`geom_line()`\t     | Ligne                    | `x`, `y`, `linetype`\n`geom_bar()`       |\tDiagramme en barres \t  | `x`, `fill`, `linetype`, `weight`\n`geom_histogram()` |\tHistogramme \t          | `x`, `fill`, `linetype`, `weight`\n`geom_boxplot()`\t | Boîte à moustaches \t    | `x`, `y`, `fill`, `weight`\n`geom_density()`\t | Courbe de densité        |\t`x`, `y`, `fill`, `color`, `linetype`\n\nVoici deux exemples d'utilisation.\n\n\n\n\n\n::: {.remarque data-latex=\"\"}\nIl existe un grand nombre de géométries dans `ggplot2`. Vous pouvez en afficher la liste en exécutant la commande `help.search(\"^geom_\", package = \"ggplot2\")`.\n\nPar ailleurs, de très nombreux *packages* proposent encore d'autres géométries pour réaliser des représentations graphiques particulières (cartes avec `ggmap`, arbres généalogiques avec `ggtree` et `ggenealogy`, résultats d'élections avec `ggparliament`...).\n:::\n","srcMarkdownNoYaml":"\n\n# `ggplot2`, créer et superposer des graphiques{#ggplo2}\n\n\n\n<style type=\"text/css\">\n.red {\n  color: red;\n}\n</style>\n\n| Shortcode                                          | Icon                                      |\n| -------------------------------------------------- | ----------------------------------------- |\n| `{{{< fa thumbs-up >}}}`                           | {{< fa thumbs-up >}}                      |\n| `{{{< fa folder >}}}`                              | {{< fa folder >}}                         |\n| `{{{< fa chess-pawn >}}}`                          | {{< fa chess-pawn >}}                     |\n| `{{{< fa brands bluetooth >}}}`                    | {{< fa brands bluetooth >}}               |\n| `{{{< fa brands twitter size=2xl >}}}` (HTML only) | {{< fa brands twitter size=2xl >}}        |\n| `{{{< fa brands github size=5x >}}}` (HTML only)   | {{< fa brands github size=5x >}}          |\n| `{{{< fa battery-half size=Huge >}}}`              | {{< fa battery-half size=Huge >}}         |\n| `{{{< fa envelope title=\"An envelope\" >}}}`        | {{< fa envelope title=\"An envelope\" >}}   |\n\n\n\nLe but de la visualisation de données étant de représenter graphiquement des données brutes (ou quasi-brutes), il est souvent nécessaire de prendre en compte plusieurs variables. Nous devons donc aller plus loin que les graphiques de base (nuage de points, droite de regression, boite à moustache, diagramme en barres ou circulaires, ...), pour les combiner par exemple.\n\nAvec le langage de base (package `graphics` notamment), il est possible de faire des graphiques évolués, mais avec beaucoup de paramétrages *à la main*. Pour cela on va commencer par s'intéresser au jeu de données `mtcars`.\n\n\n```{r}\nhead(iris)\n```\n\n\n```{r}\n# ?mtcars ou help(mtcars)\nstr(mtcars)\n```\n\n```r\nplot(mtcars$hp,mtcars$mpg)\n```\n\n<center>![ ](img/mtcars_plot.png)</center>  \n<br>\n\nEssayons d'améliorer ce graphique...\nCi dessous, un exemple de graphique avancé, représentant 4 variables (trois quantitatives et une qualitative), ainsi qu'une explication succincte des différentes fonctions utilisées, et quelques paramètres de celles-ci.  \n\n\n\n```r\npar(family = \"serif\", mar = c(5, 4, 2, 0)+.1)\ncouleurs_am = brewer.pal(3, \"Dark2\")\nplot(mpg ~ hp, \n     data = mtcars,\n     pch = 19,\n     cex = wt/3,\n     col = couleurs_am[mtcars$am+1],\n     main = \"Consommation en fonction de la Puissance\",\n     sub = \"Source : 1974 Motor Trend US magazine\", font.sub = 3, cex.sub = .8,\n     xlab = \"Puissance (en ch)\",\n     ylab = \"Consommation en Miles/Galon\",\n     bty = \"n\", axes = FALSE)\naxis(1, lwd = 0, lwd.ticks = .5)\nat.y = axis(2, lwd = 0, lwd.ticks = .5, labels = FALSE)\ntext(y = at.y, x = 35, labels = at.y, srt = 0, pos = 2, xpd = TRUE)\nl1 = legend(\"topright\", legend = c(\"Automatique\", \"Manuelle\"), \n       col = couleurs_am, bty = \"n\", cex = .8, pch = 19,\n       text.width = 50, text.col = couleurs_am, \n       title = \"Boite de vitesse\", title.col = \"black\")\nlegend(l1$rect$left, l1$rect$top-l1$rect$h-1, \n       legend = range(mtcars$wt), title = \"Poids  (1000 lbs)\",\n       pch = 19, pt.cex = range(mtcars$wt)/3, bty = \"n\", cex = .8, col = gray(.5),\n       text.width = 50, adj = -.25)\noutliers_hp = subset(mtcars, subset = hp > 250)\ntext(outliers_hp$hp, outliers_hp$mpg, row.names(outliers_hp), pos = c(3, 2), cex = .8, font = 4)\noutliers_mpg = subset(mtcars, subset = mpg > 30)\ntext(outliers_mpg$hp, outliers_mpg$mpg, row.names(outliers_mpg), pos = 4, cex = .8, font = 4)\n```\n  \n<center>![ ](pics/images/Consommation en fonction de la puissance.png)</center>  \n<br>\n\n\n- La fonction `par()` permet de modifier les paramètres graphiques, tel que :\n    - `mar` pour les marges (un vecteur numérique de taille 4 qui permet de définir les tailles des marges dans l'ordre suivant : bas, gauche, haut, droite. Par défaut il vaut c(5.1, 4.1, 4.1, 2.1) )\n    - `family` pour la famille de police d'écriture\n    - certains paramètres ci-après sont définissables globalement dans la fonction `par()`, ou localement dans les fonctions suivantes\n- Les paramètres de la fonction `plot()`\n    - `pch` : symbole utilisé pour chaque point (ici `19` indique un rond plein)\n    - `cex` : taille du point (ici en fonction de la variable `wt`)\n    - `col` : couleur des points (ici en fonction de la variable  `am`)\n    - `main`, `sub`, `xlab`, `ylab` : resp. titre, sous-titre, intitulé en abscisse et intitulé en ordonnée\n    - `*.sub` : indication spécifique pour le sous-titre \n    - `bty` : type de la boite (ici `n` veut dire rien autour du graphique)\n    - `axes` : présence ou non des axes (non ici)\n- La fonction `axis()` qui permet d'ajouter un axe (`1` : en abscisse, et `2` : en ordonnée)\n    - si rien d'indiqué pour `at`, utilisation des `ticks` par défaut\n    - `lwd` : largeur de la ligne (ici non-présente)\n    - `lwd.ticks` : largeur des ticks (assez fine ici)\n    - renvoie les valeurs des ticks\n- La fonction `text()` permet d'écrire du texte sur le graphique\n    - le `x = 35` est choisi par expérience\n    - `srt` : angle du texte\n    - `pos` : ajustement du texte par rapport aux coordonnées indiquées\n    - `xpd` : permet d'écrire en dehors du graphique (dans les marges donc)\n- La fonction `legend()` permet d'ajouter une légende\n    - position : soit $(x,y)$, soit chaine spécifique\n    - `legend` : texte des items\n    - `col`, `bty`, `cex`, `pch` : identique à précédemment\n    - `text.width` et `text.col` : largeur du texte des items et couleur(s)\n    - `title` et `title.col` : titre de la légende (et couleur du titre)\n    - renvoie une liste avec deux objets (`rect` qui contient des infos sur le rectangle occupé par la légende dans le graphique et `text` qui contient les coordonnées du texte des items)\n    - `pt.cex` : taille des symboles\n    - `adj`: ajustement du texte\n    \n\n\n\n\n\n\nL'utilisateur souhaite réaliser des graphiques (nuages de points, histogrammes, densité...) et les personnaliser (légendes, titres, échelles...).\n\nIl est recommandé d'utiliser le package ggplot2 qui permet de réaliser et de personnaliser un grand nombre de représentations graphiques;\nIl est conseillé aux utilisateurs débutants d'utiliser l'add-in esquisse pour se familiariser avec ggplot2.\n\nVous pouvez également accéder à `esquisse` en exécutant le code suivant:\n\n\n```r\nlibrary(esquisse)\nesquisser()\n```\n\n\nL'objectif du *package* `ggplot2` est de fournir une approche unique pour produire quasiment toute représentation graphique de données. Ce _package_ propose un grand nombre de fonctions permettant de personnaliser finement les représentations graphiques. Cette fiche n'est donc qu'une introduction succincte à `ggplot2`. Pour des formations plus détaillées, se référer à {#ggplot2Ressources}.\n\n\n\n### Introduction\n\n**La fonction essentielle de `ggplot2` est `ggplot()`.** Il faut définir quatre éléments pour construire un graphique avec `ggplot()`: \n\n- la **table de données** ;\n- le ***mapping*** : on définit dans l'_aesthetic_ (ou `aes`) le lien entre les variables des données et ce que l'on veut représenter sur le graphique (quelle variable sur l'axe `x`, sur l'axe `y`, quelle variable pour définir une graduation de couleurs...) ;\n- la **forme géométrique ou _geometry_ ** : on définit la représentation graphique qu'on souhaite utiliser. Les géométries ont toutes un nom qui commence par `geom_`; par exemple, il faut utiliser la géométrie `geom_point()` pour réaliser un nuage de points;\n- les **paramètres** : on définit les autres paramètres qui dépendent de constantes (par exemple : je veux que toutes mes lignes soient rouges ou de taille 2 pixels).\n\n**La construction d'un graphique repose sur le principe de couches successives.** Les différentes couches graphiques se superposent et s'enchaînent grâce à l'**opérateur `+`**, comme un pipe. Il est possible d'aller à la ligne dans une instruction `ggplot()`, il suffit que l'opérateur `+` figure à la fin de la ligne.\n\nVoici un exemple de code qui crée un nuage de points (géométrie `geom_point()`) à partir des données `mes_donnees`, avec les variables `variable1` en abscisse et `variable2` en ordonnée:\n\n<details>\n  <summary>**Se mettre d'accord sur la trame qui sera le squelette du rapport**</summary>\n\n```r\nlibrary(ggplot2)\nggplot(data = iris) + \n  geom_point(mapping = aes(x = iris$Sepal.Length, y = iris$Sepal.Width))\n```\n\n```\n## Warning: Use of `iris$Sepal.Length` is discouraged. Use `Sepal.Length` instead.\n```\n\n```\n## Warning: Use of `iris$Sepal.Width` is discouraged. Use `Sepal.Width` instead.\n```\n\n<img src=\"02-ggplo2Rmd_files/figure-html/unnamed-chunk-3-1.png\" width=\"672\" />\n</details> \n\n\n\n\n\n\n```r\nlibrary(ggplot2)\nggplot(data = iris) + \n  geom_point(mapping = aes(x = iris$Sepal.Length, y = iris$Sepal.Width))\n```\n\n### Le *mapping* et l'utilisation d'`aes()` {#mapping}\n\nLe *mapping* désigne dans `ggplot2` la relation entre un **attribut graphique** de la `geometry` (abscisse, ordonnée, couleur...) et **une variable** présente dans la table de données. On déclare le *mapping* grâce à la fonction `aes()` (pour _aesthetic_), qui sert donc à identifier les variables que l'on souhaite représenter sur le graphique. \n\n**Les arguments fondamentaux de `aes()` sont les variables représentées sur l'axe des abscisses et l'axe des ordonnées (`x` et `y`).** Par exemple, on écrit `aes(x = niveau_vie_median, y = taux_chomage)` si l'on souhaite représenter pour chaque iris le taux de chômage (sur l'axe `y`) en fonction du niveau de vie médian (sur l'axe `x`).\n\n\nPar ailleurs, la fonction `aes()` admet d'autres arguments qui permettent de modifier l'apparence des attributs graphiques selon une troisième variable du jeu de données. Voici les arguments supplémentaires les plus courants:\n\nAttribut   |Description\n-----------------|------------------------------------\n*`color`*| *Couleur des lignes ou des points*\n*`shape`*| *Forme des points*\n*`size`*| *Taille des points*\n*`alpha`*| *Transparence des points*\n*`fill`*| *Couleur des surfaces*\n*`linetype`*| *Type de ligne (continue, pointillée, ...)*\n\n\nDans l'exemple qui suit, on représente pour chaque iris le taux de chômage (sur l'axe `y`) en fonction du niveau de vie médian (sur l'axe `x`), en colorant les points en fonction de la part des cadres et professions intellectuelles supérieures parmi les actifs de l'iris (`color = part_cadres`).\n\n\n\nIl est également possible d'utiliser ces mêmes arguments pour modifier un attribut graphique sans le lier à une variable. En ce cas, on définit l'attribut **à l'extérieur de l'_aesthetic_** (donc à l'extérieur de `aes()`). Voici l'exemple précédent, modifié pour que tous les points soient (rouge), et non en fonction d'une variable. L'argument `color` est donc à l'extérieur de `aes()`.\n\n\n\n::: {.remarque data-latex=\"\"}\nLa notion de *mapping* et la définition des attributs graphiques à l'intérieur et à l'extérieur d'`aes()` sont une des principales difficultés de `ggplot2`. Il est normal de tâtonner lorsqu'on commence à les utiliser. Pour s'y retrouver, il suffit de suivre la règle suivante. **Si on établit un lien entre les valeurs d’une variable et un attribut graphique, il s'agit d'un _mapping_ qui doit être défini à _l'intérieur_ de la fonction `aes()`. Dans le cas contraire, il s'agit d'un simple paramètre du graphique, qui doit être défini à _l'extérieur_ de la fonction `aes()`.**\n:::\n\n### Les formes géométriques\n\nLa forme géométrique ou _geometry_ désigne le type de représentation graphique utilisée (nuage de points, histogrammes...). On spécifie le type de représentation que l'on souhait en utilisant une fonction dont le nom commence par **`geom_`**. Le tableau ci-dessous présente quelques représentations graphiques classiques. \n\n_geometry_         | Description              | Arguments \n-------------------|--------------------------|------------------------------------\n`geom_point()`     |\tNuage de points \t      | `x`, `y`, `shape`, `fill`, `size`\n`geom_line()`\t     | Ligne                    | `x`, `y`, `linetype`\n`geom_bar()`       |\tDiagramme en barres \t  | `x`, `fill`, `linetype`, `weight`\n`geom_histogram()` |\tHistogramme \t          | `x`, `fill`, `linetype`, `weight`\n`geom_boxplot()`\t | Boîte à moustaches \t    | `x`, `y`, `fill`, `weight`\n`geom_density()`\t | Courbe de densité        |\t`x`, `y`, `fill`, `color`, `linetype`\n\nVoici deux exemples d'utilisation.\n\n\n\n\n\n::: {.remarque data-latex=\"\"}\nIl existe un grand nombre de géométries dans `ggplot2`. Vous pouvez en afficher la liste en exécutant la commande `help.search(\"^geom_\", package = \"ggplot2\")`.\n\nPar ailleurs, de très nombreux *packages* proposent encore d'autres géométries pour réaliser des représentations graphiques particulières (cartes avec `ggmap`, arbres généalogiques avec `ggtree` et `ggenealogy`, résultats d'élections avec `ggparliament`...).\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true,"link-external-filter":"^(?:http:|https:)\\/\\/romuanalyst.github.io/Website2/**"},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["assets/ek-styles.css"],"highlight-style":{"light":"assets/ek-light.theme","dark":"assets/ek-dark.theme"},"toc":true,"output-file":"test2.html"},"language":{"toc-title-document":"Table des matières","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","section-title-abstract":"Résumé","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les références","section-title-reuse":"Réutilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit :","appendix-attribution-bibtex":"BibTeX","title-block-author-single":"Auteur·rice","title-block-author-plural":"Auteur·rice·s","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifié","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copié","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Faire part d'un problème","back-to-top":"Retour au sommet","search-no-results-text":"Pas de résultats","search-matching-documents-text":"documents trouvés","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre latérale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Théorème","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Définition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"Équation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par défaut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus récent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur·rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifié","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-categories":"Catégories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant"},"metadata":{"lang":"fr","fig-responsive":true,"quarto-version":"1.3.353","editor":"source","theme":{"light":"assets/ek-theme-light.scss","dark":"assets/ek-theme-dark.scss"},"code-block-border-left":true,"smooth-scroll":true,"page-layout":"full","title-block-banner":false,"editor_options":{"chunk_output_type":"console"},"toc-title":"Table des matières"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}