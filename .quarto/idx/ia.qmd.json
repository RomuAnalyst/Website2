{"title":"Les fonctions dans R : Comprendre et utiliser la puissance des fonctions","markdown":{"yaml":{"title":"Les fonctions dans R : Comprendre et utiliser la puissance des fonctions","execute":{"message":false,"warning":false,"output":true},"editor_options":{"chunk_output_type":"console"},"page-layout":"full","toc":true,"toc-title":"Tables des matières"},"headingText":"Syntaxe des fonctions","containsRefs":false,"markdown":"\n\n---\n\n  Les fonctions sont l'un des éléments fondamentaux du langage de programmation R. Elles jouent un rôle clé dans l'organisation et la réutilisation du code, permettant aux programmeurs d'écrire des blocs de code autonomes qui peuvent être appelés et exécutés à plusieurs reprises. Dans cet article, nous explorerons les bases des fonctions dans R, leur syntaxe, leurs paramètres et leurs retours de valeur, ainsi que leur utilisation pratique avec des exemples concrets utilisant les datasets intégrés à R.\nLes fonctions sont un élément essentiel de R et permettent d'organiser et de réutiliser le code de manière efficace. Elles offrent une grande flexibilité et peuvent être adaptées à différents scénarios d'analyse de données. En comprenant les bases des fonctions, leur syntaxe, leurs paramètres et leurs retours de valeur, vous pourrez tirer pleinement parti de la puissance de R dans vos projets d'analyse de données.\n\n\nLa syntaxe générale d'une fonction en R est la suivante :\n\n```{r}\nnom_de_la_fonction <- function(paramètres) {\n  # Corps de la fonction\n  # Instructions à exécuter\n  # ...\n  # Retourner une valeur si nécessaire\n  return(valeur)\n}\n```\n\nUne fonction commence par le mot-clé `function` suivi du nom de la fonction, puis des paramètres entre parenthèses. Le corps de la fonction est entouré par des accolades `{}` et contient les instructions à exécuter. Une fonction peut également retourner une valeur à l'aide du mot-clé `return`.\n\n## Utilisation des fonctions\n\nPour utiliser une fonction, vous devez l'appeler en utilisant son nom suivi des arguments entre parenthèses. Les arguments sont les valeurs que vous fournissez à la fonction pour qu'elle effectue ses opérations. Voici un exemple d'utilisation d'une fonction intégrée à R :\n\n```{r}\n# Utilisation de la fonction mean() pour calculer la moyenne\nvaleurs <- c(5, 10, 15, 20)\nmoyenne <- mean(valeurs)\nprint(moyenne)\n```\n\nDans cet exemple, nous utilisons la fonction `mean()` pour calculer la moyenne des valeurs stockées dans le vecteur `valeurs`. Le résultat est stocké dans la variable `moyenne` et ensuite affiché à l'aide de la fonction `print()`.\n\n## Paramètres des fonctions\n\nLes fonctions peuvent accepter des paramètres, également appelés arguments, qui sont des valeurs fournies à la fonction lors de son appel. Les paramètres permettent de personnaliser le comportement d'une fonction en lui fournissant des données spécifiques à traiter. Par exemple, la fonction `mean()` accepte un paramètre `na.rm` qui spécifie si les valeurs manquantes doivent être ignorées lors du calcul de la moyenne. Voici un exemple d'utilisation de ce paramètre :\n\n```{r}\n#| output: true\nvaleurs <- c(5, 10, NA, 20)\nmoyenne <- mean(valeurs, na.rm = TRUE)\nprint(moyenne)\n```\n\nDans cet exemple, la valeur `NA` représente une valeur manquante. En spécifiant `na.rm = TRUE`, nous demandons à la fonction `mean()` d'ignorer les valeurs manquantes lors du calcul de la moyenne.\n\n## Retour de valeurs des fonctions\n\nLes fonctions peuvent également retourner des valeurs qui peuvent être utilisées plus tard dans le code. Pour cela, nous utilisons le mot-clé `return` suivi de la valeur que nous souhaitons renvoyer. Voici un exemple :\n\n```{r}\n# Fonction pour calculer le carré d'un nombre\ncarre <- function(x) {\n  resultat <- x^2\n  return(resultat)\n}\n\n# Utilisation de la fonction carre()\nnombre <- 5\nres <- carre(nombre)\nprint(res)\n```\n\nDans cet exemple, nous avons défini une fonction `carre()` qui prend un argument `x` et calcule le carré de ce nombre. La valeur carrée est stockée dans la variable `resultat`, puis renvoyée à l'aide de `return()`. Lorsque nous appelons la fonction `carre()` avec le nombre `5`, le résultat est stocké dans la variable `res` et ensuite affiché à l'aide de `print()`.\n\n## Exemples d'utilisation de fonctions avec des datasets intégrés à R\n\nMaintenant, explorons des exemples concrets d'utilisation de fonctions avec des datasets intégrés à R pour illustrer leur utilité dans l'analyse de données.\n\n### Exemple 1 : Analyse du dataset iris\n\nLe dataset \"iris\" contient des informations sur les mesures des sépales et des pétales de différentes espèces de fleurs. Supposons que nous voulons calculer la moyenne des longueurs des pétales pour chaque espèce de fleur. Voici comment nous pouvons le faire en utilisant une fonction :\n\n```{r}\n# Chargement du dataset iris\ndata(iris)\n\n# Définition de la fonction pour calculer la moyenne des longueurs de pétales par espèce\ncalculer_moyenne_petales <- function(espece) {\n  donnees_espece <- subset(iris, Species == espece)\n  moyenne <- mean(donnees_espece$Petal.Length)\n  return(moyenne)\n}\n\n# Utilisation de la fonction pour calculer la moyenne des longueurs de pétales pour chaque espèce\nespeces <- unique(iris$Species)\nfor (espece in especes) {\n  moyenne <- calculer_moyenne_petales(espece)\n  print(paste(\"Moyenne des longueurs de pétales pour\", espece, \":\", round(moyenne,2)))\n}\n```\n\nDans cet exemple, nous avons défini une fonction `calculer_moyenne_petales()` qui prend le nom d'une espèce de fleur comme argument. La fonction filtre les données pour cette espèce, calcule la moyenne des longueurs de pétales et la renvoie. Ensuite, nous utilisons une boucle `for` pour itérer sur les différentes espèces du dataset \"iris\" et calculer la moyenne des longueurs de pétales pour chaque espèce.\n\n### Exemple 2 : Analyse du dataset mtcars\n\nLe dataset \"mtcars\" contient des informations sur différentes voitures. Supposons que nous voulons déterminer la consommation d'essence moyenne pour les voitures avec une puissance supérieure à 150 chevaux. Voici comment nous pouvons le faire en utilisant une fonction :\n\n```{r}\n# Chargement du dataset mtcars\ndata(mtcars)\n\n# Définition de la fonction pour calculer la consommation d'essence moyenne pour les voitures avec une puissance supérieure à 150 chevaux\ncalculer_consommation_moyenne <- function(puissance_min) {\n  donnees_filtree <- subset(mtcars, hp > puissance_min)\n  consommation_moyenne <- mean(donnees_filtree$mpg)\n  return(consommation_moyenne)\n}\n\n# Utilisation de la fonction pour calculer la consommation d'essence moyenne pour les voitures avec une puissance supérieure à 150 chevaux\npuissance_min <- 150\nconsommation <- calculer_consommation_moyenne(puissance_min)\nprint(paste(\"Consommation d'essence moyenne pour les voitures avec une puissance supérieure à\", puissance_min, \"chevaux :\", round(consommation,2)))\n```\n\nDans cet exemple, nous avons défini une fonction `calculer_consommation_moyenne()` qui prend une puissance minimale en argument. La fonction filtre les données pour ne conserver que les voitures avec une puissance supérieure à la valeur donnée, calcule la consommation d'essence moyenne et la renvoie. Ensuite, nous utilisons la fonction `print()` pour afficher le résultat.\n\n## Arguments par défaut\nLes fonctions en R peuvent avoir des arguments par défaut, ce qui signifie que si vous ne fournissez pas de valeur pour un argument donné lors de l'appel de la fonction, elle utilisera sa valeur par défaut prédéfinie. Voici un exemple :\n\n\n```{r}\n\n# Définition de la fonction avec un argument par défaut\ndire_bonjour <- function(nom = \"Anonyme\") {\n  message(paste(\"Bonjour\", nom, \"!\"))\n}\n\n# Appels de la fonction avec et sans spécification de l'argument\ndire_bonjour()\ndire_bonjour(\"Alice\")\n\n```\nDans cet exemple, la fonction dire_bonjour() est définie avec un argument nom qui a une valeur par défaut de \"Anonyme\". Lorsque nous appelons la fonction sans spécifier d'argument, elle utilise la valeur par défaut et affiche \"Bonjour Anonyme !\". Lorsque nous l'appelons avec l'argument \"Alice\", la fonction utilise cette valeur spécifique et affiche \"Bonjour Alice !\".\n\n## Fonctions anonymes (lambda)\n\nEn plus des fonctions nommées, R prend également en charge les fonctions anonymes, également appelées fonctions lambda. Les fonctions anonymes sont des fonctions sans nom qui peuvent être utilisées de manière concise dans certaines situations. Voici un exemple d'utilisation d'une fonction anonyme avec la fonction sapply() :\n\n\n```{r}\n# Utilisation d'une fonction anonyme avec sapply()\nvaleurs <- c(1, 2, 3, 4, 5)\nresultats <- sapply(valeurs, function(x) x^2)\nprint(resultats)\n\n```\n\nDans cet exemple, nous utilisons la fonction sapply() pour appliquer une fonction anonyme à chaque élément du vecteur valeurs. La fonction anonyme calcule le carré de chaque valeur, et sapply() renvoie un vecteur contenant les carrés correspondants.\n\n## Portée des variables\nLorsque vous travaillez avec des fonctions en R, il est important de comprendre la portée des variables. Les variables définies à l'intérieur d'une fonction sont généralement locales à cette fonction, ce qui signifie qu'elles ne sont pas accessibles en dehors de la fonction. Cependant, vous pouvez également accéder aux variables définies à l'extérieur d'une fonction à l'intérieur de celle-ci. Voici un exemple :\n\n```{r}\n# Variable globale\nnom <- \"Alice\"\n\n# Fonction utilisant une variable globale et une variable locale\ndire_bonjour <- function() {\n  # Variable locale\n  age <- 30\n  message(paste(\"Bonjour\", nom, \"! Tu as\", age, \"ans.\"))\n}\n\n# Appel de la fonction\ndire_bonjour()\n```\nDans cet exemple, nous avons une variable globale nom définie en dehors de la fonction dire_bonjour(), et une variable locale age définie à l'intérieur de la fonction. La fonction utilise à la fois la variable globale nom et la variable locale age pour afficher un message personnalisé.\n\n## Fonctions récursives\nLes fonctions récursives sont des fonctions qui s'appellent elles-mêmes à l'intérieur de leur corps. Elles sont utiles lorsque vous avez besoin de résoudre des problèmes qui peuvent être décomposés en problèmes plus petits du même type. Voici un exemple de fonction récursive pour calculer le factoriel d'un nombre :\n\n\n```{r}\n# Fonction récursive pour calculer le factoriel\ncalculer_factoriel <- function(n) {\n  if (n == 0 || n == 1) {\n    return(1)\n  } else {\n    return(n * calculer_factoriel(n - 1))\n  }\n}\n\n# Appel de la fonction pour calculer le factoriel de 5\nresultat <- calculer_factoriel(5)\nprint(resultat)\n```\nDans cet exemple, la fonction calculer_factoriel() vérifie si le nombre n est égal à 0 ou 1. Si c'est le cas, elle renvoie 1. Sinon, elle appelle récursivement la fonction elle-même avec n - 1 et multiplie le résultat par n. Ainsi, elle calcule le factoriel du nombre donné.\n\nLes fonctions en R offrent une flexibilité et une puissance considérables pour organiser, réutiliser et automatiser le code. En comprenant les différents aspects des fonctions,  vous pouvez créer des codes plus modulaires et plus efficaces.\n\n---\n","srcMarkdownNoYaml":"\n\n---\n\n  Les fonctions sont l'un des éléments fondamentaux du langage de programmation R. Elles jouent un rôle clé dans l'organisation et la réutilisation du code, permettant aux programmeurs d'écrire des blocs de code autonomes qui peuvent être appelés et exécutés à plusieurs reprises. Dans cet article, nous explorerons les bases des fonctions dans R, leur syntaxe, leurs paramètres et leurs retours de valeur, ainsi que leur utilisation pratique avec des exemples concrets utilisant les datasets intégrés à R.\nLes fonctions sont un élément essentiel de R et permettent d'organiser et de réutiliser le code de manière efficace. Elles offrent une grande flexibilité et peuvent être adaptées à différents scénarios d'analyse de données. En comprenant les bases des fonctions, leur syntaxe, leurs paramètres et leurs retours de valeur, vous pourrez tirer pleinement parti de la puissance de R dans vos projets d'analyse de données.\n\n## Syntaxe des fonctions\n\nLa syntaxe générale d'une fonction en R est la suivante :\n\n```{r}\nnom_de_la_fonction <- function(paramètres) {\n  # Corps de la fonction\n  # Instructions à exécuter\n  # ...\n  # Retourner une valeur si nécessaire\n  return(valeur)\n}\n```\n\nUne fonction commence par le mot-clé `function` suivi du nom de la fonction, puis des paramètres entre parenthèses. Le corps de la fonction est entouré par des accolades `{}` et contient les instructions à exécuter. Une fonction peut également retourner une valeur à l'aide du mot-clé `return`.\n\n## Utilisation des fonctions\n\nPour utiliser une fonction, vous devez l'appeler en utilisant son nom suivi des arguments entre parenthèses. Les arguments sont les valeurs que vous fournissez à la fonction pour qu'elle effectue ses opérations. Voici un exemple d'utilisation d'une fonction intégrée à R :\n\n```{r}\n# Utilisation de la fonction mean() pour calculer la moyenne\nvaleurs <- c(5, 10, 15, 20)\nmoyenne <- mean(valeurs)\nprint(moyenne)\n```\n\nDans cet exemple, nous utilisons la fonction `mean()` pour calculer la moyenne des valeurs stockées dans le vecteur `valeurs`. Le résultat est stocké dans la variable `moyenne` et ensuite affiché à l'aide de la fonction `print()`.\n\n## Paramètres des fonctions\n\nLes fonctions peuvent accepter des paramètres, également appelés arguments, qui sont des valeurs fournies à la fonction lors de son appel. Les paramètres permettent de personnaliser le comportement d'une fonction en lui fournissant des données spécifiques à traiter. Par exemple, la fonction `mean()` accepte un paramètre `na.rm` qui spécifie si les valeurs manquantes doivent être ignorées lors du calcul de la moyenne. Voici un exemple d'utilisation de ce paramètre :\n\n```{r}\n#| output: true\nvaleurs <- c(5, 10, NA, 20)\nmoyenne <- mean(valeurs, na.rm = TRUE)\nprint(moyenne)\n```\n\nDans cet exemple, la valeur `NA` représente une valeur manquante. En spécifiant `na.rm = TRUE`, nous demandons à la fonction `mean()` d'ignorer les valeurs manquantes lors du calcul de la moyenne.\n\n## Retour de valeurs des fonctions\n\nLes fonctions peuvent également retourner des valeurs qui peuvent être utilisées plus tard dans le code. Pour cela, nous utilisons le mot-clé `return` suivi de la valeur que nous souhaitons renvoyer. Voici un exemple :\n\n```{r}\n# Fonction pour calculer le carré d'un nombre\ncarre <- function(x) {\n  resultat <- x^2\n  return(resultat)\n}\n\n# Utilisation de la fonction carre()\nnombre <- 5\nres <- carre(nombre)\nprint(res)\n```\n\nDans cet exemple, nous avons défini une fonction `carre()` qui prend un argument `x` et calcule le carré de ce nombre. La valeur carrée est stockée dans la variable `resultat`, puis renvoyée à l'aide de `return()`. Lorsque nous appelons la fonction `carre()` avec le nombre `5`, le résultat est stocké dans la variable `res` et ensuite affiché à l'aide de `print()`.\n\n## Exemples d'utilisation de fonctions avec des datasets intégrés à R\n\nMaintenant, explorons des exemples concrets d'utilisation de fonctions avec des datasets intégrés à R pour illustrer leur utilité dans l'analyse de données.\n\n### Exemple 1 : Analyse du dataset iris\n\nLe dataset \"iris\" contient des informations sur les mesures des sépales et des pétales de différentes espèces de fleurs. Supposons que nous voulons calculer la moyenne des longueurs des pétales pour chaque espèce de fleur. Voici comment nous pouvons le faire en utilisant une fonction :\n\n```{r}\n# Chargement du dataset iris\ndata(iris)\n\n# Définition de la fonction pour calculer la moyenne des longueurs de pétales par espèce\ncalculer_moyenne_petales <- function(espece) {\n  donnees_espece <- subset(iris, Species == espece)\n  moyenne <- mean(donnees_espece$Petal.Length)\n  return(moyenne)\n}\n\n# Utilisation de la fonction pour calculer la moyenne des longueurs de pétales pour chaque espèce\nespeces <- unique(iris$Species)\nfor (espece in especes) {\n  moyenne <- calculer_moyenne_petales(espece)\n  print(paste(\"Moyenne des longueurs de pétales pour\", espece, \":\", round(moyenne,2)))\n}\n```\n\nDans cet exemple, nous avons défini une fonction `calculer_moyenne_petales()` qui prend le nom d'une espèce de fleur comme argument. La fonction filtre les données pour cette espèce, calcule la moyenne des longueurs de pétales et la renvoie. Ensuite, nous utilisons une boucle `for` pour itérer sur les différentes espèces du dataset \"iris\" et calculer la moyenne des longueurs de pétales pour chaque espèce.\n\n### Exemple 2 : Analyse du dataset mtcars\n\nLe dataset \"mtcars\" contient des informations sur différentes voitures. Supposons que nous voulons déterminer la consommation d'essence moyenne pour les voitures avec une puissance supérieure à 150 chevaux. Voici comment nous pouvons le faire en utilisant une fonction :\n\n```{r}\n# Chargement du dataset mtcars\ndata(mtcars)\n\n# Définition de la fonction pour calculer la consommation d'essence moyenne pour les voitures avec une puissance supérieure à 150 chevaux\ncalculer_consommation_moyenne <- function(puissance_min) {\n  donnees_filtree <- subset(mtcars, hp > puissance_min)\n  consommation_moyenne <- mean(donnees_filtree$mpg)\n  return(consommation_moyenne)\n}\n\n# Utilisation de la fonction pour calculer la consommation d'essence moyenne pour les voitures avec une puissance supérieure à 150 chevaux\npuissance_min <- 150\nconsommation <- calculer_consommation_moyenne(puissance_min)\nprint(paste(\"Consommation d'essence moyenne pour les voitures avec une puissance supérieure à\", puissance_min, \"chevaux :\", round(consommation,2)))\n```\n\nDans cet exemple, nous avons défini une fonction `calculer_consommation_moyenne()` qui prend une puissance minimale en argument. La fonction filtre les données pour ne conserver que les voitures avec une puissance supérieure à la valeur donnée, calcule la consommation d'essence moyenne et la renvoie. Ensuite, nous utilisons la fonction `print()` pour afficher le résultat.\n\n## Arguments par défaut\nLes fonctions en R peuvent avoir des arguments par défaut, ce qui signifie que si vous ne fournissez pas de valeur pour un argument donné lors de l'appel de la fonction, elle utilisera sa valeur par défaut prédéfinie. Voici un exemple :\n\n\n```{r}\n\n# Définition de la fonction avec un argument par défaut\ndire_bonjour <- function(nom = \"Anonyme\") {\n  message(paste(\"Bonjour\", nom, \"!\"))\n}\n\n# Appels de la fonction avec et sans spécification de l'argument\ndire_bonjour()\ndire_bonjour(\"Alice\")\n\n```\nDans cet exemple, la fonction dire_bonjour() est définie avec un argument nom qui a une valeur par défaut de \"Anonyme\". Lorsque nous appelons la fonction sans spécifier d'argument, elle utilise la valeur par défaut et affiche \"Bonjour Anonyme !\". Lorsque nous l'appelons avec l'argument \"Alice\", la fonction utilise cette valeur spécifique et affiche \"Bonjour Alice !\".\n\n## Fonctions anonymes (lambda)\n\nEn plus des fonctions nommées, R prend également en charge les fonctions anonymes, également appelées fonctions lambda. Les fonctions anonymes sont des fonctions sans nom qui peuvent être utilisées de manière concise dans certaines situations. Voici un exemple d'utilisation d'une fonction anonyme avec la fonction sapply() :\n\n\n```{r}\n# Utilisation d'une fonction anonyme avec sapply()\nvaleurs <- c(1, 2, 3, 4, 5)\nresultats <- sapply(valeurs, function(x) x^2)\nprint(resultats)\n\n```\n\nDans cet exemple, nous utilisons la fonction sapply() pour appliquer une fonction anonyme à chaque élément du vecteur valeurs. La fonction anonyme calcule le carré de chaque valeur, et sapply() renvoie un vecteur contenant les carrés correspondants.\n\n## Portée des variables\nLorsque vous travaillez avec des fonctions en R, il est important de comprendre la portée des variables. Les variables définies à l'intérieur d'une fonction sont généralement locales à cette fonction, ce qui signifie qu'elles ne sont pas accessibles en dehors de la fonction. Cependant, vous pouvez également accéder aux variables définies à l'extérieur d'une fonction à l'intérieur de celle-ci. Voici un exemple :\n\n```{r}\n# Variable globale\nnom <- \"Alice\"\n\n# Fonction utilisant une variable globale et une variable locale\ndire_bonjour <- function() {\n  # Variable locale\n  age <- 30\n  message(paste(\"Bonjour\", nom, \"! Tu as\", age, \"ans.\"))\n}\n\n# Appel de la fonction\ndire_bonjour()\n```\nDans cet exemple, nous avons une variable globale nom définie en dehors de la fonction dire_bonjour(), et une variable locale age définie à l'intérieur de la fonction. La fonction utilise à la fois la variable globale nom et la variable locale age pour afficher un message personnalisé.\n\n## Fonctions récursives\nLes fonctions récursives sont des fonctions qui s'appellent elles-mêmes à l'intérieur de leur corps. Elles sont utiles lorsque vous avez besoin de résoudre des problèmes qui peuvent être décomposés en problèmes plus petits du même type. Voici un exemple de fonction récursive pour calculer le factoriel d'un nombre :\n\n\n```{r}\n# Fonction récursive pour calculer le factoriel\ncalculer_factoriel <- function(n) {\n  if (n == 0 || n == 1) {\n    return(1)\n  } else {\n    return(n * calculer_factoriel(n - 1))\n  }\n}\n\n# Appel de la fonction pour calculer le factoriel de 5\nresultat <- calculer_factoriel(5)\nprint(resultat)\n```\nDans cet exemple, la fonction calculer_factoriel() vérifie si le nombre n est égal à 0 ou 1. Si c'est le cas, elle renvoie 1. Sinon, elle appelle récursivement la fonction elle-même avec n - 1 et multiplie le résultat par n. Ainsi, elle calcule le factoriel du nombre donné.\n\nLes fonctions en R offrent une flexibilité et une puissance considérables pour organiser, réutiliser et automatiser le code. En comprenant les différents aspects des fonctions,  vous pouvez créer des codes plus modulaires et plus efficaces.\n\n---\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true,"link-external-filter":"^(?:http:|https:)\\/\\/romuanalyst.github.io/Website2/**"},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["assets/ek-styles.css"],"highlight-style":{"light":"assets/ek-light.theme","dark":"assets/ek-dark.theme"},"toc":true,"output-file":"ia.html"},"language":{"toc-title-document":"Table des matières","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","section-title-abstract":"Résumé","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les références","section-title-reuse":"Réutilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit :","appendix-attribution-bibtex":"BibTeX","title-block-author-single":"Auteur·rice","title-block-author-plural":"Auteur·rice·s","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifié","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copié","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Faire part d'un problème","back-to-top":"Retour au sommet","search-no-results-text":"Pas de résultats","search-matching-documents-text":"documents trouvés","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre latérale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Théorème","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Définition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"Équation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par défaut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus récent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur·rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifié","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-categories":"Catégories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant"},"metadata":{"lang":"fr","fig-responsive":true,"quarto-version":"1.3.353","editor":"source","theme":{"light":"assets/ek-theme-light.scss","dark":"assets/ek-theme-dark.scss"},"code-block-border-left":true,"smooth-scroll":true,"title":"Les fonctions dans R : Comprendre et utiliser la puissance des fonctions","editor_options":{"chunk_output_type":"console"},"page-layout":"full","toc-title":"Tables des matières"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}