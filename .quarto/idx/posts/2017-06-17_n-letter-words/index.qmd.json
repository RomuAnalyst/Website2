{"title":"`n_letter_words` and a personal (publicly available) package","markdown":{"yaml":{"title":"`n_letter_words` and a personal (publicly available) package","description":"How I created a handy function and a personal package\n","date":"2017-06-17","author":[{"name":"Ella Kaye"}],"site-url":"https://ellakaye.co.uk","image":"../../images/hex/EMK.png","image-alt":"A hexagon with a bright pink outline. Inside it, the letters E, M and K in the\nsame bright pink, on a white background\n","categories":["R","package development"],"open-graph":true,"twitter-card":true,"draft":false},"headingText":"NOTE: after finishing post, run renv::snapshot() and copy the renv.lock file","containsRefs":false,"markdown":"\n\n```{r}\n#| echo: false\n#| results: 'hide'\n\nlong_slug <- \"2017-06-17_n-letter-words\"\n\n# from the project root into the post directory\nrenv::use(lockfile = \"renv.lock\")\n```\n\n\nThere's a little R function that I wrote and packaged up to generate a vector or data frame of words of a given length. I find it useful in a wide variety of contexts and thought other might too. To kick off my new blog, here's a post about it.\n\nThe function, `n_letter_words`, came about because I wanted to be able to generate row and column names for a large matrix - didn't matter what they were, as long as they were unique. Since I was in the habit of using the built-in `LETTERS` vector to do this for small matrices, I naturally thought of using combinations of letters to do this in a larger case. In figuring out how to do this, as is so often the case, it was [stackoverflow](https://stackoverflow.com/questions/11388359/unique-combination-of-all-elements-from-two-or-more-vectors) to the rescue. There, I learnt about `expand.grid` and could then use some tidyverse tools to get the vector I was after:\n\n```{r warning=FALSE, message=FALSE}\nlibrary(dplyr)\nlibrary(tidyr)\nout <- expand.grid(LETTERS, LETTERS) %>%\n  as_tibble() %>%\n  unite(word, 1:2, sep = \"\") %>%\n  pull()\nc(head(out), tail(out))\n```\n\nSorted! At least I thought so, until, a couple of months later, when I wanted to generate names for a 1000\\*1000 matrix, and realised both that I'd forgotten the `expand.grid` trick, and once I'd re-found the stackoverflow post, that it didn't give me enough words. That was enough to make it worth writing a function, taking `n` as an argument, that gives all 'words' of length $n$. \n\nWriting functions always makes me think of what other arguments might be useful. What if we want something between the 676 two-letter words and 17,576 three-letter words (or the 456,976 four-letter words, etc)? Hence the argument `num_letters`, which can be set between 1 and 26, and results in a total of `num_letters`$^n$ words. By default, the function returns a `tibble`, but setting `as_vector = TRUE` does what you'd expect. And I threw in a `case` argument too.\n\nNow that I had my function, what to do with it? I remembered articles I'd read about the usefulness of [making](https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/) and [sharing]((https://hilaryparker.com/2013/04/03/personal-r-packages/)) a personal package. Now seemed like the time to do that myself. \n\nSo, [here](https://github.com/EllaKaye/EMK) is my personal package, `EMK`. If you think that `n_letter_words` might be of use to you, then feel free to install!\n\n```{r message=FALSE, eval = FALSE}\ndevtools::install_github(\"EllaKaye/EMK\")\n```\n\nSome examples of `n_letter_words`:\n\n```{r warning = FALSE, message = FALSE}\nlibrary(EMK)\n\nn_letter_words(2)\n\nsome_three_letter_words <- n_letter_words(\n  n = 3, \n  num_letters = 10, \n  case = \"lower\", \n  as_vector = TRUE\n)\n\nc(head(some_three_letter_words), tail(some_three_letter_words))\n\nlength(some_three_letter_words)\n```\n\nFor now, my personal package has only this one function, but watch this space! No doubt I'll be adding more that I find useful. Perhaps, you'll find them useful too.\n\nIncidentally, none of the above would have happened if I'd just thought, for my test matrix `A`, to set `dimnames(A) <- list(1:nrow(A), 1:ncol(A))`!\n\n<!--------------- appendices go here ----------------->\n\n```{r appendix}\n#| echo: false\n\nsource(\"../../R/appendix.R\")\ninsert_appendix(\n  repo_spec = \"EllaKaye/ellakaye.co.uk\", \n  name = long_slug\n)\n```\n\n#### Session info {.appendix}\n\n<details><summary>Toggle</summary>\n\n```{r}\n#| echo: false\nlibrary(sessioninfo)\n# save the session info as an object\npkg_session <- session_info(pkgs = \"attached\")\n\n# get the quarto version\nquarto_version <- system(\"quarto --version\", intern = TRUE)\n\n# inject the quarto info\npkg_session$platform$quarto <- paste(\n  system(\"quarto --version\", intern = TRUE), \n  \"@\", \n  quarto::quarto_path()\n  )\n\n# print it out\npkg_session\n```\n\n</details>\n","srcMarkdownNoYaml":"\n\n```{r}\n#| echo: false\n#| results: 'hide'\n\nlong_slug <- \"2017-06-17_n-letter-words\"\n\n# NOTE: after finishing post, run renv::snapshot() and copy the renv.lock file \n# from the project root into the post directory\nrenv::use(lockfile = \"renv.lock\")\n```\n\n\nThere's a little R function that I wrote and packaged up to generate a vector or data frame of words of a given length. I find it useful in a wide variety of contexts and thought other might too. To kick off my new blog, here's a post about it.\n\nThe function, `n_letter_words`, came about because I wanted to be able to generate row and column names for a large matrix - didn't matter what they were, as long as they were unique. Since I was in the habit of using the built-in `LETTERS` vector to do this for small matrices, I naturally thought of using combinations of letters to do this in a larger case. In figuring out how to do this, as is so often the case, it was [stackoverflow](https://stackoverflow.com/questions/11388359/unique-combination-of-all-elements-from-two-or-more-vectors) to the rescue. There, I learnt about `expand.grid` and could then use some tidyverse tools to get the vector I was after:\n\n```{r warning=FALSE, message=FALSE}\nlibrary(dplyr)\nlibrary(tidyr)\nout <- expand.grid(LETTERS, LETTERS) %>%\n  as_tibble() %>%\n  unite(word, 1:2, sep = \"\") %>%\n  pull()\nc(head(out), tail(out))\n```\n\nSorted! At least I thought so, until, a couple of months later, when I wanted to generate names for a 1000\\*1000 matrix, and realised both that I'd forgotten the `expand.grid` trick, and once I'd re-found the stackoverflow post, that it didn't give me enough words. That was enough to make it worth writing a function, taking `n` as an argument, that gives all 'words' of length $n$. \n\nWriting functions always makes me think of what other arguments might be useful. What if we want something between the 676 two-letter words and 17,576 three-letter words (or the 456,976 four-letter words, etc)? Hence the argument `num_letters`, which can be set between 1 and 26, and results in a total of `num_letters`$^n$ words. By default, the function returns a `tibble`, but setting `as_vector = TRUE` does what you'd expect. And I threw in a `case` argument too.\n\nNow that I had my function, what to do with it? I remembered articles I'd read about the usefulness of [making](https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/) and [sharing]((https://hilaryparker.com/2013/04/03/personal-r-packages/)) a personal package. Now seemed like the time to do that myself. \n\nSo, [here](https://github.com/EllaKaye/EMK) is my personal package, `EMK`. If you think that `n_letter_words` might be of use to you, then feel free to install!\n\n```{r message=FALSE, eval = FALSE}\ndevtools::install_github(\"EllaKaye/EMK\")\n```\n\nSome examples of `n_letter_words`:\n\n```{r warning = FALSE, message = FALSE}\nlibrary(EMK)\n\nn_letter_words(2)\n\nsome_three_letter_words <- n_letter_words(\n  n = 3, \n  num_letters = 10, \n  case = \"lower\", \n  as_vector = TRUE\n)\n\nc(head(some_three_letter_words), tail(some_three_letter_words))\n\nlength(some_three_letter_words)\n```\n\nFor now, my personal package has only this one function, but watch this space! No doubt I'll be adding more that I find useful. Perhaps, you'll find them useful too.\n\nIncidentally, none of the above would have happened if I'd just thought, for my test matrix `A`, to set `dimnames(A) <- list(1:nrow(A), 1:ncol(A))`!\n\n<!--------------- appendices go here ----------------->\n\n```{r appendix}\n#| echo: false\n\nsource(\"../../R/appendix.R\")\ninsert_appendix(\n  repo_spec = \"EllaKaye/ellakaye.co.uk\", \n  name = long_slug\n)\n```\n\n#### Session info {.appendix}\n\n<details><summary>Toggle</summary>\n\n```{r}\n#| echo: false\nlibrary(sessioninfo)\n# save the session info as an object\npkg_session <- session_info(pkgs = \"attached\")\n\n# get the quarto version\nquarto_version <- system(\"quarto --version\", intern = TRUE)\n\n# inject the quarto info\npkg_session$platform$quarto <- paste(\n  system(\"quarto --version\", intern = TRUE), \n  \"@\", \n  quarto::quarto_path()\n  )\n\n# print it out\npkg_session\n```\n\n</details>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../assets/ek-styles.css"],"highlight-style":{"light":"../../assets/ek-light.theme","dark":"../../assets/ek-dark.theme"},"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","editor":"source","theme":{"light":"../../assets/ek-theme-light.scss","dark":"../../assets/ek-theme-dark.scss"},"code-block-border-left":true,"smooth-scroll":true,"title":"`n_letter_words` and a personal (publicly available) package","description":"How I created a handy function and a personal package\n","date":"2017-06-17","author":[{"name":"Ella Kaye"}],"site-url":"https://ellakaye.co.uk","image":"../../images/hex/EMK.png","image-alt":"A hexagon with a bright pink outline. Inside it, the letters E, M and K in the\nsame bright pink, on a white background\n","categories":["R","package development"],"open-graph":true,"twitter-card":true,"draft":false},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}