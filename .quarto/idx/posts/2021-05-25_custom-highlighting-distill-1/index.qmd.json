{"title":"Custom syntax highlighting for {distill} part 1","markdown":{"yaml":{"title":"Custom syntax highlighting for {distill} part 1","subtitle":"Modifying the default theme","description":"A guide to modifying the default {distill} syntax highlighting theme, including colour choice considerations, and its implementation in {distilltools}\n","date":"2021-05-25","author":[{"name":"Ella Kaye"}],"site-url":"https://ellakaye.co.uk","image":"more-theme-in-action.png","categories":["distill","distilltools","colour","accessibility","R"],"twitter-card":{"image-width":600,"image-height":314,"card-style":"summary_large_image"},"draft":false},"headingText":"NOTE: after finishing post, run renv::snapshot() and copy the renv.lock file","containsRefs":false,"markdown":"\n\n```{r}\n#| echo: false\n#| results: 'hide'\n\nlong_slug <- \"2021-05-25_custom-highlighting-distill-1\"\n\n# from the project root into the post directory\nrenv::use(lockfile = \"renv.lock\")\n```\n\n:::{.callout-note collapse=\"false\" .top-callout}\n## Update: August 2022\n\nSince this post was originally written, I have replaced my {disill} website with this one built with [Quarto](https://quarto.org). \n\n`arrow` is the default syntax highlighting theme for Quarto, as it was for {distill}, although it is implemented slightly differently here, and the process of modifying it for Quarto is not the same as it was before. I'll lay out the differences in a future post. Moreover, as a result, the highlighting you'll see below is not quite the same as it appeared on my previous site, and if you're reading this in dark mode, it's a whole different scheme again.^[If you'd like to see the original theme in action, you can see it over at the [distillery](https://distillery.rbind.io/posts/2021-05-25-custom-syntax-highlighting-for-distill-part-1-modifying-the-default-theme/).] That said, I am keeping this post otherwise as was on the blog for posterity. \n:::\n\n## Overview\n\nThe [{distill}](https://rstudio.github.io/distill/) package for R can be used to build easy-to-maintain websites written only in R Markdown, such as this one.^[For more on resources and inspirations for setting up a {distill} website, see my previous post, [Welcome to my {distill} website](../2021-05-08_welcome-distill/index.qmd).]\n\nI wrote a function to modify the default syntax highlighting theme. This `modify_default_highlighting` function is now part of the [{distilltools}](https://ellakaye.github.io/distilltools) package. \n\nHere's the function in action, to get the theme used on this site:\n\n```{r eval = FALSE}\n# get distilltools, requires remotes >= 2.2\nremotes::install_github(\"EllaKaye/distilltools\") \n\nlibrary(distilltools)\nmodify_default_highlighting(\n  name = \"ek_syntax_highlighting\",\n  numeric = \"#B6005B\", # replaces the default red\n  strings = \"#008643\", # replaces the default green\n  functions = \"#005BB6\", # replaces the default purple\n  control = \"#5B00B6\", # replaces the default blue\n  constant = \"#B65B00\" # replaces the default brown\n)\n```\n\nAnd here's the theme in action:\n\n```{r eval = FALSE}\nlibrary(dplyr)\nlibrary(palmerpenguins)\n\npenguins %>%\n  mutate(\n    long_flipper = case_when(\n      species == \"Adelie\" & flipper_length_mm > 195 ~ TRUE,\n      species == \"Chinstrap\" & flipper_length_mm > 200 ~ TRUE,\n      species == \"Gentoo\" & flipper_length_mm > 225 ~ TRUE,\n      TRUE ~ FALSE\n    )\n  ) %>%\n  mutate(\n    long_bill = case_when(\n      species == \"Adelie\" & bill_length_mm > 42 ~ TRUE,\n      species == \"Chinstrap\" & bill_length_mm > 52 ~ TRUE,\n      species == \"Gentoo\" & bill_length_mm > 50 ~ TRUE,\n      TRUE ~ FALSE\n    )\n  )\n```\n\nThis is the first in a series of two posts on implementing a custom syntax highlighting theme for a website or blog built with {distill}. Read on here for why and how this function was built, what it does and doesn't do, and its inclusion in the [{distilltools}](https://github.com/EllaKaye/distilltools) package. This post also outlines the criteria that were important to me when choosing colours for my theme, but take a look at part 2, [Custom syntax highlighting for {distill}: Creating the palette](../2021-05-26_custom-highlighting-distill-2/index.qmd), for a deep dive into considerations about colour choices, in respect to both colour theory and accessibility, and how I ensured my criteria were met.\n\n## But first, the default\n\n### In praise of the default\n\nBefore I delve into how to create a custom syntax highlighting scheme, I want to take a minute to admire the default. The authors of {distill}, in particular [Alison Hill](https://alison.rbind.io), have thought and worked hard to ensure that {distill} provides a good user experience, both for the site's author AND for those reading it. One of the key considerations for the latter is a default syntax highlighting scheme with colours that are optimised for accessibility and colour contrast. I say more about what that means below and in [part 2](../2021-05-26_custom-highlighting-distill-2/index.qmd). Also, it appears that the colours in the scheme work well together, and overall, on the many {distill} websites where I've seen the scheme used, I think it looks really good! For a great example of the default in action, check out this [code-chunk-heavy post](https://themockup.blog/posts/2021-03-07-creating-a-custom-gt-function-for-aligning-first-row-text-and-testing-it-with-testthat/) by [Tom Mock](https://twitter.com/thomas_mock).\n\n### So, why change?\n\n```{r echo = FALSE}\nlibrary(htmltools)\nlibrary(coloratio)\nbg_col <- function(bg_col, text = NULL, text_col = NULL) {\n  \n  if(is.null(text)) text <- bg_col\n  \n  if(is.null(text_col)) text_col <- coloratio::cr_choose_bw(bg_col)\n  \n  style <- paste0(\"background-color: \", bg_col, \"; color: \", text_col, \"; padding:3px\")\n  \n  htmltools::span(style = style, text)\n}\n```\n\n\nWhen I used the default syntax highlighting theme on my site I found, to my eye, that the red used for numeric variables clashed with the `r bg_col(\"#D4006A\", text = \"bright pink\")` (closest [colour name](https://chir.ag/projects/name-that-color/#D4006A) \"razzmatazz\") I've used in my logo and elsewhere throughout the site. So, I decided to tweak the default theme swapping the red for my pink and, to match it, more vibrant versions of the remaining colours. \n\n### Distill/pandoc documentation\nMy first task was to find out whether this was possible, and if, so, how. Thankfully, the {distill} documentation contains a section on [syntax highlighting](https://rstudio.github.io/distill/#syntax-highlighting), showing that there is an option to give `distill_article` a path to a custom `.theme` file. The [linked pandoc documentation on syntax highlighting](https://pandoc.org/MANUAL.html#syntax-highlighting) demonstrates how to use pandoc in the command line to save a personal version of the `pygments` highlighting theme. The documentation points out that that copy of the pygments `.theme` file can then be edited to create a custom theme. \n\n### Finding and saving the default\nOnce I had a general strategy of copying and editing an existing `.theme` file, my next task was to find the `.theme` file for the default used in {distill}, because that's what I'd already decided to take as my starting point.\n\nI cloned the [distill repo from GitHub](https://github.com/rstudio/distill) and opened it in RStudio.^[From RStudio, go to 'File' in the menu bar, then 'New Project...' Chose 'Version Control', then 'Git', then enter `https://github.com/rstudio/distill.git` as the 'Repository URL:' and click 'Create Project'] From there I began my detective work with one of my favourite RStudio features, 'Find in Files' (⇧ + ⌘ + F on a Mac), which searches across all files in a project. I searched for \"highlight\" and followed various trails until I discovered that the default is called `arrow.theme` and is stored in `inst/rmarkdown/templates/distill_article/resources/`. Thankfully, because it's in the `inst` folder, the file is accessible to users who have the {distill} package installed. In the RStudio project for my website, I created a new script, `syntax_highlighting.R`, in the `R` folder I have in my root directory, then I ran the following to save a copy of `arrow.theme` into my website's root directory:\n\n```{r eval = FALSE}\narrow_theme_path <- system.file(\n  \"rmarkdown/templates/distill_article/resources/arrow.theme\", \n  package = \"distill\"\n)\n\nfile.copy(arrow_theme_path, \"arrow.theme\")\n```\n\nWhen I had run that once, I commented out the above lines. I don't want any future changes in `arrow.theme` in {distill} to break what I do next.\n\n### Closer inspection of the default\n\nFrom there I could open up my copy of the `arrow.theme` file and manually inspect it. I use a great Mac app for building colour palettes, [ColorSlurp](https://colorslurp.com).^[I don't have experience of colour apps on other operating systems, but a quick search for ColorSlurp alternatives suggest there are [a bunch to pick from](https://alternativeto.net/software/colorslurp/).] The basic version is free, though the pro version has useful features for testing accessibility - more on that in [part 2](../2021-05-26_custom-highlighting-distill-2/index.qmd). I set up a new palette in ColorSlurp and, for each hex colour code I encountered, I saved it there.\n\nThere are 29 types of `text-styles` in the theme, of which:\n\n- 8 are assigned a grey, `r bg_col(\"#5E5E5E\")`, things like `Comment` and `Documentation`\n\n- 1 is off-black, `r bg_col(\"#111111\")`, `Variable`\n\n- 3 are blue, `r bg_col(\"#007BA5\")`, `Other`, `ControlFlow` and `Keyword`\n\n- 4 are green, `r bg_col(\"#20794D\")`, corresponding to various types of string\n\n- 1 is purple, `r bg_col(\"#4758AB\")`, `Function`\n\n- 7 are red, `r bg_col(\"#AD0000\")`, a mix of numeric (e.g. `BaseN`, `Float`) and things like `Alert` and `Error`\n\n- 1 is a brown, `r bg_col(\"#8F5902\")`, for `Constant`\n\n- 4 types are not assigned a colour - they are left as `null`\n\nI was happy to stick with the groupings, grey, off-black and `null` in the default, so now I knew I had to pick five colours for my theme.\n\n## Building my own palette \n\nI had four criteria for building a colour palette to use for my syntax highlighting theme:\n\n- It be based on the <span style=\"color:#D4006A\">pink</span> that I use in my logo and elsewhere throughout this site\n- It uses colour theory to pick colours that look appealing together\n- It meets [WCAG web accessibility guidelines](https://www.w3.org/WAI/standards-guidelines/wcag/), by ensuring sufficient colour contrast, i.e. a ratio of 4.5:1, between each of the colours in the theme and this site's background colour (white)\n- The colours in the palette are colourblind-friendly, i.e. still distinguishable to people with various difference types of colourblindness.\n\nI was originally going to write up how I went about building such a palette, both in terms of the thought process and tools used, as part of this post, but it was getting a little long^[As part of the process of writing the post, I learnt much more about colour theory, and alternatives to the approach that I had originally taken, and I wanted to share it all!], so I've spun it out into a separate post, [Custom syntax highlighting for {distill} part 2: Creating the palette ](../2021-05-26_custom-highlighting-distill-2/index.qmd).\n\nAt the end of the process, the palette for my syntax highlighting scheme is as in @fig-final-palette-light.\n\n```{r fig-ek-syntax-highlighting-palette, echo = FALSE, eval = FALSE, fig.cap=\"The color palette used for syntax highlighting throughout this site.\", fig.alt=\"A swatch of five colours, a bright pink, orange, green, blue and purple.\"}\nknitr::include_graphics(\"ek-syntax-highlighting-palette.png\")\n```\n\n\n```{r fig-final-palette-light}\n#| echo: false\n#| eval: true\n#| fig-cap: \"The palette I settled on for my syntax highlighting scheme.\"\n#| fig-alt: \"A swatch of five colours, a pink, orange, green, blue and purple, all quite bright, but still all with a contrast ratio of 4.5:1 or better against white.\"\n#| fig-width: 6.5\n#| fig-height: 4\n#| \nek_highlight_colours <- c(\"#5B00B6\", \"#005BB6\", \"#008643\", \"#B65B00\", \"#B6005B\")\n\nlibrary(ggplot2)\n\nggplot() +\n  geom_tile(aes(x=1:5, y = rep(1,5)), fill = rev(ek_highlight_colours)) +\n  theme_void() +\n  #theme(plot.background = element_rect(fill='transparent', color=NA))\n  theme(plot.background = element_rect(fill=\"#F8F9FA\", color = \"#F8F9FA\"))\n#swatchplot(rev(ek_highlight_colours), border = \"transparent\")\n# Using the above code gives too much white around the swatches, so I ran the code, took a screen shot to crop it, then include that image back in.\n\n```\n\n```{r fig-final-palette-dark}\n#| echo: false\n#| eval: false\n#| fig-cap: \"The palette I settled on for my syntax highlighting scheme.\"\n#| fig-alt: \"A swatch of five colours, a pink, orange, green, blue and purple, all quite bright, but still all with a contrast ratio of 4.5:1 or better against white.\"\n#| fig-width: 6.5\n#| fig-height: 4\n#| classes: dark-mode\n#| \nek_highlight_colours <- c(\"#5B00B6\", \"#005BB6\", \"#008643\", \"#B65B00\", \"#B6005B\")\n\nlibrary(ggplot2)\n\nggplot() +\n  geom_tile(aes(x=1:5, y = rep(1,5)), fill = rev(ek_highlight_colours)) +\n  theme_void() +\n  #theme(plot.background = element_rect(fill='transparent', color=NA))\n  theme(plot.background = element_rect(fill=\"#212129\", color = \"#212129\"))\n#swatchplot(rev(ek_highlight_colours), border = \"transparent\")\n# Using the above code gives too much white around the swatches, so I ran the code, took a screen shot to crop it, then include that image back in.\n\n```\n\n\n## Modifying `arrow.theme`\n\nWith all the pieces in place, it's now just a case of swapping out the default colour codes for our own choices. Although it's possible to manually edit the `arrow.theme` file we now have in our directory, to aid reproducibility, and with a view to writing this up as a function, I edited it using R code instead. I read in the file, substituted the hex codes, then saved the resulting theme into a new `ek_syntax_highlighting.theme` file (leaving `arrow.theme` unchanged). Below are two approaches, one using base R, the other in the tidyverse, that I put in my `syntax_highlighting.R` script.\n\n```{r eval = FALSE}\n\n# read in the default theme\ntheme <- readLines(\"arrow.theme\")\n\n# base R approach\ntheme <- gsub(\"#AD0000\", \"#B6005B\", theme) # red -> pink\ntheme <- gsub(\"#8f5902\", \"#B65B00\", theme) # brown -> brown \ntheme <- gsub(\"#007BA5\", \"#5B00B6\", theme) # blue -> purple\ntheme <- gsub(\"#20794D\", \"#B65B00\", theme) # green -> green\ntheme <- gsub(\"#4758AB\", \"#005BB6\", theme) # purple -> blue\n\n# alternatively, tidyverse approach\nlibrary(stringr)\nlibrary(magrittr)\n\ntheme <- readLines(\"arrow.theme\") %>%\n   str_replace_all(\"#AD0000\", \"#B6005B\") %>% # red -> pink\n   str_replace_all(\"#8f5902\", \"#B65B00\") %>% # brown -> brown \n   str_replace_all(\"#007BA5\", \"#5B00B6\") %>% # blue -> purple\n   str_replace_all(\"#20794D\", \"#008643\") %>% # green -> green\n   str_replace_all(\"#4758AB\", \"#005BB6\")     # purple -> blue\n\n# save new theme\nwriteLines(theme, \"ek_syntax_highlighting.theme\")\n```\n\nI now have the file `ek_syntax_highlighting.theme` in my root directory, with my colour choices.\n\nIt is, of course, possible to modify it further, either manually or by making further substutions in the code above. There is a quirk, though: if I swap one of the default hex codes for my own colour choice, that implements just fine, but if I swap any of the `null`s for a colour, that doesn't show up when I apply the theme. \n\n## Wrapping in a {distilltools} function\n\nWhen I figure out code to do something that I think I might want to do again, or think others might find useful, I generally like to write it up as a function, and that's what I've done with the above, wrapping it in a function called `modify_default_highlighting` and putting it in the  [{distilltools}](https://ellakaye.github.io/distilltools) package. {distilltools} is in the very early stages of development, an (expanding) collection of tools to support the creation and styling of content on websites created using {distill}. \n\nWhen I first announced the package, I included in the 'future functionality' section of the package README the intention to add a `create_highlight_theme` function. I don't think what I've done is quite versatile or fully-featured enough to warrant that name. Instead, I called it  `modify_default_highlighting` because that's all it does, allowing you to swap out the five colours in the default scheme for five colours of your choosing. It does, however, create a `.theme` file in your working directory, that can be further edited manually, or with your own R code, if further modifications are desired. \n\nThe first argument to `modify_default_highlighting` is `name`, the name you want to give your theme (which will create the file `name.theme`). It then takes five colour arguments, which can be specified either in the hex form \"#RRGGBB\" or as a named colour, from the colour names in [grDevices::colors()](https://rdrr.io/r/grDevices/colors.html). For a list of the colour names available in R, see page 3 of the [R color cheatsheet](https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf) for a one page summary, or [Colors in R](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf) for a slightly less visually overwhelming list. The final argument, `overwrite` (defaults to `TRUE`) specifies whether to overwrite `name.theme` if it already exists in the working directory. Here's the function in action again, this time using colour names (note that I have not tested the visual properties of this as a palette, just dropped in some colour names into the function):\n\n```{r eval = FALSE}\nlibrary(distilltools)\nmodify_default_highlighting(\n  name = \"ek_syntax_highlighting\",\n  numeric = \"deeppink\", # replaces the default red\n  strings = \"forestgreen\", # replaces the default green\n  functions = \"darkorchid3\", # replaces the default purple\n  control = \"royalbkue3\", # replaces the default blue\n  constant = \"darkorange1\" # replaces the default brown\n)\n```\n\n\n## Using the theme\n\nOnce you have you custom `.theme` file, you'll want to apply it to your site. According to the [{distill} documentation](https://rstudio.github.io/distill/#syntax-highlighting), you can apply a syntax highlighting theme with the following YAML:\n\n```\n---\noutput:\n  distill::distill_article:\n    highlight: my_highlighting.theme\n---  \n```\n\nHere, the available options for `highlight` include `default`, `rstudio` (the default RStudio editor theme), and the `haddock`, `kate`, `monochrome`, `pygments` and `tango` [pandoc highlighting themes](https://www.garrickadenbuie.com/blog/pandoc-syntax-highlighting-examples/). Also, most importantly for us, it can also take the path to a `.theme` file.\n\nPresumably, we should be able to add this to our `_site.yml` file to have the theme apply site-wide (though note you'll have to rebuild the site and re-knit any posts where you want to it apply). However, that's not working for me. I have raised an [issue](https://github.com/rstudio/distill/issues/370) about it. If you face the same problem, it would be helpful if you could comment there too.\n\nThere is a workaround, though, which is that the above YAML can also be included in individual .Rmd articles, in which case the theme applies just fine, though note that if your `.theme` file is in you root directory, you'll need to give the full path to it.^[If you happen to inspect the source code for this post, you might notice that I have copied `ek_syntax_highlighting.theme` into the directory. This is *not* necessary for my site (using the full path to the `.theme` folder in my root directory is sufficient). However, I needed to do this to get the theme to show in the version of this post in the [distillery](https://distillery.rbind.io).] And if it sounds like a bit of a pain to have to add that every time you write a new post, consider creating a template for your posts, including those lines, and then starting new posts with the {distilltools} function [`create_post_from_template()`](https://ellakaye.github.io/distilltools/reference/create_post_from_template.html).^[Note that the `create_post_from_template()` function is likely to get wrapped into {distill} itself, or its functionality included in `distill::create_post()`, and will be depreciated from {distilltools} if so. (I have had some discussion with the {distill} team about this and will be submitting a PR in the near future.)]\n\n<!--------------- appendices go here ----------------->\n\n```{r appendix}\n#| echo: false\n\nsource(\"../../R/appendix.R\")\ninsert_appendix(\n  repo_spec = \"EllaKaye/ellakaye.co.uk\", \n  name = long_slug\n)\n```\n\n##### Session info {.appendix}\n\n<details><summary>Toggle</summary>\n\n```{r}\n#| echo: false\nlibrary(sessioninfo)\n# save the session info as an object\npkg_session <- session_info(pkgs = \"attached\")\n\n# get the quarto version\nquarto_version <- system(\"quarto --version\", intern = TRUE)\n\n# inject the quarto info\npkg_session$platform$quarto <- paste(\n  system(\"quarto --version\", intern = TRUE), \n  \"@\", \n  quarto::quarto_path()\n  )\n\n# print it out\npkg_session\n```\n\n</details>\n\n\n","srcMarkdownNoYaml":"\n\n```{r}\n#| echo: false\n#| results: 'hide'\n\nlong_slug <- \"2021-05-25_custom-highlighting-distill-1\"\n\n# NOTE: after finishing post, run renv::snapshot() and copy the renv.lock file \n# from the project root into the post directory\nrenv::use(lockfile = \"renv.lock\")\n```\n\n:::{.callout-note collapse=\"false\" .top-callout}\n## Update: August 2022\n\nSince this post was originally written, I have replaced my {disill} website with this one built with [Quarto](https://quarto.org). \n\n`arrow` is the default syntax highlighting theme for Quarto, as it was for {distill}, although it is implemented slightly differently here, and the process of modifying it for Quarto is not the same as it was before. I'll lay out the differences in a future post. Moreover, as a result, the highlighting you'll see below is not quite the same as it appeared on my previous site, and if you're reading this in dark mode, it's a whole different scheme again.^[If you'd like to see the original theme in action, you can see it over at the [distillery](https://distillery.rbind.io/posts/2021-05-25-custom-syntax-highlighting-for-distill-part-1-modifying-the-default-theme/).] That said, I am keeping this post otherwise as was on the blog for posterity. \n:::\n\n## Overview\n\nThe [{distill}](https://rstudio.github.io/distill/) package for R can be used to build easy-to-maintain websites written only in R Markdown, such as this one.^[For more on resources and inspirations for setting up a {distill} website, see my previous post, [Welcome to my {distill} website](../2021-05-08_welcome-distill/index.qmd).]\n\nI wrote a function to modify the default syntax highlighting theme. This `modify_default_highlighting` function is now part of the [{distilltools}](https://ellakaye.github.io/distilltools) package. \n\nHere's the function in action, to get the theme used on this site:\n\n```{r eval = FALSE}\n# get distilltools, requires remotes >= 2.2\nremotes::install_github(\"EllaKaye/distilltools\") \n\nlibrary(distilltools)\nmodify_default_highlighting(\n  name = \"ek_syntax_highlighting\",\n  numeric = \"#B6005B\", # replaces the default red\n  strings = \"#008643\", # replaces the default green\n  functions = \"#005BB6\", # replaces the default purple\n  control = \"#5B00B6\", # replaces the default blue\n  constant = \"#B65B00\" # replaces the default brown\n)\n```\n\nAnd here's the theme in action:\n\n```{r eval = FALSE}\nlibrary(dplyr)\nlibrary(palmerpenguins)\n\npenguins %>%\n  mutate(\n    long_flipper = case_when(\n      species == \"Adelie\" & flipper_length_mm > 195 ~ TRUE,\n      species == \"Chinstrap\" & flipper_length_mm > 200 ~ TRUE,\n      species == \"Gentoo\" & flipper_length_mm > 225 ~ TRUE,\n      TRUE ~ FALSE\n    )\n  ) %>%\n  mutate(\n    long_bill = case_when(\n      species == \"Adelie\" & bill_length_mm > 42 ~ TRUE,\n      species == \"Chinstrap\" & bill_length_mm > 52 ~ TRUE,\n      species == \"Gentoo\" & bill_length_mm > 50 ~ TRUE,\n      TRUE ~ FALSE\n    )\n  )\n```\n\nThis is the first in a series of two posts on implementing a custom syntax highlighting theme for a website or blog built with {distill}. Read on here for why and how this function was built, what it does and doesn't do, and its inclusion in the [{distilltools}](https://github.com/EllaKaye/distilltools) package. This post also outlines the criteria that were important to me when choosing colours for my theme, but take a look at part 2, [Custom syntax highlighting for {distill}: Creating the palette](../2021-05-26_custom-highlighting-distill-2/index.qmd), for a deep dive into considerations about colour choices, in respect to both colour theory and accessibility, and how I ensured my criteria were met.\n\n## But first, the default\n\n### In praise of the default\n\nBefore I delve into how to create a custom syntax highlighting scheme, I want to take a minute to admire the default. The authors of {distill}, in particular [Alison Hill](https://alison.rbind.io), have thought and worked hard to ensure that {distill} provides a good user experience, both for the site's author AND for those reading it. One of the key considerations for the latter is a default syntax highlighting scheme with colours that are optimised for accessibility and colour contrast. I say more about what that means below and in [part 2](../2021-05-26_custom-highlighting-distill-2/index.qmd). Also, it appears that the colours in the scheme work well together, and overall, on the many {distill} websites where I've seen the scheme used, I think it looks really good! For a great example of the default in action, check out this [code-chunk-heavy post](https://themockup.blog/posts/2021-03-07-creating-a-custom-gt-function-for-aligning-first-row-text-and-testing-it-with-testthat/) by [Tom Mock](https://twitter.com/thomas_mock).\n\n### So, why change?\n\n```{r echo = FALSE}\nlibrary(htmltools)\nlibrary(coloratio)\nbg_col <- function(bg_col, text = NULL, text_col = NULL) {\n  \n  if(is.null(text)) text <- bg_col\n  \n  if(is.null(text_col)) text_col <- coloratio::cr_choose_bw(bg_col)\n  \n  style <- paste0(\"background-color: \", bg_col, \"; color: \", text_col, \"; padding:3px\")\n  \n  htmltools::span(style = style, text)\n}\n```\n\n\nWhen I used the default syntax highlighting theme on my site I found, to my eye, that the red used for numeric variables clashed with the `r bg_col(\"#D4006A\", text = \"bright pink\")` (closest [colour name](https://chir.ag/projects/name-that-color/#D4006A) \"razzmatazz\") I've used in my logo and elsewhere throughout the site. So, I decided to tweak the default theme swapping the red for my pink and, to match it, more vibrant versions of the remaining colours. \n\n### Distill/pandoc documentation\nMy first task was to find out whether this was possible, and if, so, how. Thankfully, the {distill} documentation contains a section on [syntax highlighting](https://rstudio.github.io/distill/#syntax-highlighting), showing that there is an option to give `distill_article` a path to a custom `.theme` file. The [linked pandoc documentation on syntax highlighting](https://pandoc.org/MANUAL.html#syntax-highlighting) demonstrates how to use pandoc in the command line to save a personal version of the `pygments` highlighting theme. The documentation points out that that copy of the pygments `.theme` file can then be edited to create a custom theme. \n\n### Finding and saving the default\nOnce I had a general strategy of copying and editing an existing `.theme` file, my next task was to find the `.theme` file for the default used in {distill}, because that's what I'd already decided to take as my starting point.\n\nI cloned the [distill repo from GitHub](https://github.com/rstudio/distill) and opened it in RStudio.^[From RStudio, go to 'File' in the menu bar, then 'New Project...' Chose 'Version Control', then 'Git', then enter `https://github.com/rstudio/distill.git` as the 'Repository URL:' and click 'Create Project'] From there I began my detective work with one of my favourite RStudio features, 'Find in Files' (⇧ + ⌘ + F on a Mac), which searches across all files in a project. I searched for \"highlight\" and followed various trails until I discovered that the default is called `arrow.theme` and is stored in `inst/rmarkdown/templates/distill_article/resources/`. Thankfully, because it's in the `inst` folder, the file is accessible to users who have the {distill} package installed. In the RStudio project for my website, I created a new script, `syntax_highlighting.R`, in the `R` folder I have in my root directory, then I ran the following to save a copy of `arrow.theme` into my website's root directory:\n\n```{r eval = FALSE}\narrow_theme_path <- system.file(\n  \"rmarkdown/templates/distill_article/resources/arrow.theme\", \n  package = \"distill\"\n)\n\nfile.copy(arrow_theme_path, \"arrow.theme\")\n```\n\nWhen I had run that once, I commented out the above lines. I don't want any future changes in `arrow.theme` in {distill} to break what I do next.\n\n### Closer inspection of the default\n\nFrom there I could open up my copy of the `arrow.theme` file and manually inspect it. I use a great Mac app for building colour palettes, [ColorSlurp](https://colorslurp.com).^[I don't have experience of colour apps on other operating systems, but a quick search for ColorSlurp alternatives suggest there are [a bunch to pick from](https://alternativeto.net/software/colorslurp/).] The basic version is free, though the pro version has useful features for testing accessibility - more on that in [part 2](../2021-05-26_custom-highlighting-distill-2/index.qmd). I set up a new palette in ColorSlurp and, for each hex colour code I encountered, I saved it there.\n\nThere are 29 types of `text-styles` in the theme, of which:\n\n- 8 are assigned a grey, `r bg_col(\"#5E5E5E\")`, things like `Comment` and `Documentation`\n\n- 1 is off-black, `r bg_col(\"#111111\")`, `Variable`\n\n- 3 are blue, `r bg_col(\"#007BA5\")`, `Other`, `ControlFlow` and `Keyword`\n\n- 4 are green, `r bg_col(\"#20794D\")`, corresponding to various types of string\n\n- 1 is purple, `r bg_col(\"#4758AB\")`, `Function`\n\n- 7 are red, `r bg_col(\"#AD0000\")`, a mix of numeric (e.g. `BaseN`, `Float`) and things like `Alert` and `Error`\n\n- 1 is a brown, `r bg_col(\"#8F5902\")`, for `Constant`\n\n- 4 types are not assigned a colour - they are left as `null`\n\nI was happy to stick with the groupings, grey, off-black and `null` in the default, so now I knew I had to pick five colours for my theme.\n\n## Building my own palette \n\nI had four criteria for building a colour palette to use for my syntax highlighting theme:\n\n- It be based on the <span style=\"color:#D4006A\">pink</span> that I use in my logo and elsewhere throughout this site\n- It uses colour theory to pick colours that look appealing together\n- It meets [WCAG web accessibility guidelines](https://www.w3.org/WAI/standards-guidelines/wcag/), by ensuring sufficient colour contrast, i.e. a ratio of 4.5:1, between each of the colours in the theme and this site's background colour (white)\n- The colours in the palette are colourblind-friendly, i.e. still distinguishable to people with various difference types of colourblindness.\n\nI was originally going to write up how I went about building such a palette, both in terms of the thought process and tools used, as part of this post, but it was getting a little long^[As part of the process of writing the post, I learnt much more about colour theory, and alternatives to the approach that I had originally taken, and I wanted to share it all!], so I've spun it out into a separate post, [Custom syntax highlighting for {distill} part 2: Creating the palette ](../2021-05-26_custom-highlighting-distill-2/index.qmd).\n\nAt the end of the process, the palette for my syntax highlighting scheme is as in @fig-final-palette-light.\n\n```{r fig-ek-syntax-highlighting-palette, echo = FALSE, eval = FALSE, fig.cap=\"The color palette used for syntax highlighting throughout this site.\", fig.alt=\"A swatch of five colours, a bright pink, orange, green, blue and purple.\"}\nknitr::include_graphics(\"ek-syntax-highlighting-palette.png\")\n```\n\n\n```{r fig-final-palette-light}\n#| echo: false\n#| eval: true\n#| fig-cap: \"The palette I settled on for my syntax highlighting scheme.\"\n#| fig-alt: \"A swatch of five colours, a pink, orange, green, blue and purple, all quite bright, but still all with a contrast ratio of 4.5:1 or better against white.\"\n#| fig-width: 6.5\n#| fig-height: 4\n#| \nek_highlight_colours <- c(\"#5B00B6\", \"#005BB6\", \"#008643\", \"#B65B00\", \"#B6005B\")\n\nlibrary(ggplot2)\n\nggplot() +\n  geom_tile(aes(x=1:5, y = rep(1,5)), fill = rev(ek_highlight_colours)) +\n  theme_void() +\n  #theme(plot.background = element_rect(fill='transparent', color=NA))\n  theme(plot.background = element_rect(fill=\"#F8F9FA\", color = \"#F8F9FA\"))\n#swatchplot(rev(ek_highlight_colours), border = \"transparent\")\n# Using the above code gives too much white around the swatches, so I ran the code, took a screen shot to crop it, then include that image back in.\n\n```\n\n```{r fig-final-palette-dark}\n#| echo: false\n#| eval: false\n#| fig-cap: \"The palette I settled on for my syntax highlighting scheme.\"\n#| fig-alt: \"A swatch of five colours, a pink, orange, green, blue and purple, all quite bright, but still all with a contrast ratio of 4.5:1 or better against white.\"\n#| fig-width: 6.5\n#| fig-height: 4\n#| classes: dark-mode\n#| \nek_highlight_colours <- c(\"#5B00B6\", \"#005BB6\", \"#008643\", \"#B65B00\", \"#B6005B\")\n\nlibrary(ggplot2)\n\nggplot() +\n  geom_tile(aes(x=1:5, y = rep(1,5)), fill = rev(ek_highlight_colours)) +\n  theme_void() +\n  #theme(plot.background = element_rect(fill='transparent', color=NA))\n  theme(plot.background = element_rect(fill=\"#212129\", color = \"#212129\"))\n#swatchplot(rev(ek_highlight_colours), border = \"transparent\")\n# Using the above code gives too much white around the swatches, so I ran the code, took a screen shot to crop it, then include that image back in.\n\n```\n\n\n## Modifying `arrow.theme`\n\nWith all the pieces in place, it's now just a case of swapping out the default colour codes for our own choices. Although it's possible to manually edit the `arrow.theme` file we now have in our directory, to aid reproducibility, and with a view to writing this up as a function, I edited it using R code instead. I read in the file, substituted the hex codes, then saved the resulting theme into a new `ek_syntax_highlighting.theme` file (leaving `arrow.theme` unchanged). Below are two approaches, one using base R, the other in the tidyverse, that I put in my `syntax_highlighting.R` script.\n\n```{r eval = FALSE}\n\n# read in the default theme\ntheme <- readLines(\"arrow.theme\")\n\n# base R approach\ntheme <- gsub(\"#AD0000\", \"#B6005B\", theme) # red -> pink\ntheme <- gsub(\"#8f5902\", \"#B65B00\", theme) # brown -> brown \ntheme <- gsub(\"#007BA5\", \"#5B00B6\", theme) # blue -> purple\ntheme <- gsub(\"#20794D\", \"#B65B00\", theme) # green -> green\ntheme <- gsub(\"#4758AB\", \"#005BB6\", theme) # purple -> blue\n\n# alternatively, tidyverse approach\nlibrary(stringr)\nlibrary(magrittr)\n\ntheme <- readLines(\"arrow.theme\") %>%\n   str_replace_all(\"#AD0000\", \"#B6005B\") %>% # red -> pink\n   str_replace_all(\"#8f5902\", \"#B65B00\") %>% # brown -> brown \n   str_replace_all(\"#007BA5\", \"#5B00B6\") %>% # blue -> purple\n   str_replace_all(\"#20794D\", \"#008643\") %>% # green -> green\n   str_replace_all(\"#4758AB\", \"#005BB6\")     # purple -> blue\n\n# save new theme\nwriteLines(theme, \"ek_syntax_highlighting.theme\")\n```\n\nI now have the file `ek_syntax_highlighting.theme` in my root directory, with my colour choices.\n\nIt is, of course, possible to modify it further, either manually or by making further substutions in the code above. There is a quirk, though: if I swap one of the default hex codes for my own colour choice, that implements just fine, but if I swap any of the `null`s for a colour, that doesn't show up when I apply the theme. \n\n## Wrapping in a {distilltools} function\n\nWhen I figure out code to do something that I think I might want to do again, or think others might find useful, I generally like to write it up as a function, and that's what I've done with the above, wrapping it in a function called `modify_default_highlighting` and putting it in the  [{distilltools}](https://ellakaye.github.io/distilltools) package. {distilltools} is in the very early stages of development, an (expanding) collection of tools to support the creation and styling of content on websites created using {distill}. \n\nWhen I first announced the package, I included in the 'future functionality' section of the package README the intention to add a `create_highlight_theme` function. I don't think what I've done is quite versatile or fully-featured enough to warrant that name. Instead, I called it  `modify_default_highlighting` because that's all it does, allowing you to swap out the five colours in the default scheme for five colours of your choosing. It does, however, create a `.theme` file in your working directory, that can be further edited manually, or with your own R code, if further modifications are desired. \n\nThe first argument to `modify_default_highlighting` is `name`, the name you want to give your theme (which will create the file `name.theme`). It then takes five colour arguments, which can be specified either in the hex form \"#RRGGBB\" or as a named colour, from the colour names in [grDevices::colors()](https://rdrr.io/r/grDevices/colors.html). For a list of the colour names available in R, see page 3 of the [R color cheatsheet](https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf) for a one page summary, or [Colors in R](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf) for a slightly less visually overwhelming list. The final argument, `overwrite` (defaults to `TRUE`) specifies whether to overwrite `name.theme` if it already exists in the working directory. Here's the function in action again, this time using colour names (note that I have not tested the visual properties of this as a palette, just dropped in some colour names into the function):\n\n```{r eval = FALSE}\nlibrary(distilltools)\nmodify_default_highlighting(\n  name = \"ek_syntax_highlighting\",\n  numeric = \"deeppink\", # replaces the default red\n  strings = \"forestgreen\", # replaces the default green\n  functions = \"darkorchid3\", # replaces the default purple\n  control = \"royalbkue3\", # replaces the default blue\n  constant = \"darkorange1\" # replaces the default brown\n)\n```\n\n\n## Using the theme\n\nOnce you have you custom `.theme` file, you'll want to apply it to your site. According to the [{distill} documentation](https://rstudio.github.io/distill/#syntax-highlighting), you can apply a syntax highlighting theme with the following YAML:\n\n```\n---\noutput:\n  distill::distill_article:\n    highlight: my_highlighting.theme\n---  \n```\n\nHere, the available options for `highlight` include `default`, `rstudio` (the default RStudio editor theme), and the `haddock`, `kate`, `monochrome`, `pygments` and `tango` [pandoc highlighting themes](https://www.garrickadenbuie.com/blog/pandoc-syntax-highlighting-examples/). Also, most importantly for us, it can also take the path to a `.theme` file.\n\nPresumably, we should be able to add this to our `_site.yml` file to have the theme apply site-wide (though note you'll have to rebuild the site and re-knit any posts where you want to it apply). However, that's not working for me. I have raised an [issue](https://github.com/rstudio/distill/issues/370) about it. If you face the same problem, it would be helpful if you could comment there too.\n\nThere is a workaround, though, which is that the above YAML can also be included in individual .Rmd articles, in which case the theme applies just fine, though note that if your `.theme` file is in you root directory, you'll need to give the full path to it.^[If you happen to inspect the source code for this post, you might notice that I have copied `ek_syntax_highlighting.theme` into the directory. This is *not* necessary for my site (using the full path to the `.theme` folder in my root directory is sufficient). However, I needed to do this to get the theme to show in the version of this post in the [distillery](https://distillery.rbind.io).] And if it sounds like a bit of a pain to have to add that every time you write a new post, consider creating a template for your posts, including those lines, and then starting new posts with the {distilltools} function [`create_post_from_template()`](https://ellakaye.github.io/distilltools/reference/create_post_from_template.html).^[Note that the `create_post_from_template()` function is likely to get wrapped into {distill} itself, or its functionality included in `distill::create_post()`, and will be depreciated from {distilltools} if so. (I have had some discussion with the {distill} team about this and will be submitting a PR in the near future.)]\n\n<!--------------- appendices go here ----------------->\n\n```{r appendix}\n#| echo: false\n\nsource(\"../../R/appendix.R\")\ninsert_appendix(\n  repo_spec = \"EllaKaye/ellakaye.co.uk\", \n  name = long_slug\n)\n```\n\n##### Session info {.appendix}\n\n<details><summary>Toggle</summary>\n\n```{r}\n#| echo: false\nlibrary(sessioninfo)\n# save the session info as an object\npkg_session <- session_info(pkgs = \"attached\")\n\n# get the quarto version\nquarto_version <- system(\"quarto --version\", intern = TRUE)\n\n# inject the quarto info\npkg_session$platform$quarto <- paste(\n  system(\"quarto --version\", intern = TRUE), \n  \"@\", \n  quarto::quarto_path()\n  )\n\n# print it out\npkg_session\n```\n\n</details>\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../assets/ek-styles.css"],"highlight-style":{"light":"../../assets/ek-light.theme","dark":"../../assets/ek-dark.theme"},"output-file":"index.html"},"language":{"toc-title-document":"Table des matières","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","section-title-abstract":"Résumé","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les références","section-title-reuse":"Réutilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit :","appendix-attribution-bibtex":"BibTeX","title-block-author-single":"Auteur·rice","title-block-author-plural":"Auteur·rice·s","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifié","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copié","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Faire part d'un problème","back-to-top":"Retour au sommet","search-no-results-text":"Pas de résultats","search-matching-documents-text":"documents trouvés","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre latérale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Théorème","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Définition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"Équation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par défaut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus récent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur·rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifié","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-categories":"Catégories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant"},"metadata":{"lang":"fr","fig-responsive":true,"quarto-version":"1.3.353","editor":"source","theme":{"light":"../../assets/ek-theme-light.scss","dark":"../../assets/ek-theme-dark.scss"},"code-block-border-left":true,"smooth-scroll":true,"title":"Custom syntax highlighting for {distill} part 1","subtitle":"Modifying the default theme","description":"A guide to modifying the default {distill} syntax highlighting theme, including colour choice considerations, and its implementation in {distilltools}\n","date":"2021-05-25","author":[{"name":"Ella Kaye"}],"site-url":"https://ellakaye.co.uk","image":"more-theme-in-action.png","categories":["distill","distilltools","colour","accessibility","R"],"twitter-card":{"image-width":600,"image-height":314,"card-style":"summary_large_image"},"draft":false},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}